
sketch_feb26a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001bc  00800100  00002bea  00002c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030b  008002bc  008002bc  00002e3a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b20  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017e10  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b35  00000000  00000000  0001b808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000060f3  00000000  00000000  0001f33d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000029bc  00000000  00000000  00025430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000527f  00000000  00000000  00027dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000db95  00000000  00000000  0002d06b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ad0  00000000  00000000  0003ac00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__ctors_end>
       4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
       8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
       c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      10:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      14:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      18:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__vector_6>
      1c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      20:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      24:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      28:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      2c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      30:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      34:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      38:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      3c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      40:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_16>
      44:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      48:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__vector_18>
      4c:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__vector_19>
      50:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      54:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      58:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      5c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      60:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__vector_24>
      64:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <_ZL11dscrc_table>:
      c2:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
      d2:	9d c3 21 7f fc a2 40 1e 5f 01 e3 bd 3e 60 82 dc     ..!...@._...>`..
      e2:	23 7d 9f c1 42 1c fe a0 e1 bf 5d 03 80 de 3c 62     #}..B.....]...<b
      f2:	be e0 02 5c df 81 63 3d 7c 22 c0 9e 1d 43 a1 ff     ...\..c=|"...C..
     102:	46 18 fa a4 27 79 9b c5 84 da 38 66 e5 bb 59 07     F...'y....8f..Y.
     112:	db 85 67 39 ba e4 06 58 19 47 a5 fb 78 26 c4 9a     ..g9...X.G..x&..
     122:	65 3b d9 87 04 5a b8 e6 a7 f9 1b 45 c6 98 7a 24     e;...Z.....E..z$
     132:	f8 a6 44 1a 99 c7 25 7b 3a 64 86 d8 5b 05 e7 b9     ..D...%{:d..[...
     142:	8c d2 30 6e ed b3 51 0f 4e 10 f2 ac 2f 71 93 cd     ..0n..Q.N.../q..
     152:	11 4f ad f3 70 2e cc 92 d3 8d 6f 31 b2 ec 0e 50     .O..p.....o1...P
     162:	af f1 13 4d ce 90 72 2c 6d 33 d1 8f 0c 52 b0 ee     ...M..r,m3...R..
     172:	32 6c 8e d0 53 0d ef b1 f0 ae 4c 12 91 cf 2d 73     2l..S.....L...-s
     182:	ca 94 76 28 ab f5 17 49 08 56 b4 ea 69 37 d5 8b     ..v(...I.V..i7..
     192:	57 09 eb b5 36 68 8a d4 95 cb 29 77 f4 aa 48 16     W...6h....)w..H.
     1a2:	e9 b7 55 0b 88 d6 34 6a 2b 75 97 c9 4a 14 f6 a8     ..U...4j+u..J...
     1b2:	74 2a c8 96 15 4b a9 f7 b6 e8 0a 54 d7 89 6b 35     t*...K.....T..k5

000001c2 <__ctors_start>:
     1c2:	c1 01       	movw	r24, r2
     1c4:	6b 07       	cpc	r22, r27
     1c6:	68 0e       	add	r6, r24
     1c8:	cd 10       	cpse	r12, r13

000001ca <__ctors_end>:
     1ca:	11 24       	eor	r1, r1
     1cc:	1f be       	out	0x3f, r1	; 63
     1ce:	cf ef       	ldi	r28, 0xFF	; 255
     1d0:	d8 e0       	ldi	r29, 0x08	; 8
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	cd bf       	out	0x3d, r28	; 61

000001d6 <__do_copy_data>:
     1d6:	12 e0       	ldi	r17, 0x02	; 2
     1d8:	a0 e0       	ldi	r26, 0x00	; 0
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	ea ee       	ldi	r30, 0xEA	; 234
     1de:	fb e2       	ldi	r31, 0x2B	; 43
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__do_copy_data+0x10>
     1e2:	05 90       	lpm	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	ac 3b       	cpi	r26, 0xBC	; 188
     1e8:	b1 07       	cpc	r27, r17
     1ea:	d9 f7       	brne	.-10     	; 0x1e2 <__do_copy_data+0xc>

000001ec <__do_clear_bss>:
     1ec:	25 e0       	ldi	r18, 0x05	; 5
     1ee:	ac eb       	ldi	r26, 0xBC	; 188
     1f0:	b2 e0       	ldi	r27, 0x02	; 2
     1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <.do_clear_bss_start>

000001f4 <.do_clear_bss_loop>:
     1f4:	1d 92       	st	X+, r1

000001f6 <.do_clear_bss_start>:
     1f6:	a7 3c       	cpi	r26, 0xC7	; 199
     1f8:	b2 07       	cpc	r27, r18
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <.do_clear_bss_loop>

000001fc <__do_global_ctors>:
     1fc:	10 e0       	ldi	r17, 0x00	; 0
     1fe:	c5 ee       	ldi	r28, 0xE5	; 229
     200:	d0 e0       	ldi	r29, 0x00	; 0
     202:	04 c0       	rjmp	.+8      	; 0x20c <__do_global_ctors+0x10>
     204:	21 97       	sbiw	r28, 0x01	; 1
     206:	fe 01       	movw	r30, r28
     208:	0e 94 42 14 	call	0x2884	; 0x2884 <__tablejump2__>
     20c:	c1 3e       	cpi	r28, 0xE1	; 225
     20e:	d1 07       	cpc	r29, r17
     210:	c9 f7       	brne	.-14     	; 0x204 <__do_global_ctors+0x8>
     212:	0e 94 cd 01 	call	0x39a	; 0x39a <main>
     216:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <_exit>

0000021a <__bad_interrupt>:
     21a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021e <setup>:
uint8_t data[12];
uint8_t size;

void setup()
{
	pinMode(13,OUTPUT);
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	8d e0       	ldi	r24, 0x0D	; 13
     222:	0e 94 61 03 	call	0x6c2	; 0x6c2 <pinMode>
	digitalWrite(13,LOW);
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	8d e0       	ldi	r24, 0x0D	; 13
     22a:	0e 94 9d 03 	call	0x73a	; 0x73a <digitalWrite>
	//////////////////////////////////////////////
	// 1. switch on
	//////////////////////////////////////////////
	Sigfox.ON(socket);
     22e:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <socket>
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	93 e0       	ldi	r25, 0x03	; 3
     236:	0c 94 39 07 	jmp	0xe72	; 0xe72 <_ZN13arduinoSigfox2ONEh>

0000023a <loop>:
}

int i;

void loop()
{
     23a:	cf 93       	push	r28
  // get temperature
  // Tell the Sensor to Measure and Remember the Temperature it Measured
  
  for ( i = 0; i < 7; i++)
     23c:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <i+0x1>
     240:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <i>
    data[2] = temp_union.value1[1];
    data[3] = temp_union.value1[0];
    uint8_t sensor = i + 1;
    data[4] = sensor;
    
    size = 5;
     244:	c5 e0       	ldi	r28, 0x05	; 5
void loop()
{
  // get temperature
  // Tell the Sensor to Measure and Remember the Temperature it Measured
  
  for ( i = 0; i < 7; i++)
     246:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <i>
     24a:	70 91 bf 02 	lds	r23, 0x02BF	; 0x8002bf <i+0x1>
     24e:	67 30       	cpi	r22, 0x07	; 7
     250:	71 05       	cpc	r23, r1
     252:	0c f0       	brlt	.+2      	; 0x256 <loop+0x1c>
     254:	53 c0       	rjmp	.+166    	; 0x2fc <loop+0xc2>
	//for (i = 0; i < 2 ; i++) 	// test for 2 times
  {
    sensors.requestTemperaturesByAddress(tempSensor[i]); // Send the command to get temperatures
     256:	83 e0       	ldi	r24, 0x03	; 3
     258:	66 0f       	add	r22, r22
     25a:	77 1f       	adc	r23, r23
     25c:	8a 95       	dec	r24
     25e:	e1 f7       	brne	.-8      	; 0x258 <loop+0x1e>
     260:	60 50       	subi	r22, 0x00	; 0
     262:	7f 4f       	sbci	r23, 0xFF	; 255
     264:	86 ed       	ldi	r24, 0xD6	; 214
     266:	92 e0       	ldi	r25, 0x02	; 2
     268:	0e 94 c8 04 	call	0x990	; 0x990 <_ZN17DallasTemperature28requestTemperaturesByAddressEPKh>
    
    // Get the temperature that you told the sensor to measure
    tempC = sensors.getTempC(tempSensor[i]);
     26c:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <i>
     270:	70 91 bf 02 	lds	r23, 0x02BF	; 0x8002bf <i+0x1>
     274:	93 e0       	ldi	r25, 0x03	; 3
     276:	66 0f       	add	r22, r22
     278:	77 1f       	adc	r23, r23
     27a:	9a 95       	dec	r25
     27c:	e1 f7       	brne	.-8      	; 0x276 <loop+0x3c>
     27e:	60 50       	subi	r22, 0x00	; 0
     280:	7f 4f       	sbci	r23, 0xFF	; 255
     282:	86 ed       	ldi	r24, 0xD6	; 214
     284:	92 e0       	ldi	r25, 0x02	; 2
     286:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN17DallasTemperature8getTempCEPKh>
     28a:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <tempC>
     28e:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <tempC+0x1>
     292:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <tempC+0x2>
     296:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <tempC+0x3>
    
    // Fill structure fields
    temp_union.value2 = tempC;
     29a:	60 93 cd 02 	sts	0x02CD, r22	; 0x8002cd <temp_union>
     29e:	70 93 ce 02 	sts	0x02CE, r23	; 0x8002ce <temp_union+0x1>
     2a2:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <temp_union+0x2>
     2a6:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <temp_union+0x3>
    
    
    // fill 'data' buffer with data from sensor 1
    data[0] = temp_union.value1[3]; // big-endian
     2aa:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <temp_union+0x3>
     2ae:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <data>
    data[1] = temp_union.value1[2];
     2b2:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <temp_union+0x2>
     2b6:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <data+0x1>
    data[2] = temp_union.value1[1];
     2ba:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <temp_union+0x1>
     2be:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <data+0x2>
    data[3] = temp_union.value1[0];
     2c2:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <temp_union>
     2c6:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <data+0x3>
    uint8_t sensor = i + 1;
    data[4] = sensor;
     2ca:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <i>
     2ce:	8f 5f       	subi	r24, 0xFF	; 255
     2d0:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <data+0x4>
    
    size = 5;
     2d4:	c0 93 c0 02 	sts	0x02C0, r28	; 0x8002c0 <size>
    // Send temperature packet
    Sigfox.send(data, size); 
     2d8:	45 e0       	ldi	r20, 0x05	; 5
     2da:	50 e0       	ldi	r21, 0x00	; 0
     2dc:	61 ec       	ldi	r22, 0xC1	; 193
     2de:	72 e0       	ldi	r23, 0x02	; 2
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	93 e0       	ldi	r25, 0x03	; 3
     2e4:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN13arduinoSigfox4sendEPhj>
void loop()
{
  // get temperature
  // Tell the Sensor to Measure and Remember the Temperature it Measured
  
  for ( i = 0; i < 7; i++)
     2e8:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <i>
     2ec:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <i+0x1>
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <i+0x1>
     2f6:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <i>
     2fa:	a5 cf       	rjmp	.-182    	; 0x246 <loop+0xc>
  }
  
  //////////////////////////////////////////////
  // 1. switch off
  //////////////////////////////////////////////
  Sigfox.OFF(socket);
     2fc:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <socket>
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	93 e0       	ldi	r25, 0x03	; 3
     304:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_ZN13arduinoSigfox3OFFEh>
  
  // stop the current goes through pins
  digitalWrite(1, LOW);
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	0e 94 9d 03 	call	0x73a	; 0x73a <digitalWrite>
  digitalWrite(2, LOW);
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	0e 94 9d 03 	call	0x73a	; 0x73a <digitalWrite>
  digitalWrite(3, LOW);
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	83 e0       	ldi	r24, 0x03	; 3
     31c:	0e 94 9d 03 	call	0x73a	; 0x73a <digitalWrite>
  digitalWrite(4, LOW);
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	84 e0       	ldi	r24, 0x04	; 4
     324:	0e 94 9d 03 	call	0x73a	; 0x73a <digitalWrite>
  analogWrite(A1, LOW);
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	8f e0       	ldi	r24, 0x0F	; 15
     32e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <analogWrite>
  analogWrite(A5, LOW);
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	83 e1       	ldi	r24, 0x13	; 19
     338:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <analogWrite>
  
  // run once a day
  for (i = 0; i < 10800 ; i++) {
     33c:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <i+0x1>
     340:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <i>
     344:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <i>
     348:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <i+0x1>
     34c:	80 33       	cpi	r24, 0x30	; 48
     34e:	9a 42       	sbci	r25, 0x2A	; 42
     350:	8c f4       	brge	.+34     	; 0x374 <loop+0x13a>
	//for (i = 0; i < 2 ; i++) {	// test for 2 times
    LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	40 e0       	ldi	r20, 0x00	; 0
     356:	69 e0       	ldi	r22, 0x09	; 9
     358:	84 e6       	ldi	r24, 0x64	; 100
     35a:	94 e0       	ldi	r25, 0x04	; 4
     35c:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>
  digitalWrite(4, LOW);
  analogWrite(A1, LOW);
  analogWrite(A5, LOW);
  
  // run once a day
  for (i = 0; i < 10800 ; i++) {
     360:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <i>
     364:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <i+0x1>
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <i+0x1>
     36e:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <i>
     372:	e8 cf       	rjmp	.-48     	; 0x344 <loop+0x10a>
    LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
  }
	//////////////////////////////////////////////
	// 1. switch on
	//////////////////////////////////////////////
	Sigfox.ON(socket);
     374:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <socket>
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	93 e0       	ldi	r25, 0x03	; 3
}
     37c:	cf 91       	pop	r28
    LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
  }
	//////////////////////////////////////////////
	// 1. switch on
	//////////////////////////////////////////////
	Sigfox.ON(socket);
     37e:	0c 94 39 07 	jmp	0xe72	; 0xe72 <_ZN13arduinoSigfox2ONEh>

00000382 <_GLOBAL__sub_I_oneWire>:
// Data wire is plugged into pin 2 on the Arduino
#define ONE_WIRE 2

// Setup a oneWire instance to communicate with any OneWire devices
// (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE);
     382:	62 e0       	ldi	r22, 0x02	; 2
     384:	8a ee       	ldi	r24, 0xEA	; 234
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	0e 94 01 09 	call	0x1202	; 0x1202 <_ZN7OneWireC1Eh>

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);
     38c:	6a ee       	ldi	r22, 0xEA	; 234
     38e:	72 e0       	ldi	r23, 0x02	; 2
     390:	86 ed       	ldi	r24, 0xD6	; 214
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <_ZN17DallasTemperatureC1EP7OneWire>

00000398 <initVariant>:
     398:	08 95       	ret

0000039a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     39a:	0e 94 9e 02 	call	0x53c	; 0x53c <init>

	initVariant();
     39e:	0e 94 cc 01 	call	0x398	; 0x398 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     3a2:	0e 94 0f 01 	call	0x21e	; 0x21e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     3a6:	c4 ee       	ldi	r28, 0xE4	; 228
     3a8:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
     3aa:	0e 94 1d 01 	call	0x23a	; 0x23a <loop>
		if (serialEventRun) serialEventRun();
     3ae:	20 97       	sbiw	r28, 0x00	; 0
     3b0:	e1 f3       	breq	.-8      	; 0x3aa <main+0x10>
     3b2:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_Z14serialEventRunv>
     3b6:	f9 cf       	rjmp	.-14     	; 0x3aa <main+0x10>

000003b8 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	2f 93       	push	r18
     3c4:	3f 93       	push	r19
     3c6:	8f 93       	push	r24
     3c8:	9f 93       	push	r25
     3ca:	af 93       	push	r26
     3cc:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     3ce:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <timer0_millis>
     3d2:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <timer0_millis+0x1>
     3d6:	a0 91 fb 02 	lds	r26, 0x02FB	; 0x8002fb <timer0_millis+0x2>
     3da:	b0 91 fc 02 	lds	r27, 0x02FC	; 0x8002fc <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     3de:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     3e2:	23 e0       	ldi	r18, 0x03	; 3
     3e4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     3e6:	2d 37       	cpi	r18, 0x7D	; 125
     3e8:	20 f4       	brcc	.+8      	; 0x3f2 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     3ea:	01 96       	adiw	r24, 0x01	; 1
     3ec:	a1 1d       	adc	r26, r1
     3ee:	b1 1d       	adc	r27, r1
     3f0:	05 c0       	rjmp	.+10     	; 0x3fc <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     3f2:	26 e8       	ldi	r18, 0x86	; 134
     3f4:	23 0f       	add	r18, r19
		m += 1;
     3f6:	02 96       	adiw	r24, 0x02	; 2
     3f8:	a1 1d       	adc	r26, r1
     3fa:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     3fc:	20 93 f8 02 	sts	0x02F8, r18	; 0x8002f8 <timer0_fract>
	timer0_millis = m;
     400:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <timer0_millis>
     404:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <timer0_millis+0x1>
     408:	a0 93 fb 02 	sts	0x02FB, r26	; 0x8002fb <timer0_millis+0x2>
     40c:	b0 93 fc 02 	sts	0x02FC, r27	; 0x8002fc <timer0_millis+0x3>
	timer0_overflow_count++;
     410:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <timer0_overflow_count>
     414:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <timer0_overflow_count+0x1>
     418:	a0 91 ff 02 	lds	r26, 0x02FF	; 0x8002ff <timer0_overflow_count+0x2>
     41c:	b0 91 00 03 	lds	r27, 0x0300	; 0x800300 <timer0_overflow_count+0x3>
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	a1 1d       	adc	r26, r1
     424:	b1 1d       	adc	r27, r1
     426:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <timer0_overflow_count>
     42a:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <timer0_overflow_count+0x1>
     42e:	a0 93 ff 02 	sts	0x02FF, r26	; 0x8002ff <timer0_overflow_count+0x2>
     432:	b0 93 00 03 	sts	0x0300, r27	; 0x800300 <timer0_overflow_count+0x3>
}
     436:	bf 91       	pop	r27
     438:	af 91       	pop	r26
     43a:	9f 91       	pop	r25
     43c:	8f 91       	pop	r24
     43e:	3f 91       	pop	r19
     440:	2f 91       	pop	r18
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     44c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     44e:	f8 94       	cli
	m = timer0_millis;
     450:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <timer0_millis>
     454:	70 91 fa 02 	lds	r23, 0x02FA	; 0x8002fa <timer0_millis+0x1>
     458:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <timer0_millis+0x2>
     45c:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <timer0_millis+0x3>
	SREG = oldSREG;
     460:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     462:	08 95       	ret

00000464 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     464:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     466:	f8 94       	cli
	m = timer0_overflow_count;
     468:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <timer0_overflow_count>
     46c:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <timer0_overflow_count+0x1>
     470:	a0 91 ff 02 	lds	r26, 0x02FF	; 0x8002ff <timer0_overflow_count+0x2>
     474:	b0 91 00 03 	lds	r27, 0x0300	; 0x800300 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     478:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     47a:	a8 9b       	sbis	0x15, 0	; 21
     47c:	05 c0       	rjmp	.+10     	; 0x488 <micros+0x24>
     47e:	2f 3f       	cpi	r18, 0xFF	; 255
     480:	19 f0       	breq	.+6      	; 0x488 <micros+0x24>
		m++;
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	a1 1d       	adc	r26, r1
     486:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     488:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     48a:	ba 2f       	mov	r27, r26
     48c:	a9 2f       	mov	r26, r25
     48e:	98 2f       	mov	r25, r24
     490:	88 27       	eor	r24, r24
     492:	82 0f       	add	r24, r18
     494:	91 1d       	adc	r25, r1
     496:	a1 1d       	adc	r26, r1
     498:	b1 1d       	adc	r27, r1
     49a:	bc 01       	movw	r22, r24
     49c:	cd 01       	movw	r24, r26
     49e:	42 e0       	ldi	r20, 0x02	; 2
     4a0:	66 0f       	add	r22, r22
     4a2:	77 1f       	adc	r23, r23
     4a4:	88 1f       	adc	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	4a 95       	dec	r20
     4aa:	d1 f7       	brne	.-12     	; 0x4a0 <micros+0x3c>
}
     4ac:	08 95       	ret

000004ae <delay>:

void delay(unsigned long ms)
{
     4ae:	8f 92       	push	r8
     4b0:	9f 92       	push	r9
     4b2:	af 92       	push	r10
     4b4:	bf 92       	push	r11
     4b6:	cf 92       	push	r12
     4b8:	df 92       	push	r13
     4ba:	ef 92       	push	r14
     4bc:	ff 92       	push	r15
     4be:	6b 01       	movw	r12, r22
     4c0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     4c2:	0e 94 32 02 	call	0x464	; 0x464 <micros>
     4c6:	4b 01       	movw	r8, r22
     4c8:	5c 01       	movw	r10, r24

	while (ms > 0) {
     4ca:	c1 14       	cp	r12, r1
     4cc:	d1 04       	cpc	r13, r1
     4ce:	e1 04       	cpc	r14, r1
     4d0:	f1 04       	cpc	r15, r1
     4d2:	01 f1       	breq	.+64     	; 0x514 <delay+0x66>
		yield();
     4d4:	0e 94 31 09 	call	0x1262	; 0x1262 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     4d8:	0e 94 32 02 	call	0x464	; 0x464 <micros>
     4dc:	dc 01       	movw	r26, r24
     4de:	cb 01       	movw	r24, r22
     4e0:	88 19       	sub	r24, r8
     4e2:	99 09       	sbc	r25, r9
     4e4:	aa 09       	sbc	r26, r10
     4e6:	bb 09       	sbc	r27, r11
     4e8:	88 3e       	cpi	r24, 0xE8	; 232
     4ea:	93 40       	sbci	r25, 0x03	; 3
     4ec:	a1 05       	cpc	r26, r1
     4ee:	b1 05       	cpc	r27, r1
     4f0:	60 f3       	brcs	.-40     	; 0x4ca <delay+0x1c>
			ms--;
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	c2 1a       	sub	r12, r18
     4f6:	d1 08       	sbc	r13, r1
     4f8:	e1 08       	sbc	r14, r1
     4fa:	f1 08       	sbc	r15, r1
			start += 1000;
     4fc:	88 ee       	ldi	r24, 0xE8	; 232
     4fe:	88 0e       	add	r8, r24
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	98 1e       	adc	r9, r24
     504:	a1 1c       	adc	r10, r1
     506:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     508:	c1 14       	cp	r12, r1
     50a:	d1 04       	cpc	r13, r1
     50c:	e1 04       	cpc	r14, r1
     50e:	f1 04       	cpc	r15, r1
     510:	19 f7       	brne	.-58     	; 0x4d8 <delay+0x2a>
     512:	db cf       	rjmp	.-74     	; 0x4ca <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	df 90       	pop	r13
     51a:	cf 90       	pop	r12
     51c:	bf 90       	pop	r11
     51e:	af 90       	pop	r10
     520:	9f 90       	pop	r9
     522:	8f 90       	pop	r8
     524:	08 95       	ret

00000526 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     526:	82 30       	cpi	r24, 0x02	; 2
     528:	91 05       	cpc	r25, r1
     52a:	38 f0       	brcs	.+14     	; 0x53a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	88 0f       	add	r24, r24
     532:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     534:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <delayMicroseconds+0x10>
     53a:	08 95       	ret

0000053c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     53c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     53e:	84 b5       	in	r24, 0x24	; 36
     540:	82 60       	ori	r24, 0x02	; 2
     542:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     544:	84 b5       	in	r24, 0x24	; 36
     546:	81 60       	ori	r24, 0x01	; 1
     548:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     54a:	85 b5       	in	r24, 0x25	; 37
     54c:	82 60       	ori	r24, 0x02	; 2
     54e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     550:	85 b5       	in	r24, 0x25	; 37
     552:	81 60       	ori	r24, 0x01	; 1
     554:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     556:	ee e6       	ldi	r30, 0x6E	; 110
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	81 60       	ori	r24, 0x01	; 1
     55e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     560:	e1 e8       	ldi	r30, 0x81	; 129
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     566:	80 81       	ld	r24, Z
     568:	82 60       	ori	r24, 0x02	; 2
     56a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     56c:	80 81       	ld	r24, Z
     56e:	81 60       	ori	r24, 0x01	; 1
     570:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     572:	e0 e8       	ldi	r30, 0x80	; 128
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	81 60       	ori	r24, 0x01	; 1
     57a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     57c:	e1 eb       	ldi	r30, 0xB1	; 177
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	84 60       	ori	r24, 0x04	; 4
     584:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     586:	e0 eb       	ldi	r30, 0xB0	; 176
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	81 60       	ori	r24, 0x01	; 1
     58e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     590:	ea e7       	ldi	r30, 0x7A	; 122
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	84 60       	ori	r24, 0x04	; 4
     598:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     59a:	80 81       	ld	r24, Z
     59c:	82 60       	ori	r24, 0x02	; 2
     59e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     5a0:	80 81       	ld	r24, Z
     5a2:	81 60       	ori	r24, 0x01	; 1
     5a4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     5a6:	80 81       	ld	r24, Z
     5a8:	80 68       	ori	r24, 0x80	; 128
     5aa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     5ac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     5b0:	08 95       	ret

000005b2 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	18 2f       	mov	r17, r24
     5ba:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	0e 94 61 03 	call	0x6c2	; 0x6c2 <pinMode>
	if (val == 0)
     5c2:	20 97       	sbiw	r28, 0x00	; 0
     5c4:	11 f4       	brne	.+4      	; 0x5ca <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <analogWrite+0x20>
	}
	else if (val == 255)
     5ca:	cf 3f       	cpi	r28, 0xFF	; 255
     5cc:	d1 05       	cpc	r29, r1
     5ce:	39 f4       	brne	.+14     	; 0x5de <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
     5da:	0c 94 9d 03 	jmp	0x73a	; 0x73a <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
     5de:	e1 2f       	mov	r30, r17
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	e8 59       	subi	r30, 0x98	; 152
     5e4:	ff 4f       	sbci	r31, 0xFF	; 255
     5e6:	e4 91       	lpm	r30, Z
     5e8:	e3 30       	cpi	r30, 0x03	; 3
     5ea:	f9 f0       	breq	.+62     	; 0x62a <analogWrite+0x78>
     5ec:	48 f4       	brcc	.+18     	; 0x600 <analogWrite+0x4e>
     5ee:	e1 30       	cpi	r30, 0x01	; 1
     5f0:	b9 f0       	breq	.+46     	; 0x620 <analogWrite+0x6e>
     5f2:	e2 30       	cpi	r30, 0x02	; 2
     5f4:	a1 f5       	brne	.+104    	; 0x65e <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
     5f6:	84 b5       	in	r24, 0x24	; 36
     5f8:	80 62       	ori	r24, 0x20	; 32
     5fa:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
     5fc:	c8 bd       	out	0x28, r28	; 40
				break;
     5fe:	34 c0       	rjmp	.+104    	; 0x668 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
     600:	e7 30       	cpi	r30, 0x07	; 7
     602:	e9 f0       	breq	.+58     	; 0x63e <analogWrite+0x8c>
     604:	e8 30       	cpi	r30, 0x08	; 8
     606:	19 f1       	breq	.+70     	; 0x64e <analogWrite+0x9c>
     608:	e4 30       	cpi	r30, 0x04	; 4
     60a:	49 f5       	brne	.+82     	; 0x65e <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
     60c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     610:	80 62       	ori	r24, 0x20	; 32
     612:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
     616:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     61a:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
     61e:	24 c0       	rjmp	.+72     	; 0x668 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
     620:	84 b5       	in	r24, 0x24	; 36
     622:	80 68       	ori	r24, 0x80	; 128
     624:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
     626:	c7 bd       	out	0x27, r28	; 39
				break;
     628:	1f c0       	rjmp	.+62     	; 0x668 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
     62a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     62e:	80 68       	ori	r24, 0x80	; 128
     630:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
     634:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     638:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
     63c:	15 c0       	rjmp	.+42     	; 0x668 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
     63e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     642:	80 68       	ori	r24, 0x80	; 128
     644:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
     648:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
     64c:	0d c0       	rjmp	.+26     	; 0x668 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
     64e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     652:	80 62       	ori	r24, 0x20	; 32
     654:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
     658:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
     65c:	05 c0       	rjmp	.+10     	; 0x668 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
     65e:	c0 38       	cpi	r28, 0x80	; 128
     660:	d1 05       	cpc	r29, r1
     662:	0c f0       	brlt	.+2      	; 0x666 <analogWrite+0xb4>
     664:	b5 cf       	rjmp	.-150    	; 0x5d0 <analogWrite+0x1e>
     666:	af cf       	rjmp	.-162    	; 0x5c6 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	08 95       	ret

00000670 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	81 f0       	breq	.+32     	; 0x694 <turnOffPWM+0x24>
     674:	28 f4       	brcc	.+10     	; 0x680 <turnOffPWM+0x10>
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	99 f0       	breq	.+38     	; 0x6a0 <turnOffPWM+0x30>
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	a1 f0       	breq	.+40     	; 0x6a6 <turnOffPWM+0x36>
     67e:	08 95       	ret
     680:	87 30       	cpi	r24, 0x07	; 7
     682:	a9 f0       	breq	.+42     	; 0x6ae <turnOffPWM+0x3e>
     684:	88 30       	cpi	r24, 0x08	; 8
     686:	b9 f0       	breq	.+46     	; 0x6b6 <turnOffPWM+0x46>
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	d1 f4       	brne	.+52     	; 0x6c0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     68c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     690:	8f 7d       	andi	r24, 0xDF	; 223
     692:	03 c0       	rjmp	.+6      	; 0x69a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     694:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     698:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     69a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     69e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     6a0:	84 b5       	in	r24, 0x24	; 36
     6a2:	8f 77       	andi	r24, 0x7F	; 127
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     6a6:	84 b5       	in	r24, 0x24	; 36
     6a8:	8f 7d       	andi	r24, 0xDF	; 223
     6aa:	84 bd       	out	0x24, r24	; 36
     6ac:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     6ae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     6b2:	8f 77       	andi	r24, 0x7F	; 127
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     6b6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     6ba:	8f 7d       	andi	r24, 0xDF	; 223
     6bc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     6c0:	08 95       	ret

000006c2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	fc 01       	movw	r30, r24
     6ca:	e4 58       	subi	r30, 0x84	; 132
     6cc:	ff 4f       	sbci	r31, 0xFF	; 255
     6ce:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     6d0:	fc 01       	movw	r30, r24
     6d2:	e0 57       	subi	r30, 0x70	; 112
     6d4:	ff 4f       	sbci	r31, 0xFF	; 255
     6d6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     6d8:	88 23       	and	r24, r24
     6da:	61 f1       	breq	.+88     	; 0x734 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	fc 01       	movw	r30, r24
     6e4:	e8 54       	subi	r30, 0x48	; 72
     6e6:	ff 4f       	sbci	r31, 0xFF	; 255
     6e8:	c5 91       	lpm	r28, Z+
     6ea:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     6ec:	fc 01       	movw	r30, r24
     6ee:	e2 55       	subi	r30, 0x52	; 82
     6f0:	ff 4f       	sbci	r31, 0xFF	; 255
     6f2:	a5 91       	lpm	r26, Z+
     6f4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     6f6:	61 11       	cpse	r22, r1
     6f8:	09 c0       	rjmp	.+18     	; 0x70c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     6fa:	9f b7       	in	r25, 0x3f	; 63
                cli();
     6fc:	f8 94       	cli
		*reg &= ~bit;
     6fe:	88 81       	ld	r24, Y
     700:	20 95       	com	r18
     702:	82 23       	and	r24, r18
     704:	88 83       	st	Y, r24
		*out &= ~bit;
     706:	ec 91       	ld	r30, X
     708:	2e 23       	and	r18, r30
     70a:	0b c0       	rjmp	.+22     	; 0x722 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     70c:	62 30       	cpi	r22, 0x02	; 2
     70e:	61 f4       	brne	.+24     	; 0x728 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     710:	9f b7       	in	r25, 0x3f	; 63
                cli();
     712:	f8 94       	cli
		*reg &= ~bit;
     714:	88 81       	ld	r24, Y
     716:	32 2f       	mov	r19, r18
     718:	30 95       	com	r19
     71a:	83 23       	and	r24, r19
     71c:	88 83       	st	Y, r24
		*out |= bit;
     71e:	ec 91       	ld	r30, X
     720:	2e 2b       	or	r18, r30
     722:	2c 93       	st	X, r18
		SREG = oldSREG;
     724:	9f bf       	out	0x3f, r25	; 63
     726:	06 c0       	rjmp	.+12     	; 0x734 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     728:	8f b7       	in	r24, 0x3f	; 63
                cli();
     72a:	f8 94       	cli
		*reg |= bit;
     72c:	e8 81       	ld	r30, Y
     72e:	2e 2b       	or	r18, r30
     730:	28 83       	st	Y, r18
		SREG = oldSREG;
     732:	8f bf       	out	0x3f, r24	; 63
	}
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     740:	28 2f       	mov	r18, r24
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	f9 01       	movw	r30, r18
     746:	e8 59       	subi	r30, 0x98	; 152
     748:	ff 4f       	sbci	r31, 0xFF	; 255
     74a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     74c:	f9 01       	movw	r30, r18
     74e:	e4 58       	subi	r30, 0x84	; 132
     750:	ff 4f       	sbci	r31, 0xFF	; 255
     752:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     754:	f9 01       	movw	r30, r18
     756:	e0 57       	subi	r30, 0x70	; 112
     758:	ff 4f       	sbci	r31, 0xFF	; 255
     75a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     75c:	cc 23       	and	r28, r28
     75e:	c1 f0       	breq	.+48     	; 0x790 <digitalWrite+0x56>
     760:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     762:	81 11       	cpse	r24, r1
     764:	0e 94 38 03 	call	0x670	; 0x670 <turnOffPWM>

	out = portOutputRegister(port);
     768:	ec 2f       	mov	r30, r28
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	ee 0f       	add	r30, r30
     76e:	ff 1f       	adc	r31, r31
     770:	e2 55       	subi	r30, 0x52	; 82
     772:	ff 4f       	sbci	r31, 0xFF	; 255
     774:	a5 91       	lpm	r26, Z+
     776:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     778:	9f b7       	in	r25, 0x3f	; 63
	cli();
     77a:	f8 94       	cli

	if (val == LOW) {
     77c:	11 11       	cpse	r17, r1
     77e:	04 c0       	rjmp	.+8      	; 0x788 <digitalWrite+0x4e>
		*out &= ~bit;
     780:	8c 91       	ld	r24, X
     782:	d0 95       	com	r29
     784:	d8 23       	and	r29, r24
     786:	02 c0       	rjmp	.+4      	; 0x78c <digitalWrite+0x52>
	} else {
		*out |= bit;
     788:	ec 91       	ld	r30, X
     78a:	de 2b       	or	r29, r30
     78c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     78e:	9f bf       	out	0x3f, r25	; 63
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	08 95       	ret

00000798 <_ZN17DallasTemperature10setOneWireEP7OneWire>:
	DeviceAddress deviceAddress;
	getAddress(deviceAddress, deviceIndex);

	return requestTemperaturesByAddress(deviceAddress);

}
     798:	fc 01       	movw	r30, r24
     79a:	77 83       	std	Z+7, r23	; 0x07
     79c:	66 83       	std	Z+6, r22	; 0x06
     79e:	14 82       	std	Z+4, r1	; 0x04
     7a0:	15 82       	std	Z+5, r1	; 0x05
     7a2:	10 82       	st	Z, r1
     7a4:	89 e0       	ldi	r24, 0x09	; 9
     7a6:	81 83       	std	Z+1, r24	; 0x01
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	82 83       	std	Z+2, r24	; 0x02
     7ac:	83 83       	std	Z+3, r24	; 0x03
     7ae:	08 95       	ret

000007b0 <_ZN17DallasTemperatureC1EP7OneWire>:
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	ec 01       	movw	r28, r24
     7b6:	0e 94 cc 03 	call	0x798	; 0x798 <_ZN17DallasTemperature10setOneWireEP7OneWire>
     7ba:	1b 8a       	std	Y+19, r1	; 0x13
     7bc:	1a 8a       	std	Y+18, r1	; 0x12
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <_ZN17DallasTemperature14readScratchPadEPKhPh>:
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	8c 01       	movw	r16, r24
     7d2:	eb 01       	movw	r28, r22
     7d4:	7a 01       	movw	r14, r20
     7d6:	fc 01       	movw	r30, r24
     7d8:	86 81       	ldd	r24, Z+6	; 0x06
     7da:	97 81       	ldd	r25, Z+7	; 0x07
     7dc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN7OneWire5resetEv>
     7e0:	88 23       	and	r24, r24
     7e2:	11 f1       	breq	.+68     	; 0x828 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x64>
     7e4:	be 01       	movw	r22, r28
     7e6:	f8 01       	movw	r30, r16
     7e8:	86 81       	ldd	r24, Z+6	; 0x06
     7ea:	97 81       	ldd	r25, Z+7	; 0x07
     7ec:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_ZN7OneWire6selectEPKh>
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	6e eb       	ldi	r22, 0xBE	; 190
     7f4:	f8 01       	movw	r30, r16
     7f6:	86 81       	ldd	r24, Z+6	; 0x06
     7f8:	97 81       	ldd	r25, Z+7	; 0x07
     7fa:	0e 94 86 08 	call	0x110c	; 0x110c <_ZN7OneWire5writeEhh>
     7fe:	e7 01       	movw	r28, r14
     800:	f9 e0       	ldi	r31, 0x09	; 9
     802:	ef 0e       	add	r14, r31
     804:	f1 1c       	adc	r15, r1
     806:	f8 01       	movw	r30, r16
     808:	86 81       	ldd	r24, Z+6	; 0x06
     80a:	97 81       	ldd	r25, Z+7	; 0x07
     80c:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN7OneWire4readEv>
     810:	89 93       	st	Y+, r24
     812:	ce 15       	cp	r28, r14
     814:	df 05       	cpc	r29, r15
     816:	b9 f7       	brne	.-18     	; 0x806 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x42>
     818:	f8 01       	movw	r30, r16
     81a:	86 81       	ldd	r24, Z+6	; 0x06
     81c:	97 81       	ldd	r25, Z+7	; 0x07
     81e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN7OneWire5resetEv>
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	09 f0       	breq	.+2      	; 0x82a <_ZN17DallasTemperature14readScratchPadEPKhPh+0x66>
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	89 2f       	mov	r24, r25
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	08 95       	ret

0000083a <_ZN17DallasTemperature11isConnectedEPKhPh>:
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	ea 01       	movw	r28, r20
     840:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN17DallasTemperature14readScratchPadEPKhPh>
     844:	88 23       	and	r24, r24
     846:	39 f0       	breq	.+14     	; 0x856 <_ZN17DallasTemperature11isConnectedEPKhPh+0x1c>
     848:	68 e0       	ldi	r22, 0x08	; 8
     84a:	ce 01       	movw	r24, r28
     84c:	0e 94 24 09 	call	0x1248	; 0x1248 <_ZN7OneWire4crc8EPKhh>
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	28 85       	ldd	r18, Y+8	; 0x08
     854:	28 13       	cpse	r18, r24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	89 2f       	mov	r24, r25
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <_ZN17DallasTemperature13getResolutionEPKh>:
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	29 97       	sbiw	r28, 0x09	; 9
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	fb 01       	movw	r30, r22
     876:	20 81       	ld	r18, Z
     878:	20 31       	cpi	r18, 0x10	; 16
     87a:	d1 f0       	breq	.+52     	; 0x8b0 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
     87c:	ae 01       	movw	r20, r28
     87e:	4f 5f       	subi	r20, 0xFF	; 255
     880:	5f 4f       	sbci	r21, 0xFF	; 255
     882:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN17DallasTemperature11isConnectedEPKhPh>
     886:	88 23       	and	r24, r24
     888:	89 f0       	breq	.+34     	; 0x8ac <_ZN17DallasTemperature13getResolutionEPKh+0x4c>
     88a:	8d 81       	ldd	r24, Y+5	; 0x05
     88c:	8f 33       	cpi	r24, 0x3F	; 63
     88e:	61 f0       	breq	.+24     	; 0x8a8 <_ZN17DallasTemperature13getResolutionEPKh+0x48>
     890:	20 f4       	brcc	.+8      	; 0x89a <_ZN17DallasTemperature13getResolutionEPKh+0x3a>
     892:	8f 31       	cpi	r24, 0x1F	; 31
     894:	59 f4       	brne	.+22     	; 0x8ac <_ZN17DallasTemperature13getResolutionEPKh+0x4c>
     896:	89 e0       	ldi	r24, 0x09	; 9
     898:	0c c0       	rjmp	.+24     	; 0x8b2 <_ZN17DallasTemperature13getResolutionEPKh+0x52>
     89a:	8f 35       	cpi	r24, 0x5F	; 95
     89c:	19 f0       	breq	.+6      	; 0x8a4 <_ZN17DallasTemperature13getResolutionEPKh+0x44>
     89e:	8f 37       	cpi	r24, 0x7F	; 127
     8a0:	39 f0       	breq	.+14     	; 0x8b0 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <_ZN17DallasTemperature13getResolutionEPKh+0x4c>
     8a4:	8b e0       	ldi	r24, 0x0B	; 11
     8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <_ZN17DallasTemperature13getResolutionEPKh+0x52>
     8a8:	8a e0       	ldi	r24, 0x0A	; 10
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <_ZN17DallasTemperature13getResolutionEPKh+0x52>
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <_ZN17DallasTemperature13getResolutionEPKh+0x52>
     8b0:	8c e0       	ldi	r24, 0x0C	; 12
     8b2:	29 96       	adiw	r28, 0x09	; 9
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <_ZN17DallasTemperature20isConversionCompleteEv>:
     8c4:	fc 01       	movw	r30, r24
     8c6:	86 81       	ldd	r24, Z+6	; 0x06
     8c8:	97 81       	ldd	r25, Z+7	; 0x07
     8ca:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN7OneWire8read_bitEv>
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <_ZN17DallasTemperature20isConversionCompleteEv+0x12>
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	89 2f       	mov	r24, r25
     8d8:	08 95       	ret

000008da <_ZN17DallasTemperature27blockTillConversionCompleteEh>:
     8da:	8f 92       	push	r8
     8dc:	9f 92       	push	r9
     8de:	af 92       	push	r10
     8e0:	bf 92       	push	r11
     8e2:	cf 92       	push	r12
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	ec 01       	movw	r28, r24
     8f4:	69 50       	subi	r22, 0x09	; 9
     8f6:	63 30       	cpi	r22, 0x03	; 3
     8f8:	48 f4       	brcc	.+18     	; 0x90c <__stack+0xd>
     8fa:	e6 2f       	mov	r30, r22
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	ee 0f       	add	r30, r30
     900:	ff 1f       	adc	r31, r31
     902:	e8 5c       	subi	r30, 0xC8	; 200
     904:	fe 4f       	sbci	r31, 0xFE	; 254
     906:	00 81       	ld	r16, Z
     908:	11 81       	ldd	r17, Z+1	; 0x01
     90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0x11>
     90c:	0e ee       	ldi	r16, 0xEE	; 238
     90e:	12 e0       	ldi	r17, 0x02	; 2
     910:	8b 81       	ldd	r24, Y+3	; 0x03
     912:	88 23       	and	r24, r24
     914:	f1 f0       	breq	.+60     	; 0x952 <__stack+0x53>
     916:	88 81       	ld	r24, Y
     918:	81 11       	cpse	r24, r1
     91a:	1b c0       	rjmp	.+54     	; 0x952 <__stack+0x53>
     91c:	0e 94 26 02 	call	0x44c	; 0x44c <millis>
     920:	4b 01       	movw	r8, r22
     922:	5c 01       	movw	r10, r24
     924:	68 01       	movw	r12, r16
     926:	11 0f       	add	r17, r17
     928:	ee 08       	sbc	r14, r14
     92a:	ff 08       	sbc	r15, r15
     92c:	ce 01       	movw	r24, r28
     92e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <_ZN17DallasTemperature20isConversionCompleteEv>
     932:	81 11       	cpse	r24, r1
     934:	20 c0       	rjmp	.+64     	; 0x976 <__stack+0x77>
     936:	0e 94 26 02 	call	0x44c	; 0x44c <millis>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	8c 19       	sub	r24, r12
     940:	9d 09       	sbc	r25, r13
     942:	ae 09       	sbc	r26, r14
     944:	bf 09       	sbc	r27, r15
     946:	88 15       	cp	r24, r8
     948:	99 05       	cpc	r25, r9
     94a:	aa 05       	cpc	r26, r10
     94c:	bb 05       	cpc	r27, r11
     94e:	70 f3       	brcs	.-36     	; 0x92c <__stack+0x2d>
     950:	12 c0       	rjmp	.+36     	; 0x976 <__stack+0x77>
     952:	b8 01       	movw	r22, r16
     954:	11 0f       	add	r17, r17
     956:	88 0b       	sbc	r24, r24
     958:	99 0b       	sbc	r25, r25
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	bf 90       	pop	r11
     96c:	af 90       	pop	r10
     96e:	9f 90       	pop	r9
     970:	8f 90       	pop	r8
     972:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <delay>
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	bf 90       	pop	r11
     988:	af 90       	pop	r10
     98a:	9f 90       	pop	r9
     98c:	8f 90       	pop	r8
     98e:	08 95       	ret

00000990 <_ZN17DallasTemperature28requestTemperaturesByAddressEPKh>:
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	ec 01       	movw	r28, r24
     99e:	7b 01       	movw	r14, r22
     9a0:	0e 94 30 04 	call	0x860	; 0x860 <_ZN17DallasTemperature13getResolutionEPKh>
     9a4:	08 2f       	mov	r16, r24
     9a6:	88 23       	and	r24, r24
     9a8:	b9 f0       	breq	.+46     	; 0x9d8 <_ZN17DallasTemperature28requestTemperaturesByAddressEPKh+0x48>
     9aa:	8e 81       	ldd	r24, Y+6	; 0x06
     9ac:	9f 81       	ldd	r25, Y+7	; 0x07
     9ae:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN7OneWire5resetEv>
     9b2:	b7 01       	movw	r22, r14
     9b4:	8e 81       	ldd	r24, Y+6	; 0x06
     9b6:	9f 81       	ldd	r25, Y+7	; 0x07
     9b8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_ZN7OneWire6selectEPKh>
     9bc:	48 81       	ld	r20, Y
     9be:	64 e4       	ldi	r22, 0x44	; 68
     9c0:	8e 81       	ldd	r24, Y+6	; 0x06
     9c2:	9f 81       	ldd	r25, Y+7	; 0x07
     9c4:	0e 94 86 08 	call	0x110c	; 0x110c <_ZN7OneWire5writeEhh>
     9c8:	1a 81       	ldd	r17, Y+2	; 0x02
     9ca:	11 23       	and	r17, r17
     9cc:	39 f0       	breq	.+14     	; 0x9dc <_ZN17DallasTemperature28requestTemperaturesByAddressEPKh+0x4c>
     9ce:	60 2f       	mov	r22, r16
     9d0:	ce 01       	movw	r24, r28
     9d2:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN17DallasTemperature27blockTillConversionCompleteEh>
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <_ZN17DallasTemperature28requestTemperaturesByAddressEPKh+0x4e>
     9d8:	10 e0       	ldi	r17, 0x00	; 0
     9da:	01 c0       	rjmp	.+2      	; 0x9de <_ZN17DallasTemperature28requestTemperaturesByAddressEPKh+0x4e>
     9dc:	11 e0       	ldi	r17, 0x01	; 1
     9de:	81 2f       	mov	r24, r17
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	08 95       	ret

000009ee <_ZN17DallasTemperature20calculateTemperatureEPKhPh>:

}

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DallasTemperature::calculateTemperature(const uint8_t* deviceAddress,
		uint8_t* scratchPad) {
     9ee:	fa 01       	movw	r30, r20

	int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11)
			| (((int16_t) scratchPad[TEMP_LSB]) << 3);
     9f0:	21 81       	ldd	r18, Z+1	; 0x01
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	c9 01       	movw	r24, r18
     9f6:	98 2f       	mov	r25, r24
     9f8:	88 27       	eor	r24, r24
     9fa:	99 0f       	add	r25, r25
     9fc:	99 0f       	add	r25, r25
     9fe:	99 0f       	add	r25, r25
     a00:	20 81       	ld	r18, Z
     a02:	48 e0       	ldi	r20, 0x08	; 8
     a04:	24 9f       	mul	r18, r20
     a06:	90 01       	movw	r18, r0
     a08:	11 24       	eor	r1, r1
     a0a:	28 2b       	or	r18, r24
     a0c:	39 2b       	or	r19, r25
	 value for a DS18S20, and James Cameron added legacy DS1820 support.

	 See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
	 */

	if (deviceAddress[0] == DS18S20MODEL) {
     a0e:	db 01       	movw	r26, r22
     a10:	8c 91       	ld	r24, X
     a12:	80 31       	cpi	r24, 0x10	; 16
     a14:	c1 f4       	brne	.+48     	; 0xa46 <_ZN17DallasTemperature20calculateTemperatureEPKhPh+0x58>
		fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16
				+ (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7)
     a16:	67 81       	ldd	r22, Z+7	; 0x07
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	86 81       	ldd	r24, Z+6	; 0x06
     a1c:	ab 01       	movw	r20, r22
     a1e:	48 1b       	sub	r20, r24
     a20:	51 09       	sbc	r21, r1
     a22:	ca 01       	movw	r24, r20
     a24:	96 95       	lsr	r25
     a26:	98 2f       	mov	r25, r24
     a28:	88 27       	eor	r24, r24
     a2a:	97 95       	ror	r25
     a2c:	87 95       	ror	r24
     a2e:	0e 94 ed 13 	call	0x27da	; 0x27da <__divmodhi4>
     a32:	60 51       	subi	r22, 0x10	; 16
     a34:	71 09       	sbc	r23, r1
     a36:	20 7f       	andi	r18, 0xF0	; 240
     a38:	53 e0       	ldi	r21, 0x03	; 3
     a3a:	22 0f       	add	r18, r18
     a3c:	33 1f       	adc	r19, r19
     a3e:	5a 95       	dec	r21
     a40:	e1 f7       	brne	.-8      	; 0xa3a <_ZN17DallasTemperature20calculateTemperatureEPKhPh+0x4c>
     a42:	26 0f       	add	r18, r22
     a44:	37 1f       	adc	r19, r23
						/ scratchPad[COUNT_PER_C]);
	}

	return fpTemperature;
}
     a46:	c9 01       	movw	r24, r18
     a48:	08 95       	ret

00000a4a <_ZN17DallasTemperature7getTempEPKh>:
// returns temperature in 1/128 degrees C or DEVICE_DISCONNECTED_RAW if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_RAW is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
int16_t DallasTemperature::getTemp(const uint8_t* deviceAddress) {
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	29 97       	sbiw	r28, 0x09	; 9
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	8c 01       	movw	r16, r24
     a68:	7b 01       	movw	r14, r22

	ScratchPad scratchPad;
	if (isConnected(deviceAddress, scratchPad))
     a6a:	ae 01       	movw	r20, r28
     a6c:	4f 5f       	subi	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN17DallasTemperature11isConnectedEPKhPh>
     a74:	88 23       	and	r24, r24
     a76:	41 f0       	breq	.+16     	; 0xa88 <_ZN17DallasTemperature7getTempEPKh+0x3e>
		return calculateTemperature(deviceAddress, scratchPad);
     a78:	ae 01       	movw	r20, r28
     a7a:	4f 5f       	subi	r20, 0xFF	; 255
     a7c:	5f 4f       	sbci	r21, 0xFF	; 255
     a7e:	b7 01       	movw	r22, r14
     a80:	c8 01       	movw	r24, r16
     a82:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN17DallasTemperature20calculateTemperatureEPKhPh>
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <_ZN17DallasTemperature7getTempEPKh+0x42>
	return DEVICE_DISCONNECTED_RAW;
     a88:	80 e8       	ldi	r24, 0x80	; 128
     a8a:	94 ee       	ldi	r25, 0xE4	; 228

}
     a8c:	29 96       	adiw	r28, 0x09	; 9
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	08 95       	ret

00000aa6 <_ZN17DallasTemperature8getTempCEPKh>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(const uint8_t* deviceAddress) {
	return rawToCelsius(getTemp(deviceAddress));
     aa6:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN17DallasTemperature7getTempEPKh>
}

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw) {

	if (raw <= DEVICE_DISCONNECTED_RAW)
     aaa:	81 38       	cpi	r24, 0x81	; 129
     aac:	24 ee       	ldi	r18, 0xE4	; 228
     aae:	92 07       	cpc	r25, r18
     ab0:	6c f0       	brlt	.+26     	; 0xacc <_ZN17DallasTemperature8getTempCEPKh+0x26>
		return DEVICE_DISCONNECTED_C;
	// C = RAW/128
	return (float) raw * 0.0078125;
     ab2:	bc 01       	movw	r22, r24
     ab4:	99 0f       	add	r25, r25
     ab6:	88 0b       	sbc	r24, r24
     ab8:	99 0b       	sbc	r25, r25
     aba:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__floatsisf>
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	5c e3       	ldi	r21, 0x3C	; 60
     ac6:	0e 94 80 13 	call	0x2700	; 0x2700 <__mulsf3>
     aca:	08 95       	ret

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw) {

	if (raw <= DEVICE_DISCONNECTED_RAW)
		return DEVICE_DISCONNECTED_C;
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	8e ef       	ldi	r24, 0xFE	; 254
     ad2:	92 ec       	ldi	r25, 0xC2	; 194
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(const uint8_t* deviceAddress) {
	return rawToCelsius(getTemp(deviceAddress));
}
     ad4:	08 95       	ret

00000ad6 <_ZN13arduinoSigfox9generatorEhiPKcz>:
    {
        return SIGFOX_ANSWER_ERROR;     
    }
        
    return SIGFOX_ANSWER_OK;    
}
     ad6:	8f 92       	push	r8
     ad8:	9f 92       	push	r9
     ada:	af 92       	push	r10
     adc:	bf 92       	push	r11
     ade:	cf 92       	push	r12
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	89 89       	ldd	r24, Y+17	; 0x11
     af4:	aa 88       	ldd	r10, Y+18	; 0x12
     af6:	bb 88       	ldd	r11, Y+19	; 0x13
     af8:	ec 88       	ldd	r14, Y+20	; 0x14
     afa:	fd 88       	ldd	r15, Y+21	; 0x15
     afc:	0f 85       	ldd	r16, Y+15	; 0x0f
     afe:	18 89       	ldd	r17, Y+16	; 0x10
     b00:	00 56       	subi	r16, 0x60	; 96
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
     b04:	94 e6       	ldi	r25, 0x64	; 100
     b06:	f8 01       	movw	r30, r16
     b08:	11 92       	st	Z+, r1
     b0a:	9a 95       	dec	r25
     b0c:	e9 f7       	brne	.-6      	; 0xb08 <_ZN13arduinoSigfox9generatorEhiPKcz+0x32>
     b0e:	1a 14       	cp	r1, r10
     b10:	1b 04       	cpc	r1, r11
     b12:	ec f4       	brge	.+58     	; 0xb4e <_ZN13arduinoSigfox9generatorEhiPKcz+0x78>
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	21 f0       	breq	.+8      	; 0xb20 <_ZN13arduinoSigfox9generatorEhiPKcz+0x4a>
     b18:	83 30       	cpi	r24, 0x03	; 3
     b1a:	09 f4       	brne	.+2      	; 0xb1e <_ZN13arduinoSigfox9generatorEhiPKcz+0x48>
     b1c:	4b c0       	rjmp	.+150    	; 0xbb4 <_ZN13arduinoSigfox9generatorEhiPKcz+0xde>
     b1e:	a0 c0       	rjmp	.+320    	; 0xc60 <_ZN13arduinoSigfox9generatorEhiPKcz+0x18a>
     b20:	6e e3       	ldi	r22, 0x3E	; 62
     b22:	71 e0       	ldi	r23, 0x01	; 1
     b24:	c8 01       	movw	r24, r16
     b26:	0e 94 67 15 	call	0x2ace	; 0x2ace <strcat>
     b2a:	f7 01       	movw	r30, r14
     b2c:	01 90       	ld	r0, Z+
     b2e:	00 20       	and	r0, r0
     b30:	e9 f7       	brne	.-6      	; 0xb2c <_ZN13arduinoSigfox9generatorEhiPKcz+0x56>
     b32:	31 97       	sbiw	r30, 0x01	; 1
     b34:	af 01       	movw	r20, r30
     b36:	4e 19       	sub	r20, r14
     b38:	5f 09       	sbc	r21, r15
     b3a:	b7 01       	movw	r22, r14
     b3c:	c8 01       	movw	r24, r16
     b3e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <strncat>
     b42:	6a e1       	ldi	r22, 0x1A	; 26
     b44:	72 e0       	ldi	r23, 0x02	; 2
     b46:	c8 01       	movw	r24, r16
     b48:	0e 94 67 15 	call	0x2ace	; 0x2ace <strcat>
     b4c:	5e c0       	rjmp	.+188    	; 0xc0a <_ZN13arduinoSigfox9generatorEhiPKcz+0x134>
     b4e:	a1 14       	cp	r10, r1
     b50:	b1 04       	cpc	r11, r1
     b52:	09 f0       	breq	.+2      	; 0xb56 <_ZN13arduinoSigfox9generatorEhiPKcz+0x80>
     b54:	41 c0       	rjmp	.+130    	; 0xbd8 <_ZN13arduinoSigfox9generatorEhiPKcz+0x102>
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	b1 f0       	breq	.+44     	; 0xb86 <_ZN13arduinoSigfox9generatorEhiPKcz+0xb0>
     b5a:	83 30       	cpi	r24, 0x03	; 3
     b5c:	59 f1       	breq	.+86     	; 0xbb4 <_ZN13arduinoSigfox9generatorEhiPKcz+0xde>
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	d9 f5       	brne	.+118    	; 0xbd8 <_ZN13arduinoSigfox9generatorEhiPKcz+0x102>
     b62:	6e e3       	ldi	r22, 0x3E	; 62
     b64:	71 e0       	ldi	r23, 0x01	; 1
     b66:	c8 01       	movw	r24, r16
     b68:	0e 94 67 15 	call	0x2ace	; 0x2ace <strcat>
     b6c:	f7 01       	movw	r30, r14
     b6e:	01 90       	ld	r0, Z+
     b70:	00 20       	and	r0, r0
     b72:	e9 f7       	brne	.-6      	; 0xb6e <_ZN13arduinoSigfox9generatorEhiPKcz+0x98>
     b74:	31 97       	sbiw	r30, 0x01	; 1
     b76:	af 01       	movw	r20, r30
     b78:	4e 19       	sub	r20, r14
     b7a:	5f 09       	sbc	r21, r15
     b7c:	b7 01       	movw	r22, r14
     b7e:	c8 01       	movw	r24, r16
     b80:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <strncat>
     b84:	42 c0       	rjmp	.+132    	; 0xc0a <_ZN13arduinoSigfox9generatorEhiPKcz+0x134>
     b86:	6e e3       	ldi	r22, 0x3E	; 62
     b88:	71 e0       	ldi	r23, 0x01	; 1
     b8a:	c8 01       	movw	r24, r16
     b8c:	0e 94 67 15 	call	0x2ace	; 0x2ace <strcat>
     b90:	f7 01       	movw	r30, r14
     b92:	01 90       	ld	r0, Z+
     b94:	00 20       	and	r0, r0
     b96:	e9 f7       	brne	.-6      	; 0xb92 <_ZN13arduinoSigfox9generatorEhiPKcz+0xbc>
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	af 01       	movw	r20, r30
     b9c:	4e 19       	sub	r20, r14
     b9e:	5f 09       	sbc	r21, r15
     ba0:	b7 01       	movw	r22, r14
     ba2:	c8 01       	movw	r24, r16
     ba4:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <strncat>
     ba8:	66 e4       	ldi	r22, 0x46	; 70
     baa:	71 e0       	ldi	r23, 0x01	; 1
     bac:	c8 01       	movw	r24, r16
     bae:	0e 94 67 15 	call	0x2ace	; 0x2ace <strcat>
     bb2:	25 c0       	rjmp	.+74     	; 0xbfe <_ZN13arduinoSigfox9generatorEhiPKcz+0x128>
     bb4:	62 e4       	ldi	r22, 0x42	; 66
     bb6:	71 e0       	ldi	r23, 0x01	; 1
     bb8:	c8 01       	movw	r24, r16
     bba:	0e 94 67 15 	call	0x2ace	; 0x2ace <strcat>
     bbe:	f7 01       	movw	r30, r14
     bc0:	01 90       	ld	r0, Z+
     bc2:	00 20       	and	r0, r0
     bc4:	e9 f7       	brne	.-6      	; 0xbc0 <_ZN13arduinoSigfox9generatorEhiPKcz+0xea>
     bc6:	31 97       	sbiw	r30, 0x01	; 1
     bc8:	af 01       	movw	r20, r30
     bca:	4e 19       	sub	r20, r14
     bcc:	5f 09       	sbc	r21, r15
     bce:	b7 01       	movw	r22, r14
     bd0:	c8 01       	movw	r24, r16
     bd2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <strncat>
     bd6:	13 c0       	rjmp	.+38     	; 0xbfe <_ZN13arduinoSigfox9generatorEhiPKcz+0x128>
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	89 f4       	brne	.+34     	; 0xbfe <_ZN13arduinoSigfox9generatorEhiPKcz+0x128>
     bdc:	16 c0       	rjmp	.+44     	; 0xc0a <_ZN13arduinoSigfox9generatorEhiPKcz+0x134>
     bde:	4f 01       	movw	r8, r30
     be0:	82 e0       	ldi	r24, 0x02	; 2
     be2:	88 0e       	add	r8, r24
     be4:	91 1c       	adc	r9, r1
     be6:	c0 80       	ld	r12, Z
     be8:	d1 80       	ldd	r13, Z+1	; 0x01
     bea:	c1 14       	cp	r12, r1
     bec:	d1 04       	cpc	r13, r1
     bee:	91 f4       	brne	.+36     	; 0xc14 <_ZN13arduinoSigfox9generatorEhiPKcz+0x13e>
     bf0:	ff ef       	ldi	r31, 0xFF	; 255
     bf2:	ef 1a       	sub	r14, r31
     bf4:	ff 0a       	sbc	r15, r31
     bf6:	f4 01       	movw	r30, r8
     bf8:	ea 14       	cp	r14, r10
     bfa:	fb 04       	cpc	r15, r11
     bfc:	84 f3       	brlt	.-32     	; 0xbde <_ZN13arduinoSigfox9generatorEhiPKcz+0x108>
     bfe:	66 e4       	ldi	r22, 0x46	; 70
     c00:	72 e0       	ldi	r23, 0x02	; 2
     c02:	c8 01       	movw	r24, r16
     c04:	0e 94 67 15 	call	0x2ace	; 0x2ace <strcat>
     c08:	2b c0       	rjmp	.+86     	; 0xc60 <_ZN13arduinoSigfox9generatorEhiPKcz+0x18a>
     c0a:	fe 01       	movw	r30, r28
     c0c:	76 96       	adiw	r30, 0x16	; 22
     c0e:	e1 2c       	mov	r14, r1
     c10:	f1 2c       	mov	r15, r1
     c12:	f2 cf       	rjmp	.-28     	; 0xbf8 <_ZN13arduinoSigfox9generatorEhiPKcz+0x122>
     c14:	e1 14       	cp	r14, r1
     c16:	f1 04       	cpc	r15, r1
     c18:	29 f0       	breq	.+10     	; 0xc24 <_ZN13arduinoSigfox9generatorEhiPKcz+0x14e>
     c1a:	68 e4       	ldi	r22, 0x48	; 72
     c1c:	71 e0       	ldi	r23, 0x01	; 1
     c1e:	c8 01       	movw	r24, r16
     c20:	0e 94 67 15 	call	0x2ace	; 0x2ace <strcat>
     c24:	f6 01       	movw	r30, r12
     c26:	01 90       	ld	r0, Z+
     c28:	00 20       	and	r0, r0
     c2a:	e9 f7       	brne	.-6      	; 0xc26 <_ZN13arduinoSigfox9generatorEhiPKcz+0x150>
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	af 01       	movw	r20, r30
     c30:	4c 19       	sub	r20, r12
     c32:	5d 09       	sbc	r21, r13
     c34:	f8 01       	movw	r30, r16
     c36:	01 90       	ld	r0, Z+
     c38:	00 20       	and	r0, r0
     c3a:	e9 f7       	brne	.-6      	; 0xc36 <_ZN13arduinoSigfox9generatorEhiPKcz+0x160>
     c3c:	ca 01       	movw	r24, r20
     c3e:	80 1b       	sub	r24, r16
     c40:	91 0b       	sbc	r25, r17
     c42:	8e 0f       	add	r24, r30
     c44:	9f 1f       	adc	r25, r31
     c46:	83 36       	cpi	r24, 0x63	; 99
     c48:	91 05       	cpc	r25, r1
     c4a:	28 f4       	brcc	.+10     	; 0xc56 <_ZN13arduinoSigfox9generatorEhiPKcz+0x180>
     c4c:	b6 01       	movw	r22, r12
     c4e:	c8 01       	movw	r24, r16
     c50:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <strncat>
     c54:	cd cf       	rjmp	.-102    	; 0xbf0 <_ZN13arduinoSigfox9generatorEhiPKcz+0x11a>
     c56:	84 e6       	ldi	r24, 0x64	; 100
     c58:	f8 01       	movw	r30, r16
     c5a:	11 92       	st	Z+, r1
     c5c:	8a 95       	dec	r24
     c5e:	e9 f7       	brne	.-6      	; 0xc5a <_ZN13arduinoSigfox9generatorEhiPKcz+0x184>
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	bf 90       	pop	r11
     c72:	af 90       	pop	r10
     c74:	9f 90       	pop	r9
     c76:	8f 90       	pop	r8
     c78:	08 95       	ret

00000c7a <_ZN13arduinoSigfox15parseUint8ValueEv>:
     c7a:	6a e4       	ldi	r22, 0x4A	; 74
     c7c:	71 e0       	ldi	r23, 0x01	; 1
     c7e:	0e 96       	adiw	r24, 0x0e	; 14
     c80:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <strtok>
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	41 f0       	breq	.+16     	; 0xc98 <_ZN13arduinoSigfox15parseUint8ValueEv+0x1e>
     c88:	4a e0       	ldi	r20, 0x0A	; 10
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	0e 94 57 14 	call	0x28ae	; 0x28ae <strtoul>
     c94:	86 2f       	mov	r24, r22
     c96:	08 95       	ret
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	08 95       	ret

00000c9c <_ZN13arduinoSigfox3OFFEh>:
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ec 01       	movw	r28, r24
     ca2:	61 11       	cpse	r22, r1
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <_ZN13arduinoSigfox3OFFEh+0x16>
     ca6:	18 82       	st	Y, r1
     ca8:	85 e6       	ldi	r24, 0x65	; 101
     caa:	94 e0       	ldi	r25, 0x04	; 4
     cac:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN12arduinoUtils13setOFFSocket0Ev>
     cb0:	07 c0       	rjmp	.+14     	; 0xcc0 <_ZN13arduinoSigfox3OFFEh+0x24>
     cb2:	61 30       	cpi	r22, 0x01	; 1
     cb4:	29 f4       	brne	.+10     	; 0xcc0 <_ZN13arduinoSigfox3OFFEh+0x24>
     cb6:	18 82       	st	Y, r1
     cb8:	85 e6       	ldi	r24, 0x65	; 101
     cba:	94 e0       	ldi	r25, 0x04	; 4
     cbc:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN12arduinoUtils13setOFFSocket1Ev>
     cc0:	ce 01       	movw	r24, r28
     cc2:	0e 94 84 09 	call	0x1308	; 0x1308 <_ZN11arduinoUART9closeUARTEv>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	08 95       	ret

00000cce <_ZN13arduinoSigfox4sendEPc>:
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	fb 01       	movw	r30, r22
     cdc:	01 90       	ld	r0, Z+
     cde:	00 20       	and	r0, r0
     ce0:	e9 f7       	brne	.-6      	; 0xcdc <_ZN13arduinoSigfox4sendEPc+0xe>
     ce2:	31 97       	sbiw	r30, 0x01	; 1
     ce4:	e6 1b       	sub	r30, r22
     ce6:	f7 0b       	sbc	r31, r23
     ce8:	79 97       	sbiw	r30, 0x19	; 25
     cea:	68 f5       	brcc	.+90     	; 0xd46 <_ZN13arduinoSigfox4sendEPc+0x78>
     cec:	ec 01       	movw	r28, r24
     cee:	7f 93       	push	r23
     cf0:	6f 93       	push	r22
     cf2:	80 e8       	ldi	r24, 0x80	; 128
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	9f 93       	push	r25
     cf8:	8f 93       	push	r24
     cfa:	1f 92       	push	r1
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	8f 93       	push	r24
     d00:	8f 93       	push	r24
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN13arduinoSigfox9generatorEhiPKcz>
     d0a:	be 01       	movw	r22, r28
     d0c:	60 56       	subi	r22, 0x60	; 96
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	18 e9       	ldi	r17, 0x98	; 152
     d12:	e1 2e       	mov	r14, r17
     d14:	1a e3       	ldi	r17, 0x3A	; 58
     d16:	f1 2e       	mov	r15, r17
     d18:	00 e0       	ldi	r16, 0x00	; 0
     d1a:	10 e0       	ldi	r17, 0x00	; 0
     d1c:	2e e4       	ldi	r18, 0x4E	; 78
     d1e:	31 e0       	ldi	r19, 0x01	; 1
     d20:	46 e6       	ldi	r20, 0x66	; 102
     d22:	51 e0       	ldi	r21, 0x01	; 1
     d24:	ce 01       	movw	r24, r28
     d26:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_ZN11arduinoUART11sendCommandEPcS0_S0_m>
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	2d b7       	in	r18, 0x3d	; 61
     d2e:	3e b7       	in	r19, 0x3e	; 62
     d30:	27 5f       	subi	r18, 0xF7	; 247
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	3e bf       	out	0x3e, r19	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	2d bf       	out	0x3d, r18	; 61
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	19 f4       	brne	.+6      	; 0xd48 <_ZN13arduinoSigfox4sendEPc+0x7a>
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <_ZN13arduinoSigfox4sendEPc+0x7a>
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	89 2f       	mov	r24, r25
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	08 95       	ret

00000d58 <_ZN13arduinoSigfox4sendEPhj>:
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	6e 97       	sbiw	r28, 0x1e	; 30
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	8c 01       	movw	r16, r24
     d72:	4d 30       	cpi	r20, 0x0D	; 13
     d74:	51 05       	cpc	r21, r1
     d76:	10 f0       	brcs	.+4      	; 0xd7c <_ZN13arduinoSigfox4sendEPhj+0x24>
     d78:	4c e0       	ldi	r20, 0x0C	; 12
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	24 2f       	mov	r18, r20
     d7e:	ae 01       	movw	r20, r28
     d80:	4f 5f       	subi	r20, 0xFF	; 255
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	85 e6       	ldi	r24, 0x65	; 101
     d86:	94 e0       	ldi	r25, 0x04	; 4
     d88:	0e 94 96 0b 	call	0x172c	; 0x172c <_ZN12arduinoUtils7hex2strEPhPch>
     d8c:	be 01       	movw	r22, r28
     d8e:	6f 5f       	subi	r22, 0xFF	; 255
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	c8 01       	movw	r24, r16
     d94:	0e 94 67 06 	call	0xcce	; 0xcce <_ZN13arduinoSigfox4sendEPc>
     d98:	6e 96       	adiw	r28, 0x1e	; 30
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	08 95       	ret

00000dae <_ZN13arduinoSigfox9getRegionEv>:
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	ec 01       	movw	r28, r24
     dbc:	18 ee       	ldi	r17, 0xE8	; 232
     dbe:	e1 2e       	mov	r14, r17
     dc0:	13 e0       	ldi	r17, 0x03	; 3
     dc2:	f1 2e       	mov	r15, r17
     dc4:	00 e0       	ldi	r16, 0x00	; 0
     dc6:	10 e0       	ldi	r17, 0x00	; 0
     dc8:	2e e4       	ldi	r18, 0x4E	; 78
     dca:	31 e0       	ldi	r19, 0x01	; 1
     dcc:	44 e5       	ldi	r20, 0x54	; 84
     dce:	51 e0       	ldi	r21, 0x01	; 1
     dd0:	68 e4       	ldi	r22, 0x48	; 72
     dd2:	72 e0       	ldi	r23, 0x02	; 2
     dd4:	ce 01       	movw	r24, r28
     dd6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_ZN11arduinoUART11sendCommandEPcS0_S0_m>
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	11 f0       	breq	.+4      	; 0xde2 <_ZN13arduinoSigfox9getRegionEv+0x34>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	18 c0       	rjmp	.+48     	; 0xe12 <_ZN13arduinoSigfox9getRegionEv+0x64>
     de2:	08 ee       	ldi	r16, 0xE8	; 232
     de4:	13 e0       	ldi	r17, 0x03	; 3
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	4e e4       	ldi	r20, 0x4E	; 78
     dec:	51 e0       	ldi	r21, 0x01	; 1
     dee:	66 e6       	ldi	r22, 0x66	; 102
     df0:	71 e0       	ldi	r23, 0x01	; 1
     df2:	ce 01       	movw	r24, r28
     df4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN11arduinoUART7waitForEPcS0_m>
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	41 f4       	brne	.+16     	; 0xe0c <_ZN13arduinoSigfox9getRegionEv+0x5e>
     dfc:	ce 01       	movw	r24, r28
     dfe:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_ZN13arduinoSigfox15parseUint8ValueEv>
     e02:	c3 5b       	subi	r28, 0xB3	; 179
     e04:	de 4f       	sbci	r29, 0xFE	; 254
     e06:	88 83       	st	Y, r24
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <_ZN13arduinoSigfox9getRegionEv+0x64>
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	39 f3       	breq	.-50     	; 0xdde <_ZN13arduinoSigfox9getRegionEv+0x30>
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	08 95       	ret

00000e20 <_ZN13arduinoSigfox5checkEv>:
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
     e2e:	18 e8       	ldi	r17, 0x88	; 136
     e30:	e1 2e       	mov	r14, r17
     e32:	13 e1       	ldi	r17, 0x13	; 19
     e34:	f1 2e       	mov	r15, r17
     e36:	00 e0       	ldi	r16, 0x00	; 0
     e38:	10 e0       	ldi	r17, 0x00	; 0
     e3a:	2e e4       	ldi	r18, 0x4E	; 78
     e3c:	31 e0       	ldi	r19, 0x01	; 1
     e3e:	46 e6       	ldi	r20, 0x66	; 102
     e40:	51 e0       	ldi	r21, 0x01	; 1
     e42:	61 e5       	ldi	r22, 0x51	; 81
     e44:	72 e0       	ldi	r23, 0x02	; 2
     e46:	ce 01       	movw	r24, r28
     e48:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_ZN11arduinoUART11sendCommandEPcS0_S0_m>
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	29 f4       	brne	.+10     	; 0xe5a <_ZN13arduinoSigfox5checkEv+0x3a>
     e50:	ce 01       	movw	r24, r28
     e52:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN13arduinoSigfox9getRegionEv>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <_ZN13arduinoSigfox5checkEv+0x44>
     e5a:	82 30       	cpi	r24, 0x02	; 2
     e5c:	11 f0       	breq	.+4      	; 0xe62 <_ZN13arduinoSigfox5checkEv+0x42>
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <_ZN13arduinoSigfox5checkEv+0x44>
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	08 95       	ret

00000e72 <_ZN13arduinoSigfox2ONEh>:
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	ec 01       	movw	r28, r24
     e78:	80 e8       	ldi	r24, 0x80	; 128
     e7a:	95 e2       	ldi	r25, 0x25	; 37
     e7c:	a0 e0       	ldi	r26, 0x00	; 0
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	ab 83       	std	Y+3, r26	; 0x03
     e86:	bc 83       	std	Y+4, r27	; 0x04
     e88:	61 11       	cpse	r22, r1
     e8a:	0a c0       	rjmp	.+20     	; 0xea0 <_ZN13arduinoSigfox2ONEh+0x2e>
     e8c:	18 82       	st	Y, r1
     e8e:	85 e6       	ldi	r24, 0x65	; 101
     e90:	94 e0       	ldi	r25, 0x04	; 4
     e92:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN12arduinoUtils12setONSocket0Ev>
     e96:	85 e6       	ldi	r24, 0x65	; 101
     e98:	94 e0       	ldi	r25, 0x04	; 4
     e9a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN12arduinoUtils13setMUXSocket0Ev>
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <_ZN13arduinoSigfox2ONEh+0x48>
     ea0:	61 30       	cpi	r22, 0x01	; 1
     ea2:	11 f0       	breq	.+4      	; 0xea8 <_ZN13arduinoSigfox2ONEh+0x36>
     ea4:	68 83       	st	Y, r22
     ea6:	09 c0       	rjmp	.+18     	; 0xeba <_ZN13arduinoSigfox2ONEh+0x48>
     ea8:	18 82       	st	Y, r1
     eaa:	85 e6       	ldi	r24, 0x65	; 101
     eac:	94 e0       	ldi	r25, 0x04	; 4
     eae:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_ZN12arduinoUtils12setONSocket1Ev>
     eb2:	85 e6       	ldi	r24, 0x65	; 101
     eb4:	94 e0       	ldi	r25, 0x04	; 4
     eb6:	0e 94 95 0c 	call	0x192a	; 0x192a <_ZN12arduinoUtils13setMUXSocket1Ev>
     eba:	ce 01       	movw	r24, r28
     ebc:	0e 94 75 09 	call	0x12ea	; 0x12ea <_ZN11arduinoUART9beginUARTEv>
     ec0:	68 e8       	ldi	r22, 0x88	; 136
     ec2:	73 e1       	ldi	r23, 0x13	; 19
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 57 02 	call	0x4ae	; 0x4ae <delay>
     ecc:	ce 01       	movw	r24, r28
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	0c 94 10 07 	jmp	0xe20	; 0xe20 <_ZN13arduinoSigfox5checkEv>

00000ed6 <_GLOBAL__sub_I__ZN13arduinoSigfox9generatorEhiPKcz>:

public:

    arduinoUART()
    {       
        _baudrate   = DEF_BAUD_RATE;
     ed6:	e1 e0       	ldi	r30, 0x01	; 1
     ed8:	f3 e0       	ldi	r31, 0x03	; 3
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	92 ec       	ldi	r25, 0xC2	; 194
     ede:	a1 e0       	ldi	r26, 0x01	; 1
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	81 83       	std	Z+1, r24	; 0x01
     ee4:	92 83       	std	Z+2, r25	; 0x02
     ee6:	a3 83       	std	Z+3, r26	; 0x03
     ee8:	b4 83       	std	Z+4, r27	; 0x04
        _def_timeout= DEF_COMMAND_TIMEOUT;
     eea:	88 e8       	ldi	r24, 0x88	; 136
     eec:	93 e1       	ldi	r25, 0x13	; 19
     eee:	a0 e0       	ldi	r26, 0x00	; 0
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	85 83       	std	Z+5, r24	; 0x05
     ef4:	96 83       	std	Z+6, r25	; 0x06
     ef6:	a7 83       	std	Z+7, r26	; 0x07
     ef8:	b0 87       	std	Z+8, r27	; 0x08
        _def_delay  = DEF_COMMAND_DELAY;
     efa:	84 e6       	ldi	r24, 0x64	; 100
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	a0 e0       	ldi	r26, 0x00	; 0
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	81 87       	std	Z+9, r24	; 0x09
     f04:	92 87       	std	Z+10, r25	; 0x0a
     f06:	a3 87       	std	Z+11, r26	; 0x0b
     f08:	b4 87       	std	Z+12, r27	; 0x0c
        _flush_mode = true;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	85 87       	std	Z+13, r24	; 0x0d
     f0e:	08 95       	ret

00000f10 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>:
		if (clockSource & CS22) TCCR2B |= (1 << CS22);
		if (clockSource & CS21) TCCR2B |= (1 << CS21);
		if (clockSource & CS20) TCCR2B |= (1 << CS20);	
	}
	#endif
}
     f10:	41 11       	cpse	r20, r1
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0xe>
     f14:	ea e7       	ldi	r30, 0x7A	; 122
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8f 77       	andi	r24, 0x7F	; 127
     f1c:	80 83       	st	Z, r24
     f1e:	6a 30       	cpi	r22, 0x0A	; 10
     f20:	a9 f0       	breq	.+42     	; 0xf4c <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x3c>
     f22:	63 fd       	sbrc	r22, 3
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1a>
     f26:	88 e0       	ldi	r24, 0x08	; 8
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1c>
     f2a:	88 e2       	ldi	r24, 0x28	; 40
     f2c:	67 70       	andi	r22, 0x07	; 7
     f2e:	68 2b       	or	r22, r24
     f30:	88 e1       	ldi	r24, 0x18	; 24
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	a8 95       	wdr
     f38:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f42:	e0 e6       	ldi	r30, 0x60	; 96
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 64       	ori	r24, 0x40	; 64
     f4a:	80 83       	st	Z, r24
     f4c:	21 11       	cpse	r18, r1
     f4e:	14 c0       	rjmp	.+40     	; 0xf78 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x68>
     f50:	83 b7       	in	r24, 0x33	; 51
     f52:	81 7f       	andi	r24, 0xF1	; 241
     f54:	84 60       	ori	r24, 0x04	; 4
     f56:	83 bf       	out	0x33, r24	; 51
     f58:	f8 94       	cli
     f5a:	83 b7       	in	r24, 0x33	; 51
     f5c:	81 60       	ori	r24, 0x01	; 1
     f5e:	83 bf       	out	0x33, r24	; 51
     f60:	85 b7       	in	r24, 0x35	; 53
     f62:	80 66       	ori	r24, 0x60	; 96
     f64:	85 bf       	out	0x35, r24	; 53
     f66:	8f 7d       	andi	r24, 0xDF	; 223
     f68:	85 bf       	out	0x35, r24	; 53
     f6a:	78 94       	sei
     f6c:	88 95       	sleep
     f6e:	83 b7       	in	r24, 0x33	; 51
     f70:	8e 7f       	andi	r24, 0xFE	; 254
     f72:	83 bf       	out	0x33, r24	; 51
     f74:	78 94       	sei
     f76:	0e c0       	rjmp	.+28     	; 0xf94 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x84>
     f78:	83 b7       	in	r24, 0x33	; 51
     f7a:	81 7f       	andi	r24, 0xF1	; 241
     f7c:	84 60       	ori	r24, 0x04	; 4
     f7e:	83 bf       	out	0x33, r24	; 51
     f80:	f8 94       	cli
     f82:	83 b7       	in	r24, 0x33	; 51
     f84:	81 60       	ori	r24, 0x01	; 1
     f86:	83 bf       	out	0x33, r24	; 51
     f88:	78 94       	sei
     f8a:	88 95       	sleep
     f8c:	83 b7       	in	r24, 0x33	; 51
     f8e:	8e 7f       	andi	r24, 0xFE	; 254
     f90:	83 bf       	out	0x33, r24	; 51
     f92:	78 94       	sei
     f94:	41 11       	cpse	r20, r1
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x92>
     f98:	ea e7       	ldi	r30, 0x7A	; 122
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	80 83       	st	Z, r24
     fa2:	08 95       	ret

00000fa4 <__vector_6>:
*		       required to allow automatic WDIF and WDIE bit clearance in 
*			   hardware.
*
*******************************************************************************/
ISR (WDT_vect)
{
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	8f 93       	push	r24
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	a8 95       	wdr
     fb6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     fba:	88 61       	ori	r24, 0x18	; 24
     fbc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     fc0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     fc4:	0f be       	out	0x3f, r0	; 63
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
}
     fc6:	8f 91       	pop	r24
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	0f 90       	pop	r0
     fce:	1f 90       	pop	r1
     fd0:	18 95       	reti

00000fd2 <_ZN7OneWire5resetEv>:
      search_result = FALSE;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   }
   return search_result;
  }
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	fc 01       	movw	r30, r24
     fde:	f0 80       	ld	r15, Z
     fe0:	c1 81       	ldd	r28, Z+1	; 0x01
     fe2:	d2 81       	ldd	r29, Z+2	; 0x02
     fe4:	f8 94       	cli
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	0f 2d       	mov	r16, r15
     fea:	00 95       	com	r16
     fec:	80 23       	and	r24, r16
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	78 94       	sei
     ff2:	1d e7       	ldi	r17, 0x7D	; 125
     ff4:	11 50       	subi	r17, 0x01	; 1
     ff6:	29 f1       	breq	.+74     	; 0x1042 <_ZN7OneWire5resetEv+0x70>
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 93 02 	call	0x526	; 0x526 <delayMicroseconds>
    1000:	88 81       	ld	r24, Y
    1002:	8f 21       	and	r24, r15
    1004:	b9 f3       	breq	.-18     	; 0xff4 <_ZN7OneWire5resetEv+0x22>
    1006:	f8 94       	cli
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	80 23       	and	r24, r16
    100c:	8a 83       	std	Y+2, r24	; 0x02
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	8f 29       	or	r24, r15
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	78 94       	sei
    1016:	80 ee       	ldi	r24, 0xE0	; 224
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 93 02 	call	0x526	; 0x526 <delayMicroseconds>
    101e:	f8 94       	cli
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	08 23       	and	r16, r24
    1024:	09 83       	std	Y+1, r16	; 0x01
    1026:	86 e4       	ldi	r24, 0x46	; 70
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 93 02 	call	0x526	; 0x526 <delayMicroseconds>
    102e:	88 81       	ld	r24, Y
    1030:	f8 22       	and	r15, r24
    1032:	11 e0       	ldi	r17, 0x01	; 1
    1034:	09 f0       	breq	.+2      	; 0x1038 <_ZN7OneWire5resetEv+0x66>
    1036:	10 e0       	ldi	r17, 0x00	; 0
    1038:	78 94       	sei
    103a:	8a e9       	ldi	r24, 0x9A	; 154
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	0e 94 93 02 	call	0x526	; 0x526 <delayMicroseconds>
    1042:	81 2f       	mov	r24, r17
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	08 95       	ret

00001050 <_ZN7OneWire9write_bitEh>:
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	fc 01       	movw	r30, r24
    1058:	10 81       	ld	r17, Z
    105a:	c1 81       	ldd	r28, Z+1	; 0x01
    105c:	d2 81       	ldd	r29, Z+2	; 0x02
    105e:	81 2f       	mov	r24, r17
    1060:	80 95       	com	r24
    1062:	60 ff       	sbrs	r22, 0
    1064:	12 c0       	rjmp	.+36     	; 0x108a <_ZN7OneWire9write_bitEh+0x3a>
    1066:	f8 94       	cli
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	89 23       	and	r24, r25
    106c:	8a 83       	std	Y+2, r24	; 0x02
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	81 2b       	or	r24, r17
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	8a e0       	ldi	r24, 0x0A	; 10
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 93 02 	call	0x526	; 0x526 <delayMicroseconds>
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	18 2b       	or	r17, r24
    1080:	1a 83       	std	Y+2, r17	; 0x02
    1082:	78 94       	sei
    1084:	87 e3       	ldi	r24, 0x37	; 55
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	11 c0       	rjmp	.+34     	; 0x10ac <_ZN7OneWire9write_bitEh+0x5c>
    108a:	f8 94       	cli
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	89 23       	and	r24, r25
    1090:	8a 83       	std	Y+2, r24	; 0x02
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	81 2b       	or	r24, r17
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	81 e4       	ldi	r24, 0x41	; 65
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 93 02 	call	0x526	; 0x526 <delayMicroseconds>
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	18 2b       	or	r17, r24
    10a4:	1a 83       	std	Y+2, r17	; 0x02
    10a6:	78 94       	sei
    10a8:	85 e0       	ldi	r24, 0x05	; 5
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0c 94 93 02 	jmp	0x526	; 0x526 <delayMicroseconds>

000010b6 <_ZN7OneWire8read_bitEv>:
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	fc 01       	movw	r30, r24
    10c0:	00 81       	ld	r16, Z
    10c2:	c1 81       	ldd	r28, Z+1	; 0x01
    10c4:	d2 81       	ldd	r29, Z+2	; 0x02
    10c6:	f8 94       	cli
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	80 2b       	or	r24, r16
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	10 2f       	mov	r17, r16
    10d2:	10 95       	com	r17
    10d4:	81 23       	and	r24, r17
    10d6:	8a 83       	std	Y+2, r24	; 0x02
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 93 02 	call	0x526	; 0x526 <delayMicroseconds>
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	18 23       	and	r17, r24
    10e4:	19 83       	std	Y+1, r17	; 0x01
    10e6:	8a e0       	ldi	r24, 0x0A	; 10
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 93 02 	call	0x526	; 0x526 <delayMicroseconds>
    10ee:	c8 81       	ld	r28, Y
    10f0:	78 94       	sei
    10f2:	85 e3       	ldi	r24, 0x35	; 53
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 93 02 	call	0x526	; 0x526 <delayMicroseconds>
    10fa:	c0 23       	and	r28, r16
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <_ZN7OneWire8read_bitEv+0x4c>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	08 95       	ret

0000110c <_ZN7OneWire5writeEhh>:
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ec 01       	movw	r28, r24
    111c:	d6 2e       	mov	r13, r22
    111e:	e4 2e       	mov	r14, r20
    1120:	08 e0       	ldi	r16, 0x08	; 8
    1122:	10 e0       	ldi	r17, 0x00	; 0
    1124:	ff 24       	eor	r15, r15
    1126:	f3 94       	inc	r15
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	8d 2d       	mov	r24, r13
    112c:	8f 21       	and	r24, r15
    112e:	09 f4       	brne	.+2      	; 0x1132 <_ZN7OneWire5writeEhh+0x26>
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	ce 01       	movw	r24, r28
    1134:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN7OneWire9write_bitEh>
    1138:	ff 0c       	add	r15, r15
    113a:	01 50       	subi	r16, 0x01	; 1
    113c:	11 09       	sbc	r17, r1
    113e:	a1 f7       	brne	.-24     	; 0x1128 <_ZN7OneWire5writeEhh+0x1c>
    1140:	e1 10       	cpse	r14, r1
    1142:	10 c0       	rjmp	.+32     	; 0x1164 <_ZN7OneWire5writeEhh+0x58>
    1144:	f8 94       	cli
    1146:	e9 81       	ldd	r30, Y+1	; 0x01
    1148:	fa 81       	ldd	r31, Y+2	; 0x02
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	88 81       	ld	r24, Y
    114e:	80 95       	com	r24
    1150:	89 23       	and	r24, r25
    1152:	81 83       	std	Z+1, r24	; 0x01
    1154:	e9 81       	ldd	r30, Y+1	; 0x01
    1156:	fa 81       	ldd	r31, Y+2	; 0x02
    1158:	92 81       	ldd	r25, Z+2	; 0x02
    115a:	88 81       	ld	r24, Y
    115c:	80 95       	com	r24
    115e:	89 23       	and	r24, r25
    1160:	82 83       	std	Z+2, r24	; 0x02
    1162:	78 94       	sei
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	08 95       	ret

00001174 <_ZN7OneWire4readEv>:
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	7c 01       	movw	r14, r24
    1182:	08 e0       	ldi	r16, 0x08	; 8
    1184:	10 e0       	ldi	r17, 0x00	; 0
    1186:	c0 e0       	ldi	r28, 0x00	; 0
    1188:	d1 e0       	ldi	r29, 0x01	; 1
    118a:	c7 01       	movw	r24, r14
    118c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN7OneWire8read_bitEv>
    1190:	81 11       	cpse	r24, r1
    1192:	cd 2b       	or	r28, r29
    1194:	dd 0f       	add	r29, r29
    1196:	01 50       	subi	r16, 0x01	; 1
    1198:	11 09       	sbc	r17, r1
    119a:	b9 f7       	brne	.-18     	; 0x118a <_ZN7OneWire4readEv+0x16>
    119c:	8c 2f       	mov	r24, r28
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	08 95       	ret

000011ac <_ZN7OneWire6selectEPKh>:
    11ac:	ef 92       	push	r14
    11ae:	ff 92       	push	r15
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	8c 01       	movw	r16, r24
    11ba:	7b 01       	movw	r14, r22
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	65 e5       	ldi	r22, 0x55	; 85
    11c0:	0e 94 86 08 	call	0x110c	; 0x110c <_ZN7OneWire5writeEhh>
    11c4:	e7 01       	movw	r28, r14
    11c6:	88 e0       	ldi	r24, 0x08	; 8
    11c8:	e8 0e       	add	r14, r24
    11ca:	f1 1c       	adc	r15, r1
    11cc:	69 91       	ld	r22, Y+
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	c8 01       	movw	r24, r16
    11d2:	0e 94 86 08 	call	0x110c	; 0x110c <_ZN7OneWire5writeEhh>
    11d6:	ce 15       	cp	r28, r14
    11d8:	df 05       	cpc	r29, r15
    11da:	c1 f7       	brne	.-16     	; 0x11cc <_ZN7OneWire6selectEPKh+0x20>
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	08 95       	ret

000011ea <_ZN7OneWire12reset_searchEv>:
    11ea:	fc 01       	movw	r30, r24
    11ec:	13 86       	std	Z+11, r1	; 0x0b
    11ee:	15 86       	std	Z+13, r1	; 0x0d
    11f0:	14 86       	std	Z+12, r1	; 0x0c
    11f2:	dc 01       	movw	r26, r24
    11f4:	1b 96       	adiw	r26, 0x0b	; 11
    11f6:	33 96       	adiw	r30, 0x03	; 3
    11f8:	1e 92       	st	-X, r1
    11fa:	ae 17       	cp	r26, r30
    11fc:	bf 07       	cpc	r27, r31
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <_ZN7OneWire12reset_searchEv+0xe>
    1200:	08 95       	ret

00001202 <_ZN7OneWireC1Eh>:
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	ec 01       	movw	r28, r24
    120a:	16 2f       	mov	r17, r22
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	81 2f       	mov	r24, r17
    1210:	0e 94 61 03 	call	0x6c2	; 0x6c2 <pinMode>
    1214:	61 2f       	mov	r22, r17
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	fb 01       	movw	r30, r22
    121a:	e4 58       	subi	r30, 0x84	; 132
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	e4 91       	lpm	r30, Z
    1220:	e8 83       	st	Y, r30
    1222:	fb 01       	movw	r30, r22
    1224:	e0 57       	subi	r30, 0x70	; 112
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	e4 91       	lpm	r30, Z
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	ee 0f       	add	r30, r30
    122e:	ff 1f       	adc	r31, r31
    1230:	ec 55       	subi	r30, 0x5C	; 92
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	85 91       	lpm	r24, Z+
    1236:	94 91       	lpm	r25, Z
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	ce 01       	movw	r24, r28
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <_ZN7OneWire12reset_searchEv>

00001248 <_ZN7OneWire4crc8EPKhh>:
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
    1248:	dc 01       	movw	r26, r24
	uint8_t crc = 0;
    124a:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
    124c:	61 50       	subi	r22, 0x01	; 1
    124e:	40 f0       	brcs	.+16     	; 0x1260 <_ZN7OneWire4crc8EPKhh+0x18>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    1250:	9d 91       	ld	r25, X+
    1252:	e8 2f       	mov	r30, r24
    1254:	e9 27       	eor	r30, r25
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	ee 53       	subi	r30, 0x3E	; 62
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	84 91       	lpm	r24, Z
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    125e:	f6 cf       	rjmp	.-20     	; 0x124c <_ZN7OneWire4crc8EPKhh+0x4>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    1260:	08 95       	ret

00001262 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1262:	08 95       	ret

00001264 <_ZN11arduinoUART4findEPhjPc>:
uint8_t arduinoUART::sendCommand( char* command, 
                char* ans1, 
                char* ans2 )
{
  return sendCommand(command, ans1, ans2, NULL, NULL, _def_timeout ); 
}
    1264:	af 92       	push	r10
    1266:	bf 92       	push	r11
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	e9 01       	movw	r28, r18
    127a:	09 90       	ld	r0, Y+
    127c:	00 20       	and	r0, r0
    127e:	e9 f7       	brne	.-6      	; 0x127a <_ZN11arduinoUART4findEPhjPc+0x16>
    1280:	21 97       	sbiw	r28, 0x01	; 1
    1282:	c2 1b       	sub	r28, r18
    1284:	d3 0b       	sbc	r29, r19
    1286:	4c 17       	cp	r20, r28
    1288:	5d 07       	cpc	r21, r29
    128a:	b8 f0       	brcs	.+46     	; 0x12ba <_ZN11arduinoUART4findEPhjPc+0x56>
    128c:	79 01       	movw	r14, r18
    128e:	6b 01       	movw	r12, r22
    1290:	a1 2c       	mov	r10, r1
    1292:	b1 2c       	mov	r11, r1
    1294:	8a 01       	movw	r16, r20
    1296:	0c 1b       	sub	r16, r28
    1298:	1d 0b       	sbc	r17, r29
    129a:	0a 15       	cp	r16, r10
    129c:	1b 05       	cpc	r17, r11
    129e:	68 f0       	brcs	.+26     	; 0x12ba <_ZN11arduinoUART4findEPhjPc+0x56>
    12a0:	ae 01       	movw	r20, r28
    12a2:	b7 01       	movw	r22, r14
    12a4:	c6 01       	movw	r24, r12
    12a6:	8a 0d       	add	r24, r10
    12a8:	9b 1d       	adc	r25, r11
    12aa:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <memcmp>
    12ae:	89 2b       	or	r24, r25
    12b0:	31 f0       	breq	.+12     	; 0x12be <_ZN11arduinoUART4findEPhjPc+0x5a>
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	a8 1a       	sub	r10, r24
    12b6:	b8 0a       	sbc	r11, r24
    12b8:	f0 cf       	rjmp	.-32     	; 0x129a <_ZN11arduinoUART4findEPhjPc+0x36>
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <_ZN11arduinoUART4findEPhjPc+0x5c>
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	bf 90       	pop	r11
    12d2:	af 90       	pop	r10
    12d4:	08 95       	ret

000012d6 <beginSerial>:
    12d6:	41 11       	cpse	r20, r1
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <beginSerial+0x12>
    12da:	26 e0       	ldi	r18, 0x06	; 6
    12dc:	ab 01       	movw	r20, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	87 e6       	ldi	r24, 0x67	; 103
    12e2:	94 e0       	ldi	r25, 0x04	; 4
    12e4:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <_ZN14HardwareSerial5beginEmh>
    12e8:	08 95       	ret

000012ea <_ZN11arduinoUART9beginUARTEv>:
    12ea:	fc 01       	movw	r30, r24
    12ec:	61 81       	ldd	r22, Z+1	; 0x01
    12ee:	72 81       	ldd	r23, Z+2	; 0x02
    12f0:	83 81       	ldd	r24, Z+3	; 0x03
    12f2:	94 81       	ldd	r25, Z+4	; 0x04
    12f4:	40 81       	ld	r20, Z
    12f6:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <beginSerial>

000012fa <closeSerial>:
    12fa:	81 11       	cpse	r24, r1
    12fc:	04 c0       	rjmp	.+8      	; 0x1306 <closeSerial+0xc>
    12fe:	87 e6       	ldi	r24, 0x67	; 103
    1300:	94 e0       	ldi	r25, 0x04	; 4
    1302:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <_ZN14HardwareSerial3endEv>
    1306:	08 95       	ret

00001308 <_ZN11arduinoUART9closeUARTEv>:
    1308:	fc 01       	movw	r30, r24
    130a:	80 81       	ld	r24, Z
    130c:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <closeSerial>

00001310 <serialWrite>:
    1310:	61 11       	cpse	r22, r1
    1312:	05 c0       	rjmp	.+10     	; 0x131e <serialWrite+0xe>
    1314:	68 2f       	mov	r22, r24
    1316:	87 e6       	ldi	r24, 0x67	; 103
    1318:	94 e0       	ldi	r25, 0x04	; 4
    131a:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <_ZN14HardwareSerial5writeEh>
    131e:	08 95       	ret

00001320 <printString>:
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	16 2f       	mov	r17, r22
    1328:	ec 01       	movw	r28, r24
    132a:	89 91       	ld	r24, Y+
    132c:	88 23       	and	r24, r24
    132e:	21 f0       	breq	.+8      	; 0x1338 <printString+0x18>
    1330:	61 2f       	mov	r22, r17
    1332:	0e 94 88 09 	call	0x1310	; 0x1310 <serialWrite>
    1336:	f9 cf       	rjmp	.-14     	; 0x132a <printString+0xa>
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	08 95       	ret

00001340 <serialAvailable>:
    1340:	81 11       	cpse	r24, r1
    1342:	04 c0       	rjmp	.+8      	; 0x134c <serialAvailable+0xc>
    1344:	87 e6       	ldi	r24, 0x67	; 103
    1346:	94 e0       	ldi	r25, 0x04	; 4
    1348:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <_ZN14HardwareSerial9availableEv>
    134c:	8f ef       	ldi	r24, 0xFF	; 255
    134e:	9f ef       	ldi	r25, 0xFF	; 255
    1350:	08 95       	ret

00001352 <serialRead>:
    1352:	81 11       	cpse	r24, r1
    1354:	04 c0       	rjmp	.+8      	; 0x135e <serialRead+0xc>
    1356:	87 e6       	ldi	r24, 0x67	; 103
    1358:	94 e0       	ldi	r25, 0x04	; 4
    135a:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <_ZN14HardwareSerial4readEv>
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	9f ef       	ldi	r25, 0xFF	; 255
    1362:	08 95       	ret

00001364 <_ZN11arduinoUART7waitForEPcS0_S0_S0_m>:
    1364:	2f 92       	push	r2
    1366:	3f 92       	push	r3
    1368:	4f 92       	push	r4
    136a:	5f 92       	push	r5
    136c:	6f 92       	push	r6
    136e:	7f 92       	push	r7
    1370:	8f 92       	push	r8
    1372:	9f 92       	push	r9
    1374:	af 92       	push	r10
    1376:	bf 92       	push	r11
    1378:	cf 92       	push	r12
    137a:	df 92       	push	r13
    137c:	ef 92       	push	r14
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	2a 97       	sbiw	r28, 0x0a	; 10
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	9a 87       	std	Y+10, r25	; 0x0a
    139a:	89 87       	std	Y+9, r24	; 0x09
    139c:	78 87       	std	Y+8, r23	; 0x08
    139e:	6f 83       	std	Y+7, r22	; 0x07
    13a0:	5c 83       	std	Y+4, r21	; 0x04
    13a2:	4b 83       	std	Y+3, r20	; 0x03
    13a4:	19 01       	movw	r2, r18
    13a6:	1e 83       	std	Y+6, r17	; 0x06
    13a8:	0d 83       	std	Y+5, r16	; 0x05
    13aa:	3c 01       	movw	r6, r24
    13ac:	8e e0       	ldi	r24, 0x0E	; 14
    13ae:	68 0e       	add	r6, r24
    13b0:	71 1c       	adc	r7, r1
    13b2:	80 e9       	ldi	r24, 0x90	; 144
    13b4:	f3 01       	movw	r30, r6
    13b6:	11 92       	st	Z+, r1
    13b8:	8a 95       	dec	r24
    13ba:	e9 f7       	brne	.-6      	; 0x13b6 <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x52>
    13bc:	09 85       	ldd	r16, Y+9	; 0x09
    13be:	1a 85       	ldd	r17, Y+10	; 0x0a
    13c0:	02 56       	subi	r16, 0x62	; 98
    13c2:	1f 4f       	sbci	r17, 0xFF	; 255
    13c4:	f8 01       	movw	r30, r16
    13c6:	11 82       	std	Z+1, r1	; 0x01
    13c8:	10 82       	st	Z, r1
    13ca:	0e 94 26 02 	call	0x44c	; 0x44c <millis>
    13ce:	4b 01       	movw	r8, r22
    13d0:	5c 01       	movw	r10, r24
    13d2:	41 2c       	mov	r4, r1
    13d4:	51 2c       	mov	r5, r1
    13d6:	1a 83       	std	Y+2, r17	; 0x02
    13d8:	09 83       	std	Y+1, r16	; 0x01
    13da:	0e 94 26 02 	call	0x44c	; 0x44c <millis>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	88 19       	sub	r24, r8
    13e4:	99 09       	sbc	r25, r9
    13e6:	aa 09       	sbc	r26, r10
    13e8:	bb 09       	sbc	r27, r11
    13ea:	8c 15       	cp	r24, r12
    13ec:	9d 05       	cpc	r25, r13
    13ee:	ae 05       	cpc	r26, r14
    13f0:	bf 05       	cpc	r27, r15
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x92>
    13f4:	61 c0       	rjmp	.+194    	; 0x14b8 <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x154>
    13f6:	e9 85       	ldd	r30, Y+9	; 0x09
    13f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    13fa:	80 81       	ld	r24, Z
    13fc:	0e 94 a0 09 	call	0x1340	; 0x1340 <serialAvailable>
    1400:	89 2b       	or	r24, r25
    1402:	c9 f0       	breq	.+50     	; 0x1436 <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0xd2>
    1404:	ff e8       	ldi	r31, 0x8F	; 143
    1406:	4f 16       	cp	r4, r31
    1408:	51 04       	cpc	r5, r1
    140a:	a8 f4       	brcc	.+42     	; 0x1436 <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0xd2>
    140c:	82 01       	movw	r16, r4
    140e:	0f 5f       	subi	r16, 0xFF	; 255
    1410:	1f 4f       	sbci	r17, 0xFF	; 255
    1412:	e9 85       	ldd	r30, Y+9	; 0x09
    1414:	fa 85       	ldd	r31, Y+10	; 0x0a
    1416:	80 81       	ld	r24, Z
    1418:	0e 94 a9 09 	call	0x1352	; 0x1352 <serialRead>
    141c:	e9 85       	ldd	r30, Y+9	; 0x09
    141e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1420:	e4 0d       	add	r30, r4
    1422:	f5 1d       	adc	r31, r5
    1424:	86 87       	std	Z+14, r24	; 0x0e
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	91 83       	std	Z+1, r25	; 0x01
    1432:	80 83       	st	Z, r24
    1434:	28 01       	movw	r4, r16
    1436:	e9 81       	ldd	r30, Y+1	; 0x01
    1438:	fa 81       	ldd	r31, Y+2	; 0x02
    143a:	00 81       	ld	r16, Z
    143c:	11 81       	ldd	r17, Z+1	; 0x01
    143e:	2f 81       	ldd	r18, Y+7	; 0x07
    1440:	38 85       	ldd	r19, Y+8	; 0x08
    1442:	a8 01       	movw	r20, r16
    1444:	b3 01       	movw	r22, r6
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN11arduinoUART4findEPhjPc>
    144e:	81 11       	cpse	r24, r1
    1450:	35 c0       	rjmp	.+106    	; 0x14bc <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x158>
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	49 f0       	breq	.+18     	; 0x146c <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x108>
    145a:	9c 01       	movw	r18, r24
    145c:	a8 01       	movw	r20, r16
    145e:	b3 01       	movw	r22, r6
    1460:	89 85       	ldd	r24, Y+9	; 0x09
    1462:	9a 85       	ldd	r25, Y+10	; 0x0a
    1464:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN11arduinoUART4findEPhjPc>
    1468:	81 11       	cpse	r24, r1
    146a:	2a c0       	rjmp	.+84     	; 0x14c0 <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x15c>
    146c:	21 14       	cp	r2, r1
    146e:	31 04       	cpc	r3, r1
    1470:	49 f0       	breq	.+18     	; 0x1484 <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x120>
    1472:	91 01       	movw	r18, r2
    1474:	a8 01       	movw	r20, r16
    1476:	b3 01       	movw	r22, r6
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN11arduinoUART4findEPhjPc>
    1480:	81 11       	cpse	r24, r1
    1482:	20 c0       	rjmp	.+64     	; 0x14c4 <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x160>
    1484:	ed 81       	ldd	r30, Y+5	; 0x05
    1486:	fe 81       	ldd	r31, Y+6	; 0x06
    1488:	30 97       	sbiw	r30, 0x00	; 0
    148a:	49 f0       	breq	.+18     	; 0x149e <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x13a>
    148c:	9f 01       	movw	r18, r30
    148e:	a8 01       	movw	r20, r16
    1490:	b3 01       	movw	r22, r6
    1492:	89 85       	ldd	r24, Y+9	; 0x09
    1494:	9a 85       	ldd	r25, Y+10	; 0x0a
    1496:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN11arduinoUART4findEPhjPc>
    149a:	81 11       	cpse	r24, r1
    149c:	15 c0       	rjmp	.+42     	; 0x14c8 <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x164>
    149e:	0e 94 26 02 	call	0x44c	; 0x44c <millis>
    14a2:	68 15       	cp	r22, r8
    14a4:	79 05       	cpc	r23, r9
    14a6:	8a 05       	cpc	r24, r10
    14a8:	9b 05       	cpc	r25, r11
    14aa:	08 f0       	brcs	.+2      	; 0x14ae <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x14a>
    14ac:	96 cf       	rjmp	.-212    	; 0x13da <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x76>
    14ae:	0e 94 26 02 	call	0x44c	; 0x44c <millis>
    14b2:	4b 01       	movw	r8, r22
    14b4:	5c 01       	movw	r10, r24
    14b6:	91 cf       	rjmp	.-222    	; 0x13da <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x76>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	07 c0       	rjmp	.+14     	; 0x14ca <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x166>
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x166>
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x166>
    14c4:	83 e0       	ldi	r24, 0x03	; 3
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <_ZN11arduinoUART7waitForEPcS0_S0_S0_m+0x166>
    14c8:	84 e0       	ldi	r24, 0x04	; 4
    14ca:	2a 96       	adiw	r28, 0x0a	; 10
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	df 90       	pop	r13
    14e4:	cf 90       	pop	r12
    14e6:	bf 90       	pop	r11
    14e8:	af 90       	pop	r10
    14ea:	9f 90       	pop	r9
    14ec:	8f 90       	pop	r8
    14ee:	7f 90       	pop	r7
    14f0:	6f 90       	pop	r6
    14f2:	5f 90       	pop	r5
    14f4:	4f 90       	pop	r4
    14f6:	3f 90       	pop	r3
    14f8:	2f 90       	pop	r2
    14fa:	08 95       	ret

000014fc <_ZN11arduinoUART7waitForEPcS0_m>:
    14fc:	cf 92       	push	r12
    14fe:	df 92       	push	r13
    1500:	ef 92       	push	r14
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	68 01       	movw	r12, r16
    150a:	79 01       	movw	r14, r18
    150c:	00 e0       	ldi	r16, 0x00	; 0
    150e:	10 e0       	ldi	r17, 0x00	; 0
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	0e 94 b2 09 	call	0x1364	; 0x1364 <_ZN11arduinoUART7waitForEPcS0_S0_S0_m>
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	df 90       	pop	r13
    1522:	cf 90       	pop	r12
    1524:	08 95       	ret

00001526 <serialFlush>:
    1526:	81 11       	cpse	r24, r1
    1528:	04 c0       	rjmp	.+8      	; 0x1532 <serialFlush+0xc>
    152a:	87 e6       	ldi	r24, 0x67	; 103
    152c:	94 e0       	ldi	r25, 0x04	; 4
    152e:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <_ZN14HardwareSerial5flushEv>
    1532:	08 95       	ret

00001534 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m>:
    1534:	2f 92       	push	r2
    1536:	3f 92       	push	r3
    1538:	4f 92       	push	r4
    153a:	5f 92       	push	r5
    153c:	6f 92       	push	r6
    153e:	7f 92       	push	r7
    1540:	8f 92       	push	r8
    1542:	9f 92       	push	r9
    1544:	af 92       	push	r10
    1546:	bf 92       	push	r11
    1548:	cf 92       	push	r12
    154a:	df 92       	push	r13
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	2a 97       	sbiw	r28, 0x0a	; 10
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	9a 87       	std	Y+10, r25	; 0x0a
    156a:	89 87       	std	Y+9, r24	; 0x09
    156c:	4b 01       	movw	r8, r22
    156e:	58 87       	std	Y+8, r21	; 0x08
    1570:	4f 83       	std	Y+7, r20	; 0x07
    1572:	19 01       	movw	r2, r18
    1574:	1c 83       	std	Y+4, r17	; 0x04
    1576:	0b 83       	std	Y+3, r16	; 0x03
    1578:	fe 82       	std	Y+6, r15	; 0x06
    157a:	ed 82       	std	Y+5, r14	; 0x05
    157c:	fc 01       	movw	r30, r24
    157e:	85 85       	ldd	r24, Z+13	; 0x0d
    1580:	88 23       	and	r24, r24
    1582:	19 f0       	breq	.+6      	; 0x158a <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x56>
    1584:	80 81       	ld	r24, Z
    1586:	0e 94 93 0a 	call	0x1526	; 0x1526 <serialFlush>
    158a:	e9 85       	ldd	r30, Y+9	; 0x09
    158c:	fa 85       	ldd	r31, Y+10	; 0x0a
    158e:	60 81       	ld	r22, Z
    1590:	c4 01       	movw	r24, r8
    1592:	0e 94 90 09 	call	0x1320	; 0x1320 <printString>
    1596:	e9 85       	ldd	r30, Y+9	; 0x09
    1598:	fa 85       	ldd	r31, Y+10	; 0x0a
    159a:	61 85       	ldd	r22, Z+9	; 0x09
    159c:	72 85       	ldd	r23, Z+10	; 0x0a
    159e:	83 85       	ldd	r24, Z+11	; 0x0b
    15a0:	94 85       	ldd	r25, Z+12	; 0x0c
    15a2:	0e 94 57 02 	call	0x4ae	; 0x4ae <delay>
    15a6:	89 84       	ldd	r8, Y+9	; 0x09
    15a8:	9a 84       	ldd	r9, Y+10	; 0x0a
    15aa:	fe e0       	ldi	r31, 0x0E	; 14
    15ac:	8f 0e       	add	r8, r31
    15ae:	91 1c       	adc	r9, r1
    15b0:	80 e9       	ldi	r24, 0x90	; 144
    15b2:	f4 01       	movw	r30, r8
    15b4:	11 92       	st	Z+, r1
    15b6:	8a 95       	dec	r24
    15b8:	e9 f7       	brne	.-6      	; 0x15b4 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x80>
    15ba:	09 85       	ldd	r16, Y+9	; 0x09
    15bc:	1a 85       	ldd	r17, Y+10	; 0x0a
    15be:	02 56       	subi	r16, 0x62	; 98
    15c0:	1f 4f       	sbci	r17, 0xFF	; 255
    15c2:	f8 01       	movw	r30, r16
    15c4:	11 82       	std	Z+1, r1	; 0x01
    15c6:	10 82       	st	Z, r1
    15c8:	0e 94 26 02 	call	0x44c	; 0x44c <millis>
    15cc:	2b 01       	movw	r4, r22
    15ce:	3c 01       	movw	r6, r24
    15d0:	e1 2c       	mov	r14, r1
    15d2:	f1 2c       	mov	r15, r1
    15d4:	1a 83       	std	Y+2, r17	; 0x02
    15d6:	09 83       	std	Y+1, r16	; 0x01
    15d8:	0e 94 26 02 	call	0x44c	; 0x44c <millis>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	84 19       	sub	r24, r4
    15e2:	95 09       	sbc	r25, r5
    15e4:	a6 09       	sbc	r26, r6
    15e6:	b7 09       	sbc	r27, r7
    15e8:	8a 15       	cp	r24, r10
    15ea:	9b 05       	cpc	r25, r11
    15ec:	ac 05       	cpc	r26, r12
    15ee:	bd 05       	cpc	r27, r13
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0xc0>
    15f2:	61 c0       	rjmp	.+194    	; 0x16b6 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x182>
    15f4:	e9 85       	ldd	r30, Y+9	; 0x09
    15f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    15f8:	80 81       	ld	r24, Z
    15fa:	0e 94 a0 09 	call	0x1340	; 0x1340 <serialAvailable>
    15fe:	89 2b       	or	r24, r25
    1600:	c9 f0       	breq	.+50     	; 0x1634 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x100>
    1602:	ff e8       	ldi	r31, 0x8F	; 143
    1604:	ef 16       	cp	r14, r31
    1606:	f1 04       	cpc	r15, r1
    1608:	a8 f4       	brcc	.+42     	; 0x1634 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x100>
    160a:	87 01       	movw	r16, r14
    160c:	0f 5f       	subi	r16, 0xFF	; 255
    160e:	1f 4f       	sbci	r17, 0xFF	; 255
    1610:	e9 85       	ldd	r30, Y+9	; 0x09
    1612:	fa 85       	ldd	r31, Y+10	; 0x0a
    1614:	80 81       	ld	r24, Z
    1616:	0e 94 a9 09 	call	0x1352	; 0x1352 <serialRead>
    161a:	e9 85       	ldd	r30, Y+9	; 0x09
    161c:	fa 85       	ldd	r31, Y+10	; 0x0a
    161e:	ee 0d       	add	r30, r14
    1620:	ff 1d       	adc	r31, r15
    1622:	86 87       	std	Z+14, r24	; 0x0e
    1624:	e9 81       	ldd	r30, Y+1	; 0x01
    1626:	fa 81       	ldd	r31, Y+2	; 0x02
    1628:	80 81       	ld	r24, Z
    162a:	91 81       	ldd	r25, Z+1	; 0x01
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	91 83       	std	Z+1, r25	; 0x01
    1630:	80 83       	st	Z, r24
    1632:	78 01       	movw	r14, r16
    1634:	e9 81       	ldd	r30, Y+1	; 0x01
    1636:	fa 81       	ldd	r31, Y+2	; 0x02
    1638:	00 81       	ld	r16, Z
    163a:	11 81       	ldd	r17, Z+1	; 0x01
    163c:	2f 81       	ldd	r18, Y+7	; 0x07
    163e:	38 85       	ldd	r19, Y+8	; 0x08
    1640:	a8 01       	movw	r20, r16
    1642:	b4 01       	movw	r22, r8
    1644:	89 85       	ldd	r24, Y+9	; 0x09
    1646:	9a 85       	ldd	r25, Y+10	; 0x0a
    1648:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN11arduinoUART4findEPhjPc>
    164c:	81 11       	cpse	r24, r1
    164e:	35 c0       	rjmp	.+106    	; 0x16ba <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x186>
    1650:	21 14       	cp	r2, r1
    1652:	31 04       	cpc	r3, r1
    1654:	49 f0       	breq	.+18     	; 0x1668 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x134>
    1656:	91 01       	movw	r18, r2
    1658:	a8 01       	movw	r20, r16
    165a:	b4 01       	movw	r22, r8
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN11arduinoUART4findEPhjPc>
    1664:	81 11       	cpse	r24, r1
    1666:	2b c0       	rjmp	.+86     	; 0x16be <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x18a>
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	49 f0       	breq	.+18     	; 0x1682 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x14e>
    1670:	9c 01       	movw	r18, r24
    1672:	a8 01       	movw	r20, r16
    1674:	b4 01       	movw	r22, r8
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN11arduinoUART4findEPhjPc>
    167e:	81 11       	cpse	r24, r1
    1680:	20 c0       	rjmp	.+64     	; 0x16c2 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x18e>
    1682:	ed 81       	ldd	r30, Y+5	; 0x05
    1684:	fe 81       	ldd	r31, Y+6	; 0x06
    1686:	30 97       	sbiw	r30, 0x00	; 0
    1688:	49 f0       	breq	.+18     	; 0x169c <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x168>
    168a:	9f 01       	movw	r18, r30
    168c:	a8 01       	movw	r20, r16
    168e:	b4 01       	movw	r22, r8
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN11arduinoUART4findEPhjPc>
    1698:	81 11       	cpse	r24, r1
    169a:	15 c0       	rjmp	.+42     	; 0x16c6 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x192>
    169c:	0e 94 26 02 	call	0x44c	; 0x44c <millis>
    16a0:	64 15       	cp	r22, r4
    16a2:	75 05       	cpc	r23, r5
    16a4:	86 05       	cpc	r24, r6
    16a6:	97 05       	cpc	r25, r7
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x178>
    16aa:	96 cf       	rjmp	.-212    	; 0x15d8 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0xa4>
    16ac:	0e 94 26 02 	call	0x44c	; 0x44c <millis>
    16b0:	2b 01       	movw	r4, r22
    16b2:	3c 01       	movw	r6, r24
    16b4:	91 cf       	rjmp	.-222    	; 0x15d8 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0xa4>
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	07 c0       	rjmp	.+14     	; 0x16c8 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x194>
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x194>
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x194>
    16c2:	83 e0       	ldi	r24, 0x03	; 3
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m+0x194>
    16c6:	84 e0       	ldi	r24, 0x04	; 4
    16c8:	2a 96       	adiw	r28, 0x0a	; 10
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	df 90       	pop	r13
    16e2:	cf 90       	pop	r12
    16e4:	bf 90       	pop	r11
    16e6:	af 90       	pop	r10
    16e8:	9f 90       	pop	r9
    16ea:	8f 90       	pop	r8
    16ec:	7f 90       	pop	r7
    16ee:	6f 90       	pop	r6
    16f0:	5f 90       	pop	r5
    16f2:	4f 90       	pop	r4
    16f4:	3f 90       	pop	r3
    16f6:	2f 90       	pop	r2
    16f8:	08 95       	ret

000016fa <_ZN11arduinoUART11sendCommandEPcS0_S0_m>:
    
uint8_t arduinoUART::sendCommand( char* command, 
                char* ans1, 
                char* ans2, 
                uint32_t timeout) 
{
    16fa:	af 92       	push	r10
    16fc:	bf 92       	push	r11
    16fe:	cf 92       	push	r12
    1700:	df 92       	push	r13
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
  return sendCommand(command, ans1, ans2, NULL, NULL, timeout );  
    170a:	57 01       	movw	r10, r14
    170c:	68 01       	movw	r12, r16
    170e:	e1 2c       	mov	r14, r1
    1710:	f1 2c       	mov	r15, r1
    1712:	00 e0       	ldi	r16, 0x00	; 0
    1714:	10 e0       	ldi	r17, 0x00	; 0
    1716:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_ZN11arduinoUART11sendCommandEPcS0_S0_S0_S0_m>
}       
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	08 95       	ret

0000172c <_ZN12arduinoUtils7hex2strEPhPch>:
//! Returns: void 
//!*************************************************************
void arduinoUtils::unsetCSSocket0()
{   
    mp.digitalWrite(3, HIGH);
    delay(2);
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	fb 01       	movw	r30, r22
    1732:	a0 e0       	ldi	r26, 0x00	; 0
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	cf 01       	movw	r24, r30
    173a:	86 1b       	sub	r24, r22
    173c:	97 0b       	sbc	r25, r23
    173e:	82 17       	cp	r24, r18
    1740:	93 07       	cpc	r25, r19
    1742:	b4 f4       	brge	.+44     	; 0x1770 <_ZN12arduinoUtils7hex2strEPhPch+0x44>
    1744:	81 91       	ld	r24, Z+
    1746:	98 2f       	mov	r25, r24
    1748:	92 95       	swap	r25
    174a:	9f 70       	andi	r25, 0x0F	; 15
    174c:	8f 70       	andi	r24, 0x0F	; 15
    174e:	ea 01       	movw	r28, r20
    1750:	ca 0f       	add	r28, r26
    1752:	db 1f       	adc	r29, r27
    1754:	9a 30       	cpi	r25, 0x0A	; 10
    1756:	10 f4       	brcc	.+4      	; 0x175c <_ZN12arduinoUtils7hex2strEPhPch+0x30>
    1758:	90 5d       	subi	r25, 0xD0	; 208
    175a:	01 c0       	rjmp	.+2      	; 0x175e <_ZN12arduinoUtils7hex2strEPhPch+0x32>
    175c:	99 5c       	subi	r25, 0xC9	; 201
    175e:	98 83       	st	Y, r25
    1760:	8a 30       	cpi	r24, 0x0A	; 10
    1762:	10 f4       	brcc	.+4      	; 0x1768 <_ZN12arduinoUtils7hex2strEPhPch+0x3c>
    1764:	80 5d       	subi	r24, 0xD0	; 208
    1766:	01 c0       	rjmp	.+2      	; 0x176a <_ZN12arduinoUtils7hex2strEPhPch+0x3e>
    1768:	89 5c       	subi	r24, 0xC9	; 201
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	12 96       	adiw	r26, 0x02	; 2
    176e:	e4 cf       	rjmp	.-56     	; 0x1738 <_ZN12arduinoUtils7hex2strEPhPch+0xc>
    1770:	22 0f       	add	r18, r18
    1772:	33 1f       	adc	r19, r19
    1774:	fa 01       	movw	r30, r20
    1776:	e2 0f       	add	r30, r18
    1778:	f3 1f       	adc	r31, r19
    177a:	10 82       	st	Z, r1
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	08 95       	ret

00001782 <_ZN12arduinoUtils18multiprotocolBeginEv>:
    1782:	84 e0       	ldi	r24, 0x04	; 4
    1784:	95 e0       	ldi	r25, 0x05	; 5
    1786:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN11mp_MCP230085beginEv>
    178a:	6a e0       	ldi	r22, 0x0A	; 10
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 57 02 	call	0x4ae	; 0x4ae <delay>
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	84 e0       	ldi	r24, 0x04	; 4
    179c:	95 e0       	ldi	r25, 0x05	; 5
    179e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN11mp_MCP230087pinModeEhh>
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	84 e0       	ldi	r24, 0x04	; 4
    17a8:	95 e0       	ldi	r25, 0x05	; 5
    17aa:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN11mp_MCP230087pinModeEhh>
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	62 e0       	ldi	r22, 0x02	; 2
    17b2:	84 e0       	ldi	r24, 0x04	; 4
    17b4:	95 e0       	ldi	r25, 0x05	; 5
    17b6:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN11mp_MCP230087pinModeEhh>
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	63 e0       	ldi	r22, 0x03	; 3
    17be:	84 e0       	ldi	r24, 0x04	; 4
    17c0:	95 e0       	ldi	r25, 0x05	; 5
    17c2:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN11mp_MCP230087pinModeEhh>
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	64 e0       	ldi	r22, 0x04	; 4
    17ca:	84 e0       	ldi	r24, 0x04	; 4
    17cc:	95 e0       	ldi	r25, 0x05	; 5
    17ce:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN11mp_MCP230087pinModeEhh>
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	65 e0       	ldi	r22, 0x05	; 5
    17d6:	84 e0       	ldi	r24, 0x04	; 4
    17d8:	95 e0       	ldi	r25, 0x05	; 5
    17da:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN11mp_MCP230087pinModeEhh>
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	66 e0       	ldi	r22, 0x06	; 6
    17e2:	84 e0       	ldi	r24, 0x04	; 4
    17e4:	95 e0       	ldi	r25, 0x05	; 5
    17e6:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN11mp_MCP230087pinModeEhh>
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	67 e0       	ldi	r22, 0x07	; 7
    17ee:	84 e0       	ldi	r24, 0x04	; 4
    17f0:	95 e0       	ldi	r25, 0x05	; 5
    17f2:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN11mp_MCP230087pinModeEhh>
    17f6:	64 e6       	ldi	r22, 0x64	; 100
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 57 02 	call	0x4ae	; 0x4ae <delay>
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	84 e0       	ldi	r24, 0x04	; 4
    1808:	95 e0       	ldi	r25, 0x05	; 5
    180a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	84 e0       	ldi	r24, 0x04	; 4
    1814:	95 e0       	ldi	r25, 0x05	; 5
    1816:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	62 e0       	ldi	r22, 0x02	; 2
    181e:	84 e0       	ldi	r24, 0x04	; 4
    1820:	95 e0       	ldi	r25, 0x05	; 5
    1822:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	63 e0       	ldi	r22, 0x03	; 3
    182a:	84 e0       	ldi	r24, 0x04	; 4
    182c:	95 e0       	ldi	r25, 0x05	; 5
    182e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    1832:	41 e0       	ldi	r20, 0x01	; 1
    1834:	64 e0       	ldi	r22, 0x04	; 4
    1836:	84 e0       	ldi	r24, 0x04	; 4
    1838:	95 e0       	ldi	r25, 0x05	; 5
    183a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	65 e0       	ldi	r22, 0x05	; 5
    1842:	84 e0       	ldi	r24, 0x04	; 4
    1844:	95 e0       	ldi	r25, 0x05	; 5
    1846:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	67 e0       	ldi	r22, 0x07	; 7
    184e:	84 e0       	ldi	r24, 0x04	; 4
    1850:	95 e0       	ldi	r25, 0x05	; 5
    1852:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    1856:	64 e6       	ldi	r22, 0x64	; 100
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <delay>

00001862 <_ZN12arduinoUtils12setONSocket0Ev>:
    1862:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <Utils+0x1>
    1866:	21 30       	cpi	r18, 0x01	; 1
    1868:	11 f0       	breq	.+4      	; 0x186e <_ZN12arduinoUtils12setONSocket0Ev+0xc>
    186a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_ZN12arduinoUtils18multiprotocolBeginEv>
    186e:	65 e0       	ldi	r22, 0x05	; 5
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 57 02 	call	0x4ae	; 0x4ae <delay>
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	61 e0       	ldi	r22, 0x01	; 1
    187e:	84 e0       	ldi	r24, 0x04	; 4
    1880:	95 e0       	ldi	r25, 0x05	; 5
    1882:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <Utils>
    188c:	64 e6       	ldi	r22, 0x64	; 100
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <delay>

00001898 <_ZN12arduinoUtils13setOFFSocket0Ev>:
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	84 e0       	ldi	r24, 0x04	; 4
    189e:	95 e0       	ldi	r25, 0x05	; 5
    18a0:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    18a4:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <Utils>
    18a8:	64 e6       	ldi	r22, 0x64	; 100
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <delay>

000018b4 <_ZN12arduinoUtils13setMUXSocket0Ev>:
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	64 e0       	ldi	r22, 0x04	; 4
    18b8:	84 e0       	ldi	r24, 0x04	; 4
    18ba:	95 e0       	ldi	r25, 0x05	; 5
    18bc:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	65 e0       	ldi	r22, 0x05	; 5
    18c4:	84 e0       	ldi	r24, 0x04	; 4
    18c6:	95 e0       	ldi	r25, 0x05	; 5
    18c8:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    18cc:	64 e6       	ldi	r22, 0x64	; 100
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <delay>

000018d8 <_ZN12arduinoUtils12setONSocket1Ev>:
//! Returns: void
//!*************************************************************
void arduinoUtils::setONSocket1()
{
    
    if (Utils.socket0_state != 1)
    18d8:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <Utils>
    18dc:	21 30       	cpi	r18, 0x01	; 1
    18de:	11 f0       	breq	.+4      	; 0x18e4 <_ZN12arduinoUtils12setONSocket1Ev+0xc>
        multiprotocolBegin();
    18e0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_ZN12arduinoUtils18multiprotocolBeginEv>
    
    delay(5);
    18e4:	65 e0       	ldi	r22, 0x05	; 5
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 57 02 	call	0x4ae	; 0x4ae <delay>
    mp.digitalWrite(0, HIGH);
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	84 e0       	ldi	r24, 0x04	; 4
    18f6:	95 e0       	ldi	r25, 0x05	; 5
    18f8:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    
    Utils.socket1_state = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <Utils+0x1>
    delay(100);                     //wait for stablility
    1902:	64 e6       	ldi	r22, 0x64	; 100
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <delay>

0000190e <_ZN12arduinoUtils13setOFFSocket1Ev>:
//! Param : void                                
//! Returns: void
//!*************************************************************
void arduinoUtils::setOFFSocket1()
{
    mp.digitalWrite(0, LOW);
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	84 e0       	ldi	r24, 0x04	; 4
    1914:	95 e0       	ldi	r25, 0x05	; 5
    1916:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    Utils.socket1_state = 0;
    191a:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <Utils+0x1>
    delay(100);                     //wait for stablility
    191e:	64 e6       	ldi	r22, 0x64	; 100
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <delay>

0000192a <_ZN12arduinoUtils13setMUXSocket1Ev>:
//! Param : void                                        
//! Returns: void
//!*************************************************************    
void arduinoUtils::setMUXSocket1(void)
{
    mp.digitalWrite(4, LOW);
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	64 e0       	ldi	r22, 0x04	; 4
    192e:	84 e0       	ldi	r24, 0x04	; 4
    1930:	95 e0       	ldi	r25, 0x05	; 5
    1932:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    mp.digitalWrite(5, HIGH);
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	65 e0       	ldi	r22, 0x05	; 5
    193a:	84 e0       	ldi	r24, 0x04	; 4
    193c:	95 e0       	ldi	r25, 0x05	; 5
    193e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN11mp_MCP2300812digitalWriteEhh>
    delay(100);                     //wait for stablility
    1942:	64 e6       	ldi	r22, 0x64	; 100
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <delay>

0000194e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    194e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1950:	91 8d       	ldd	r25, Z+25	; 0x19
    1952:	22 8d       	ldd	r18, Z+26	; 0x1a
    1954:	89 2f       	mov	r24, r25
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	80 5c       	subi	r24, 0xC0	; 192
    195a:	9f 4f       	sbci	r25, 0xFF	; 255
    195c:	82 1b       	sub	r24, r18
    195e:	91 09       	sbc	r25, r1
}
    1960:	8f 73       	andi	r24, 0x3F	; 63
    1962:	99 27       	eor	r25, r25
    1964:	08 95       	ret

00001966 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1966:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1968:	91 8d       	ldd	r25, Z+25	; 0x19
    196a:	82 8d       	ldd	r24, Z+26	; 0x1a
    196c:	98 17       	cp	r25, r24
    196e:	31 f0       	breq	.+12     	; 0x197c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1970:	82 8d       	ldd	r24, Z+26	; 0x1a
    1972:	e8 0f       	add	r30, r24
    1974:	f1 1d       	adc	r31, r1
    1976:	85 8d       	ldd	r24, Z+29	; 0x1d
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    197c:	8f ef       	ldi	r24, 0xFF	; 255
    197e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1980:	08 95       	ret

00001982 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1982:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1984:	91 8d       	ldd	r25, Z+25	; 0x19
    1986:	82 8d       	ldd	r24, Z+26	; 0x1a
    1988:	98 17       	cp	r25, r24
    198a:	61 f0       	breq	.+24     	; 0x19a4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    198c:	82 8d       	ldd	r24, Z+26	; 0x1a
    198e:	df 01       	movw	r26, r30
    1990:	a8 0f       	add	r26, r24
    1992:	b1 1d       	adc	r27, r1
    1994:	5d 96       	adiw	r26, 0x1d	; 29
    1996:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1998:	92 8d       	ldd	r25, Z+26	; 0x1a
    199a:	9f 5f       	subi	r25, 0xFF	; 255
    199c:	9f 73       	andi	r25, 0x3F	; 63
    199e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    19a4:	8f ef       	ldi	r24, 0xFF	; 255
    19a6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    19a8:	08 95       	ret

000019aa <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    19aa:	fc 01       	movw	r30, r24
    19ac:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    19ae:	44 8d       	ldd	r20, Z+28	; 0x1c
    19b0:	25 2f       	mov	r18, r21
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	84 2f       	mov	r24, r20
    19b6:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    19b8:	82 1b       	sub	r24, r18
    19ba:	93 0b       	sbc	r25, r19
    19bc:	54 17       	cp	r21, r20
    19be:	10 f0       	brcs	.+4      	; 0x19c4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    19c0:	cf 96       	adiw	r24, 0x3f	; 63
    19c2:	08 95       	ret
  return tail - head - 1;
    19c4:	01 97       	sbiw	r24, 0x01	; 1
}
    19c6:	08 95       	ret

000019c8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    19c8:	8e e5       	ldi	r24, 0x5E	; 94
    19ca:	9e e0       	ldi	r25, 0x0E	; 14
    19cc:	89 2b       	or	r24, r25
    19ce:	49 f0       	breq	.+18     	; 0x19e2 <_Z14serialEventRunv+0x1a>
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	89 2b       	or	r24, r25
    19d6:	29 f0       	breq	.+10     	; 0x19e2 <_Z14serialEventRunv+0x1a>
    19d8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_Z17Serial0_availablev>
    19dc:	81 11       	cpse	r24, r1
    19de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    19e2:	08 95       	ret

000019e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    19e4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    19e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    19e8:	df 01       	movw	r26, r30
    19ea:	a8 0f       	add	r26, r24
    19ec:	b1 1d       	adc	r27, r1
    19ee:	a3 5a       	subi	r26, 0xA3	; 163
    19f0:	bf 4f       	sbci	r27, 0xFF	; 255
    19f2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    19f4:	84 8d       	ldd	r24, Z+28	; 0x1c
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	8f 73       	andi	r24, 0x3F	; 63
    19fc:	99 27       	eor	r25, r25
    19fe:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1a00:	a6 89       	ldd	r26, Z+22	; 0x16
    1a02:	b7 89       	ldd	r27, Z+23	; 0x17
    1a04:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1a06:	a0 89       	ldd	r26, Z+16	; 0x10
    1a08:	b1 89       	ldd	r27, Z+17	; 0x11
    1a0a:	8c 91       	ld	r24, X
    1a0c:	80 64       	ori	r24, 0x40	; 64
    1a0e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1a10:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a12:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a14:	98 13       	cpse	r25, r24
    1a16:	06 c0       	rjmp	.+12     	; 0x1a24 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1a18:	02 88       	ldd	r0, Z+18	; 0x12
    1a1a:	f3 89       	ldd	r31, Z+19	; 0x13
    1a1c:	e0 2d       	mov	r30, r0
    1a1e:	80 81       	ld	r24, Z
    1a20:	8f 7d       	andi	r24, 0xDF	; 223
    1a22:	80 83       	st	Z, r24
    1a24:	08 95       	ret

00001a26 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	ec 01       	movw	r28, r24
  _written = true;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1a38:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a3c:	98 13       	cpse	r25, r24
    1a3e:	05 c0       	rjmp	.+10     	; 0x1a4a <_ZN14HardwareSerial5writeEh+0x24>
    1a40:	e8 89       	ldd	r30, Y+16	; 0x10
    1a42:	f9 89       	ldd	r31, Y+17	; 0x11
    1a44:	80 81       	ld	r24, Z
    1a46:	85 fd       	sbrc	r24, 5
    1a48:	24 c0       	rjmp	.+72     	; 0x1a92 <_ZN14HardwareSerial5writeEh+0x6c>
    1a4a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1a4c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a4e:	10 e0       	ldi	r17, 0x00	; 0
    1a50:	0f 5f       	subi	r16, 0xFF	; 255
    1a52:	1f 4f       	sbci	r17, 0xFF	; 255
    1a54:	0f 73       	andi	r16, 0x3F	; 63
    1a56:	11 27       	eor	r17, r17
    1a58:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1a5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a5c:	e8 12       	cpse	r14, r24
    1a5e:	0c c0       	rjmp	.+24     	; 0x1a78 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	07 fc       	sbrc	r0, 7
    1a64:	fa cf       	rjmp	.-12     	; 0x1a5a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1a66:	e8 89       	ldd	r30, Y+16	; 0x10
    1a68:	f9 89       	ldd	r31, Y+17	; 0x11
    1a6a:	80 81       	ld	r24, Z
    1a6c:	85 ff       	sbrs	r24, 5
    1a6e:	f5 cf       	rjmp	.-22     	; 0x1a5a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1a70:	ce 01       	movw	r24, r28
    1a72:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a76:	f1 cf       	rjmp	.-30     	; 0x1a5a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1a78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e8 0f       	add	r30, r24
    1a7e:	f1 1d       	adc	r31, r1
    1a80:	e3 5a       	subi	r30, 0xA3	; 163
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1a86:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1a88:	ea 89       	ldd	r30, Y+18	; 0x12
    1a8a:	fb 89       	ldd	r31, Y+19	; 0x13
    1a8c:	80 81       	ld	r24, Z
    1a8e:	80 62       	ori	r24, 0x20	; 32
    1a90:	07 c0       	rjmp	.+14     	; 0x1aa0 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1a92:	ee 89       	ldd	r30, Y+22	; 0x16
    1a94:	ff 89       	ldd	r31, Y+23	; 0x17
    1a96:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1a98:	e8 89       	ldd	r30, Y+16	; 0x10
    1a9a:	f9 89       	ldd	r31, Y+17	; 0x11
    1a9c:	80 81       	ld	r24, Z
    1a9e:	80 64       	ori	r24, 0x40	; 64
    1aa0:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	08 95       	ret

00001ab4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1aba:	88 8d       	ldd	r24, Y+24	; 0x18
    1abc:	88 23       	and	r24, r24
    1abe:	c9 f0       	breq	.+50     	; 0x1af2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1ac0:	ea 89       	ldd	r30, Y+18	; 0x12
    1ac2:	fb 89       	ldd	r31, Y+19	; 0x13
    1ac4:	80 81       	ld	r24, Z
    1ac6:	85 fd       	sbrc	r24, 5
    1ac8:	05 c0       	rjmp	.+10     	; 0x1ad4 <_ZN14HardwareSerial5flushEv+0x20>
    1aca:	a8 89       	ldd	r26, Y+16	; 0x10
    1acc:	b9 89       	ldd	r27, Y+17	; 0x11
    1ace:	8c 91       	ld	r24, X
    1ad0:	86 fd       	sbrc	r24, 6
    1ad2:	0f c0       	rjmp	.+30     	; 0x1af2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	07 fc       	sbrc	r0, 7
    1ad8:	f5 cf       	rjmp	.-22     	; 0x1ac4 <_ZN14HardwareSerial5flushEv+0x10>
    1ada:	80 81       	ld	r24, Z
    1adc:	85 ff       	sbrs	r24, 5
    1ade:	f2 cf       	rjmp	.-28     	; 0x1ac4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1ae0:	a8 89       	ldd	r26, Y+16	; 0x10
    1ae2:	b9 89       	ldd	r27, Y+17	; 0x11
    1ae4:	8c 91       	ld	r24, X
    1ae6:	85 ff       	sbrs	r24, 5
    1ae8:	ed cf       	rjmp	.-38     	; 0x1ac4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1aea:	ce 01       	movw	r24, r28
    1aec:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1af0:	e7 cf       	rjmp	.-50     	; 0x1ac0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret

00001af8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1af8:	cf 92       	push	r12
    1afa:	df 92       	push	r13
    1afc:	ef 92       	push	r14
    1afe:	ff 92       	push	r15
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	ec 01       	movw	r28, r24
    1b08:	6a 01       	movw	r12, r20
    1b0a:	7b 01       	movw	r14, r22
    1b0c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1b0e:	e8 89       	ldd	r30, Y+16	; 0x10
    1b10:	f9 89       	ldd	r31, Y+17	; 0x11
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b16:	41 15       	cp	r20, r1
    1b18:	51 4e       	sbci	r21, 0xE1	; 225
    1b1a:	61 05       	cpc	r22, r1
    1b1c:	71 05       	cpc	r23, r1
    1b1e:	b1 f0       	breq	.+44     	; 0x1b4c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	79 e0       	ldi	r23, 0x09	; 9
    1b24:	8d e3       	ldi	r24, 0x3D	; 61
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a7 01       	movw	r20, r14
    1b2a:	96 01       	movw	r18, r12
    1b2c:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodsi4>
    1b30:	da 01       	movw	r26, r20
    1b32:	c9 01       	movw	r24, r18
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	a1 09       	sbc	r26, r1
    1b38:	b1 09       	sbc	r27, r1
    1b3a:	b6 95       	lsr	r27
    1b3c:	a7 95       	ror	r26
    1b3e:	97 95       	ror	r25
    1b40:	87 95       	ror	r24
    1b42:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b44:	21 15       	cp	r18, r1
    1b46:	80 e1       	ldi	r24, 0x10	; 16
    1b48:	38 07       	cpc	r19, r24
    1b4a:	a8 f0       	brcs	.+42     	; 0x1b76 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1b4c:	e8 89       	ldd	r30, Y+16	; 0x10
    1b4e:	f9 89       	ldd	r31, Y+17	; 0x11
    1b50:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1b52:	60 e8       	ldi	r22, 0x80	; 128
    1b54:	74 e8       	ldi	r23, 0x84	; 132
    1b56:	8e e1       	ldi	r24, 0x1E	; 30
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a7 01       	movw	r20, r14
    1b5c:	96 01       	movw	r18, r12
    1b5e:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodsi4>
    1b62:	da 01       	movw	r26, r20
    1b64:	c9 01       	movw	r24, r18
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	a1 09       	sbc	r26, r1
    1b6a:	b1 09       	sbc	r27, r1
    1b6c:	b6 95       	lsr	r27
    1b6e:	a7 95       	ror	r26
    1b70:	97 95       	ror	r25
    1b72:	87 95       	ror	r24
    1b74:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1b76:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b78:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b7a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1b7c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b7e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b80:	20 83       	st	Z, r18

  _written = false;
    1b82:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1b84:	ec 89       	ldd	r30, Y+20	; 0x14
    1b86:	fd 89       	ldd	r31, Y+21	; 0x15
    1b88:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1b8a:	ea 89       	ldd	r30, Y+18	; 0x12
    1b8c:	fb 89       	ldd	r31, Y+19	; 0x13
    1b8e:	80 81       	ld	r24, Z
    1b90:	80 61       	ori	r24, 0x10	; 16
    1b92:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1b94:	ea 89       	ldd	r30, Y+18	; 0x12
    1b96:	fb 89       	ldd	r31, Y+19	; 0x13
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 60       	ori	r24, 0x08	; 8
    1b9c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1b9e:	ea 89       	ldd	r30, Y+18	; 0x12
    1ba0:	fb 89       	ldd	r31, Y+19	; 0x13
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 68       	ori	r24, 0x80	; 128
    1ba6:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1ba8:	ea 89       	ldd	r30, Y+18	; 0x12
    1baa:	fb 89       	ldd	r31, Y+19	; 0x13
    1bac:	80 81       	ld	r24, Z
    1bae:	8f 7d       	andi	r24, 0xDF	; 223
    1bb0:	80 83       	st	Z, r24
}
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	df 90       	pop	r13
    1bbe:	cf 90       	pop	r12
    1bc0:	08 95       	ret

00001bc2 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	ec 01       	movw	r28, r24
  // wait for transmission of outgoing data
  flush();
    1bc8:	e8 81       	ld	r30, Y
    1bca:	f9 81       	ldd	r31, Y+1	; 0x01
    1bcc:	06 80       	ldd	r0, Z+6	; 0x06
    1bce:	f7 81       	ldd	r31, Z+7	; 0x07
    1bd0:	e0 2d       	mov	r30, r0
    1bd2:	09 95       	icall

  cbi(*_ucsrb, RXEN0);
    1bd4:	ea 89       	ldd	r30, Y+18	; 0x12
    1bd6:	fb 89       	ldd	r31, Y+19	; 0x13
    1bd8:	80 81       	ld	r24, Z
    1bda:	8f 7e       	andi	r24, 0xEF	; 239
    1bdc:	80 83       	st	Z, r24
  cbi(*_ucsrb, TXEN0);
    1bde:	ea 89       	ldd	r30, Y+18	; 0x12
    1be0:	fb 89       	ldd	r31, Y+19	; 0x13
    1be2:	80 81       	ld	r24, Z
    1be4:	87 7f       	andi	r24, 0xF7	; 247
    1be6:	80 83       	st	Z, r24
  cbi(*_ucsrb, RXCIE0);
    1be8:	ea 89       	ldd	r30, Y+18	; 0x12
    1bea:	fb 89       	ldd	r31, Y+19	; 0x13
    1bec:	80 81       	ld	r24, Z
    1bee:	8f 77       	andi	r24, 0x7F	; 127
    1bf0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1bf2:	ea 89       	ldd	r30, Y+18	; 0x12
    1bf4:	fb 89       	ldd	r31, Y+19	; 0x13
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8f 7d       	andi	r24, 0xDF	; 223
    1bfa:	80 83       	st	Z, r24
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
    1bfc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bfe:	89 8f       	std	Y+25, r24	; 0x19
}
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	08 95       	ret

00001c0c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1c0c:	1f 92       	push	r1
    1c0e:	0f 92       	push	r0
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	0f 92       	push	r0
    1c14:	11 24       	eor	r1, r1
    1c16:	2f 93       	push	r18
    1c18:	8f 93       	push	r24
    1c1a:	9f 93       	push	r25
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1c20:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <Serial+0x10>
    1c24:	f0 91 78 04 	lds	r31, 0x0478	; 0x800478 <Serial+0x11>
    1c28:	80 81       	ld	r24, Z
    1c2a:	e0 91 7d 04 	lds	r30, 0x047D	; 0x80047d <Serial+0x16>
    1c2e:	f0 91 7e 04 	lds	r31, 0x047E	; 0x80047e <Serial+0x17>
    1c32:	82 fd       	sbrc	r24, 2
    1c34:	12 c0       	rjmp	.+36     	; 0x1c5a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1c36:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1c38:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <Serial+0x19>
    1c3c:	8f 5f       	subi	r24, 0xFF	; 255
    1c3e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1c40:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <Serial+0x1a>
    1c44:	82 17       	cp	r24, r18
    1c46:	51 f0       	breq	.+20     	; 0x1c5c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1c48:	e0 91 80 04 	lds	r30, 0x0480	; 0x800480 <Serial+0x19>
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	e9 59       	subi	r30, 0x99	; 153
    1c50:	fb 4f       	sbci	r31, 0xFB	; 251
    1c52:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1c54:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <Serial+0x19>
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1c5a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1c5c:	ff 91       	pop	r31
    1c5e:	ef 91       	pop	r30
    1c60:	9f 91       	pop	r25
    1c62:	8f 91       	pop	r24
    1c64:	2f 91       	pop	r18
    1c66:	0f 90       	pop	r0
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	0f 90       	pop	r0
    1c6c:	1f 90       	pop	r1
    1c6e:	18 95       	reti

00001c70 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1c70:	1f 92       	push	r1
    1c72:	0f 92       	push	r0
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	0f 92       	push	r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	2f 93       	push	r18
    1c7c:	3f 93       	push	r19
    1c7e:	4f 93       	push	r20
    1c80:	5f 93       	push	r21
    1c82:	6f 93       	push	r22
    1c84:	7f 93       	push	r23
    1c86:	8f 93       	push	r24
    1c88:	9f 93       	push	r25
    1c8a:	af 93       	push	r26
    1c8c:	bf 93       	push	r27
    1c8e:	ef 93       	push	r30
    1c90:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1c92:	87 e6       	ldi	r24, 0x67	; 103
    1c94:	94 e0       	ldi	r25, 0x04	; 4
    1c96:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1c9a:	ff 91       	pop	r31
    1c9c:	ef 91       	pop	r30
    1c9e:	bf 91       	pop	r27
    1ca0:	af 91       	pop	r26
    1ca2:	9f 91       	pop	r25
    1ca4:	8f 91       	pop	r24
    1ca6:	7f 91       	pop	r23
    1ca8:	6f 91       	pop	r22
    1caa:	5f 91       	pop	r21
    1cac:	4f 91       	pop	r20
    1cae:	3f 91       	pop	r19
    1cb0:	2f 91       	pop	r18
    1cb2:	0f 90       	pop	r0
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	0f 90       	pop	r0
    1cb8:	1f 90       	pop	r1
    1cba:	18 95       	reti

00001cbc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1cbc:	87 e6       	ldi	r24, 0x67	; 103
    1cbe:	94 e0       	ldi	r25, 0x04	; 4
    1cc0:	0e 94 a7 0c 	call	0x194e	; 0x194e <_ZN14HardwareSerial9availableEv>
    1cc4:	21 e0       	ldi	r18, 0x01	; 1
    1cc6:	89 2b       	or	r24, r25
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <_Z17Serial0_availablev+0x10>
    1cca:	20 e0       	ldi	r18, 0x00	; 0
}
    1ccc:	82 2f       	mov	r24, r18
    1cce:	08 95       	ret

00001cd0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1cd0:	e7 e6       	ldi	r30, 0x67	; 103
    1cd2:	f4 e0       	ldi	r31, 0x04	; 4
    1cd4:	13 82       	std	Z+3, r1	; 0x03
    1cd6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1cd8:	88 ee       	ldi	r24, 0xE8	; 232
    1cda:	93 e0       	ldi	r25, 0x03	; 3
    1cdc:	a0 e0       	ldi	r26, 0x00	; 0
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	84 83       	std	Z+4, r24	; 0x04
    1ce2:	95 83       	std	Z+5, r25	; 0x05
    1ce4:	a6 83       	std	Z+6, r26	; 0x06
    1ce6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1ce8:	8b e9       	ldi	r24, 0x9B	; 155
    1cea:	92 e0       	ldi	r25, 0x02	; 2
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	80 83       	st	Z, r24
    1cf0:	85 ec       	ldi	r24, 0xC5	; 197
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	95 87       	std	Z+13, r25	; 0x0d
    1cf6:	84 87       	std	Z+12, r24	; 0x0c
    1cf8:	84 ec       	ldi	r24, 0xC4	; 196
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	97 87       	std	Z+15, r25	; 0x0f
    1cfe:	86 87       	std	Z+14, r24	; 0x0e
    1d00:	80 ec       	ldi	r24, 0xC0	; 192
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	91 8b       	std	Z+17, r25	; 0x11
    1d06:	80 8b       	std	Z+16, r24	; 0x10
    1d08:	81 ec       	ldi	r24, 0xC1	; 193
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	93 8b       	std	Z+19, r25	; 0x13
    1d0e:	82 8b       	std	Z+18, r24	; 0x12
    1d10:	82 ec       	ldi	r24, 0xC2	; 194
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	95 8b       	std	Z+21, r25	; 0x15
    1d16:	84 8b       	std	Z+20, r24	; 0x14
    1d18:	86 ec       	ldi	r24, 0xC6	; 198
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	97 8b       	std	Z+23, r25	; 0x17
    1d1e:	86 8b       	std	Z+22, r24	; 0x16
    1d20:	11 8e       	std	Z+25, r1	; 0x19
    1d22:	12 8e       	std	Z+26, r1	; 0x1a
    1d24:	13 8e       	std	Z+27, r1	; 0x1b
    1d26:	14 8e       	std	Z+28, r1	; 0x1c
    1d28:	08 95       	ret

00001d2a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1d2a:	cf 92       	push	r12
    1d2c:	df 92       	push	r13
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	6c 01       	movw	r12, r24
    1d3c:	7a 01       	movw	r14, r20
    1d3e:	8b 01       	movw	r16, r22
  size_t n = 0;
    1d40:	c0 e0       	ldi	r28, 0x00	; 0
    1d42:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    1d44:	ce 15       	cp	r28, r14
    1d46:	df 05       	cpc	r29, r15
    1d48:	81 f0       	breq	.+32     	; 0x1d6a <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
    1d4a:	d8 01       	movw	r26, r16
    1d4c:	6d 91       	ld	r22, X+
    1d4e:	8d 01       	movw	r16, r26
    1d50:	d6 01       	movw	r26, r12
    1d52:	ed 91       	ld	r30, X+
    1d54:	fc 91       	ld	r31, X
    1d56:	01 90       	ld	r0, Z+
    1d58:	f0 81       	ld	r31, Z
    1d5a:	e0 2d       	mov	r30, r0
    1d5c:	c6 01       	movw	r24, r12
    1d5e:	09 95       	icall
    1d60:	89 2b       	or	r24, r25
    1d62:	11 f0       	breq	.+4      	; 0x1d68 <_ZN5Print5writeEPKhj+0x3e>
    1d64:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1d66:	ee cf       	rjmp	.-36     	; 0x1d44 <_ZN5Print5writeEPKhj+0x1a>
    1d68:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    1d6a:	c7 01       	movw	r24, r14
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	1f 91       	pop	r17
    1d72:	0f 91       	pop	r16
    1d74:	ff 90       	pop	r15
    1d76:	ef 90       	pop	r14
    1d78:	df 90       	pop	r13
    1d7a:	cf 90       	pop	r12
    1d7c:	08 95       	ret

00001d7e <_ZN11mp_MCP230085beginEh>:

mp_MCP23008 mp;
////////////////////////////////////////////////////////////////////////////////
// Multiprotocol Shield v2.0 implementation

void mp_MCP23008::begin(uint8_t addr) {
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	ec 01       	movw	r28, r24
  if (addr > 7) {
    addr = 7;
  }
  i2caddr = addr;
    1d84:	68 30       	cpi	r22, 0x08	; 8
    1d86:	08 f0       	brcs	.+2      	; 0x1d8a <_ZN11mp_MCP230085beginEh+0xc>
    1d88:	67 e0       	ldi	r22, 0x07	; 7
    1d8a:	68 83       	st	Y, r22

  Wire.begin();
    1d8c:	85 e0       	ldi	r24, 0x05	; 5
    1d8e:	95 e0       	ldi	r25, 0x05	; 5
    1d90:	0e 94 3a 10 	call	0x2074	; 0x2074 <_ZN7TwoWire5beginEv>

  // set defaults!
  Wire.beginTransmission(MCP23008_ADDRESS | i2caddr);
    1d94:	68 81       	ld	r22, Y
    1d96:	60 62       	ori	r22, 0x20	; 32
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	85 e0       	ldi	r24, 0x05	; 5
    1d9c:	95 e0       	ldi	r25, 0x05	; 5
    1d9e:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100
  Wire.write((byte)MCP23008_IODIR);
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	85 e0       	ldi	r24, 0x05	; 5
    1da6:	95 e0       	ldi	r25, 0x05	; 5
    1da8:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
  Wire.write((byte)0xFF);  // all inputs
    1dac:	6f ef       	ldi	r22, 0xFF	; 255
    1dae:	85 e0       	ldi	r24, 0x05	; 5
    1db0:	95 e0       	ldi	r25, 0x05	; 5
    1db2:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
  Wire.write((byte)0x00);
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	85 e0       	ldi	r24, 0x05	; 5
    1dba:	95 e0       	ldi	r25, 0x05	; 5
    1dbc:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
  Wire.write((byte)0x00);
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	85 e0       	ldi	r24, 0x05	; 5
    1dc4:	95 e0       	ldi	r25, 0x05	; 5
    1dc6:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
  Wire.write((byte)0x00);
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	85 e0       	ldi	r24, 0x05	; 5
    1dce:	95 e0       	ldi	r25, 0x05	; 5
    1dd0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
  Wire.write((byte)0x00);
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	85 e0       	ldi	r24, 0x05	; 5
    1dd8:	95 e0       	ldi	r25, 0x05	; 5
    1dda:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
  Wire.write((byte)0x00);
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	85 e0       	ldi	r24, 0x05	; 5
    1de2:	95 e0       	ldi	r25, 0x05	; 5
    1de4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
  Wire.write((byte)0x00);
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	85 e0       	ldi	r24, 0x05	; 5
    1dec:	95 e0       	ldi	r25, 0x05	; 5
    1dee:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
  Wire.write((byte)0x00);
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	85 e0       	ldi	r24, 0x05	; 5
    1df6:	95 e0       	ldi	r25, 0x05	; 5
    1df8:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
  Wire.write((byte)0x00);
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	85 e0       	ldi	r24, 0x05	; 5
    1e00:	95 e0       	ldi	r25, 0x05	; 5
    1e02:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
  Wire.write((byte)0x00);   
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	85 e0       	ldi	r24, 0x05	; 5
    1e0a:	95 e0       	ldi	r25, 0x05	; 5
    1e0c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
  Wire.send(0x00);
  Wire.send(0x00);
  Wire.send(0x00);
  Wire.send(0x00);  
#endif
  Wire.endTransmission();
    1e10:	85 e0       	ldi	r24, 0x05	; 5
    1e12:	95 e0       	ldi	r25, 0x05	; 5

}
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
  Wire.send(0x00);
  Wire.send(0x00);
  Wire.send(0x00);
  Wire.send(0x00);  
#endif
  Wire.endTransmission();
    1e18:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <_ZN7TwoWire15endTransmissionEv>

00001e1c <_ZN11mp_MCP230085beginEv>:

}

void mp_MCP23008::begin(void) {
  begin(0);
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <_ZN11mp_MCP230085beginEh>

00001e22 <_ZN11mp_MCP230086write8Ehh>:
  return Wire.receive();
#endif
}


void mp_MCP23008::write8(uint8_t addr, uint8_t data) {
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	d6 2f       	mov	r29, r22
    1e28:	c4 2f       	mov	r28, r20
  Wire.beginTransmission(MCP23008_ADDRESS | i2caddr);
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	60 81       	ld	r22, Z
    1e2e:	60 62       	ori	r22, 0x20	; 32
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	85 e0       	ldi	r24, 0x05	; 5
    1e34:	95 e0       	ldi	r25, 0x05	; 5
    1e36:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100
  Wire.write((byte)addr);
    1e3a:	6d 2f       	mov	r22, r29
    1e3c:	85 e0       	ldi	r24, 0x05	; 5
    1e3e:	95 e0       	ldi	r25, 0x05	; 5
    1e40:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
  Wire.write((byte)data);
    1e44:	6c 2f       	mov	r22, r28
    1e46:	85 e0       	ldi	r24, 0x05	; 5
    1e48:	95 e0       	ldi	r25, 0x05	; 5
    1e4a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
#else
  Wire.send(addr);  
  Wire.send(data);
#endif
  Wire.endTransmission();
    1e4e:	85 e0       	ldi	r24, 0x05	; 5
    1e50:	95 e0       	ldi	r25, 0x05	; 5
}
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
  Wire.write((byte)data);
#else
  Wire.send(addr);  
  Wire.send(data);
#endif
  Wire.endTransmission();
    1e56:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <_ZN7TwoWire15endTransmissionEv>

00001e5a <_ZN11mp_MCP230089writeGPIOEh>:
uint8_t mp_MCP23008::readGPIO(void) {
  // read the current GPIO input 
  return read8(MCP23008_GPIO);
}

void mp_MCP23008::writeGPIO(uint8_t gpio) {
    1e5a:	46 2f       	mov	r20, r22
  write8(MCP23008_GPIO, gpio);
    1e5c:	69 e0       	ldi	r22, 0x09	; 9
    1e5e:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <_ZN11mp_MCP230086write8Ehh>

00001e62 <_ZN11mp_MCP230085read8Eh>:

  // read the current GPIO
  return (readGPIO() >> p) & 0x1;
}

uint8_t mp_MCP23008::read8(uint8_t addr) {
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	ec 01       	movw	r28, r24
    1e6a:	16 2f       	mov	r17, r22
  Wire.beginTransmission(MCP23008_ADDRESS | i2caddr);
    1e6c:	68 81       	ld	r22, Y
    1e6e:	60 62       	ori	r22, 0x20	; 32
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	85 e0       	ldi	r24, 0x05	; 5
    1e74:	95 e0       	ldi	r25, 0x05	; 5
    1e76:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100
  Wire.write((byte)addr);   
    1e7a:	61 2f       	mov	r22, r17
    1e7c:	85 e0       	ldi	r24, 0x05	; 5
    1e7e:	95 e0       	ldi	r25, 0x05	; 5
    1e80:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN7TwoWire5writeEh>
#else
  Wire.send(addr);  
#endif
  Wire.endTransmission();
    1e84:	85 e0       	ldi	r24, 0x05	; 5
    1e86:	95 e0       	ldi	r25, 0x05	; 5
    1e88:	0e 94 ca 10 	call	0x2194	; 0x2194 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(MCP23008_ADDRESS | i2caddr, 1);
    1e8c:	68 81       	ld	r22, Y
    1e8e:	60 62       	ori	r22, 0x20	; 32
    1e90:	70 e0       	ldi	r23, 0x00	; 0
    1e92:	41 e0       	ldi	r20, 0x01	; 1
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	85 e0       	ldi	r24, 0x05	; 5
    1e98:	95 e0       	ldi	r25, 0x05	; 5
    1e9a:	0e 94 c7 10 	call	0x218e	; 0x218e <_ZN7TwoWire11requestFromEii>

#if ARDUINO >= 100
  return Wire.read();
    1e9e:	85 e0       	ldi	r24, 0x05	; 5
    1ea0:	95 e0       	ldi	r25, 0x05	; 5
    1ea2:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN7TwoWire4readEv>
#else
  return Wire.receive();
#endif
}
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	1f 91       	pop	r17
    1eac:	08 95       	ret

00001eae <_ZN11mp_MCP230087pinModeEhh>:

void mp_MCP23008::begin(void) {
  begin(0);
}

void mp_MCP23008::pinMode(uint8_t p, uint8_t d) {
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
  uint8_t iodir;
  

  // only 8 bits!
  if (p > 7)
    1eb6:	68 30       	cpi	r22, 0x08	; 8
    1eb8:	d0 f4       	brcc	.+52     	; 0x1eee <_ZN11mp_MCP230087pinModeEhh+0x40>
    1eba:	d4 2f       	mov	r29, r20
    1ebc:	c6 2f       	mov	r28, r22
    1ebe:	8c 01       	movw	r16, r24
    return;
  
  iodir = read8(MCP23008_IODIR);
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN11mp_MCP230085read8Eh>

  // set the pin and direction
  if (d == INPUT) {
    iodir |= 1 << p; 
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	01 c0       	rjmp	.+2      	; 0x1ece <_ZN11mp_MCP230087pinModeEhh+0x20>
    1ecc:	44 0f       	add	r20, r20
    1ece:	ca 95       	dec	r28
    1ed0:	ea f7       	brpl	.-6      	; 0x1ecc <_ZN11mp_MCP230087pinModeEhh+0x1e>
    return;
  
  iodir = read8(MCP23008_IODIR);

  // set the pin and direction
  if (d == INPUT) {
    1ed2:	d1 11       	cpse	r29, r1
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <_ZN11mp_MCP230087pinModeEhh+0x2c>
    iodir |= 1 << p; 
    1ed6:	48 2b       	or	r20, r24
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <_ZN11mp_MCP230087pinModeEhh+0x30>
  } else {
    iodir &= ~(1 << p);
    1eda:	40 95       	com	r20
    1edc:	48 23       	and	r20, r24
  }

  // write the new IODIR
  write8(MCP23008_IODIR, iodir);
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	c8 01       	movw	r24, r16
}
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
  } else {
    iodir &= ~(1 << p);
  }

  // write the new IODIR
  write8(MCP23008_IODIR, iodir);
    1eea:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <_ZN11mp_MCP230086write8Ehh>
}
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	08 95       	ret

00001ef8 <_ZN11mp_MCP230088readGPIOEv>:

uint8_t mp_MCP23008::readGPIO(void) {
  // read the current GPIO input 
  return read8(MCP23008_GPIO);
    1ef8:	69 e0       	ldi	r22, 0x09	; 9
    1efa:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <_ZN11mp_MCP230085read8Eh>

00001efe <_ZN11mp_MCP2300812digitalWriteEhh>:
void mp_MCP23008::writeGPIO(uint8_t gpio) {
  write8(MCP23008_GPIO, gpio);
}


void mp_MCP23008::digitalWrite(uint8_t p, uint8_t d) {
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
  uint8_t gpio;
  
  // only 8 bits!
  if (p > 7)
    1f06:	68 30       	cpi	r22, 0x08	; 8
    1f08:	c0 f4       	brcc	.+48     	; 0x1f3a <_ZN11mp_MCP2300812digitalWriteEhh+0x3c>
    1f0a:	d4 2f       	mov	r29, r20
    1f0c:	c6 2f       	mov	r28, r22
    1f0e:	8c 01       	movw	r16, r24
    return;

  // read the current GPIO output latches
  gpio = readGPIO();
    1f10:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <_ZN11mp_MCP230088readGPIOEv>

  // set the pin and direction
  if (d == HIGH) {
    gpio |= 1 << p; 
    1f14:	61 e0       	ldi	r22, 0x01	; 1
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <_ZN11mp_MCP2300812digitalWriteEhh+0x1e>
    1f1a:	66 0f       	add	r22, r22
    1f1c:	ca 95       	dec	r28
    1f1e:	ea f7       	brpl	.-6      	; 0x1f1a <_ZN11mp_MCP2300812digitalWriteEhh+0x1c>

  // read the current GPIO output latches
  gpio = readGPIO();

  // set the pin and direction
  if (d == HIGH) {
    1f20:	d1 30       	cpi	r29, 0x01	; 1
    1f22:	11 f4       	brne	.+4      	; 0x1f28 <_ZN11mp_MCP2300812digitalWriteEhh+0x2a>
    gpio |= 1 << p; 
    1f24:	68 2b       	or	r22, r24
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <_ZN11mp_MCP2300812digitalWriteEhh+0x2e>
  } else {
    gpio &= ~(1 << p);
    1f28:	60 95       	com	r22
    1f2a:	68 23       	and	r22, r24
  }

  // write the new GPIO
  writeGPIO(gpio);
    1f2c:	c8 01       	movw	r24, r16
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
  } else {
    gpio &= ~(1 << p);
  }

  // write the new GPIO
  writeGPIO(gpio);
    1f36:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <_ZN11mp_MCP230089writeGPIOEh>
}
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	08 95       	ret

00001f44 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1f44:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <_ZN7TwoWire14rxBufferLengthE>
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	20 91 36 05 	lds	r18, 0x0536	; 0x800536 <_ZN7TwoWire13rxBufferIndexE>
    1f4e:	82 1b       	sub	r24, r18
    1f50:	91 09       	sbc	r25, r1
    1f52:	08 95       	ret

00001f54 <_ZN7TwoWire4readEv>:
    1f54:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <_ZN7TwoWire13rxBufferIndexE>
    1f58:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <_ZN7TwoWire14rxBufferLengthE>
    1f5c:	98 17       	cp	r25, r24
    1f5e:	50 f4       	brcc	.+20     	; 0x1f74 <_ZN7TwoWire4readEv+0x20>
    1f60:	e9 2f       	mov	r30, r25
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	e9 5c       	subi	r30, 0xC9	; 201
    1f66:	fa 4f       	sbci	r31, 0xFA	; 250
    1f68:	20 81       	ld	r18, Z
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	9f 5f       	subi	r25, 0xFF	; 255
    1f6e:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <_ZN7TwoWire13rxBufferIndexE>
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <_ZN7TwoWire4readEv+0x24>
    1f74:	2f ef       	ldi	r18, 0xFF	; 255
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	c9 01       	movw	r24, r18
    1f7a:	08 95       	ret

00001f7c <_ZN7TwoWire4peekEv>:
    1f7c:	e0 91 36 05 	lds	r30, 0x0536	; 0x800536 <_ZN7TwoWire13rxBufferIndexE>
    1f80:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <_ZN7TwoWire14rxBufferLengthE>
    1f84:	e8 17       	cp	r30, r24
    1f86:	30 f4       	brcc	.+12     	; 0x1f94 <_ZN7TwoWire4peekEv+0x18>
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	e9 5c       	subi	r30, 0xC9	; 201
    1f8c:	fa 4f       	sbci	r31, 0xFA	; 250
    1f8e:	80 81       	ld	r24, Z
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	08 95       	ret
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	9f ef       	ldi	r25, 0xFF	; 255
    1f98:	08 95       	ret

00001f9a <_ZN7TwoWire5flushEv>:
    1f9a:	08 95       	ret

00001f9c <_ZN7TwoWire5writeEPKhj>:
    1f9c:	cf 92       	push	r12
    1f9e:	df 92       	push	r13
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	7c 01       	movw	r14, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8a 01       	movw	r16, r20
    1fb2:	20 91 11 05 	lds	r18, 0x0511	; 0x800511 <_ZN7TwoWire12transmittingE>
    1fb6:	22 23       	and	r18, r18
    1fb8:	89 f0       	breq	.+34     	; 0x1fdc <_ZN7TwoWire5writeEPKhj+0x40>
    1fba:	eb 01       	movw	r28, r22
    1fbc:	6b 01       	movw	r12, r22
    1fbe:	c4 0e       	add	r12, r20
    1fc0:	d5 1e       	adc	r13, r21
    1fc2:	cc 15       	cp	r28, r12
    1fc4:	dd 05       	cpc	r29, r13
    1fc6:	69 f0       	breq	.+26     	; 0x1fe2 <_ZN7TwoWire5writeEPKhj+0x46>
    1fc8:	69 91       	ld	r22, Y+
    1fca:	d7 01       	movw	r26, r14
    1fcc:	ed 91       	ld	r30, X+
    1fce:	fc 91       	ld	r31, X
    1fd0:	01 90       	ld	r0, Z+
    1fd2:	f0 81       	ld	r31, Z
    1fd4:	e0 2d       	mov	r30, r0
    1fd6:	c7 01       	movw	r24, r14
    1fd8:	09 95       	icall
    1fda:	f3 cf       	rjmp	.-26     	; 0x1fc2 <_ZN7TwoWire5writeEPKhj+0x26>
    1fdc:	64 2f       	mov	r22, r20
    1fde:	0e 94 8d 11 	call	0x231a	; 0x231a <twi_transmit>
    1fe2:	c8 01       	movw	r24, r16
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	1f 91       	pop	r17
    1fea:	0f 91       	pop	r16
    1fec:	ff 90       	pop	r15
    1fee:	ef 90       	pop	r14
    1ff0:	df 90       	pop	r13
    1ff2:	cf 90       	pop	r12
    1ff4:	08 95       	ret

00001ff6 <_ZN7TwoWire5writeEh>:
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	1f 92       	push	r1
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	69 83       	std	Y+1, r22	; 0x01
    2002:	20 91 11 05 	lds	r18, 0x0511	; 0x800511 <_ZN7TwoWire12transmittingE>
    2006:	22 23       	and	r18, r18
    2008:	d1 f0       	breq	.+52     	; 0x203e <_ZN7TwoWire5writeEh+0x48>
    200a:	20 91 12 05 	lds	r18, 0x0512	; 0x800512 <_ZN7TwoWire14txBufferLengthE>
    200e:	20 32       	cpi	r18, 0x20	; 32
    2010:	40 f0       	brcs	.+16     	; 0x2022 <_ZN7TwoWire5writeEh+0x2c>
    2012:	21 e0       	ldi	r18, 0x01	; 1
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	fc 01       	movw	r30, r24
    2018:	33 83       	std	Z+3, r19	; 0x03
    201a:	22 83       	std	Z+2, r18	; 0x02
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	15 c0       	rjmp	.+42     	; 0x204c <_ZN7TwoWire5writeEh+0x56>
    2022:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <_ZN7TwoWire13txBufferIndexE>
    2026:	e8 2f       	mov	r30, r24
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	ec 5e       	subi	r30, 0xEC	; 236
    202c:	fa 4f       	sbci	r31, 0xFA	; 250
    202e:	99 81       	ldd	r25, Y+1	; 0x01
    2030:	90 83       	st	Z, r25
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <_ZN7TwoWire13txBufferIndexE>
    2038:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <_ZN7TwoWire14txBufferLengthE>
    203c:	05 c0       	rjmp	.+10     	; 0x2048 <_ZN7TwoWire5writeEh+0x52>
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	ce 01       	movw	r24, r28
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	0e 94 8d 11 	call	0x231a	; 0x231a <twi_transmit>
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0f 90       	pop	r0
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	08 95       	ret

00002054 <_ZN7TwoWireC1Ev>:
    2054:	fc 01       	movw	r30, r24
    2056:	13 82       	std	Z+3, r1	; 0x03
    2058:	12 82       	std	Z+2, r1	; 0x02
    205a:	88 ee       	ldi	r24, 0xE8	; 232
    205c:	93 e0       	ldi	r25, 0x03	; 3
    205e:	a0 e0       	ldi	r26, 0x00	; 0
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	84 83       	std	Z+4, r24	; 0x04
    2064:	95 83       	std	Z+5, r25	; 0x05
    2066:	a6 83       	std	Z+6, r26	; 0x06
    2068:	b7 83       	std	Z+7, r27	; 0x07
    206a:	8d ea       	ldi	r24, 0xAD	; 173
    206c:	92 e0       	ldi	r25, 0x02	; 2
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	80 83       	st	Z, r24
    2072:	08 95       	ret

00002074 <_ZN7TwoWire5beginEv>:
    2074:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <_ZN7TwoWire13rxBufferIndexE>
    2078:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <_ZN7TwoWire14rxBufferLengthE>
    207c:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <_ZN7TwoWire13txBufferIndexE>
    2080:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <_ZN7TwoWire14txBufferLengthE>
    2084:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <twi_init>

00002088 <_ZN7TwoWire17beginTransmissionEh>:
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <_ZN7TwoWire12transmittingE>
    208e:	60 93 34 05 	sts	0x0534, r22	; 0x800534 <_ZN7TwoWire9txAddressE>
    2092:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <_ZN7TwoWire13txBufferIndexE>
    2096:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <_ZN7TwoWire14txBufferLengthE>
    209a:	08 95       	ret

0000209c <_ZN7TwoWire17beginTransmissionEi>:
    209c:	0c 94 44 10 	jmp	0x2088	; 0x2088 <_ZN7TwoWire17beginTransmissionEh>

000020a0 <_ZN7TwoWire15endTransmissionEh>:
    20a0:	0f 93       	push	r16
    20a2:	06 2f       	mov	r16, r22
    20a4:	21 e0       	ldi	r18, 0x01	; 1
    20a6:	40 91 12 05 	lds	r20, 0x0512	; 0x800512 <_ZN7TwoWire14txBufferLengthE>
    20aa:	64 e1       	ldi	r22, 0x14	; 20
    20ac:	75 e0       	ldi	r23, 0x05	; 5
    20ae:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <_ZN7TwoWire9txAddressE>
    20b2:	0e 94 37 11 	call	0x226e	; 0x226e <twi_writeTo>
    20b6:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <_ZN7TwoWire13txBufferIndexE>
    20ba:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <_ZN7TwoWire14txBufferLengthE>
    20be:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <_ZN7TwoWire12transmittingE>
    20c2:	0f 91       	pop	r16
    20c4:	08 95       	ret

000020c6 <_ZN7TwoWire11requestFromEhhmhh>:
    20c6:	4f 92       	push	r4
    20c8:	5f 92       	push	r5
    20ca:	6f 92       	push	r6
    20cc:	7f 92       	push	r7
    20ce:	af 92       	push	r10
    20d0:	bf 92       	push	r11
    20d2:	cf 92       	push	r12
    20d4:	ef 92       	push	r14
    20d6:	ff 92       	push	r15
    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	cf 93       	push	r28
    20de:	df 93       	push	r29
    20e0:	5c 01       	movw	r10, r24
    20e2:	f6 2e       	mov	r15, r22
    20e4:	d4 2f       	mov	r29, r20
    20e6:	28 01       	movw	r4, r16
    20e8:	39 01       	movw	r6, r18
    20ea:	ee 20       	and	r14, r14
    20ec:	21 f1       	breq	.+72     	; 0x2136 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    20ee:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN7TwoWire17beginTransmissionEh>
    20f2:	ce 2d       	mov	r28, r14
    20f4:	c4 30       	cpi	r28, 0x04	; 4
    20f6:	08 f0       	brcs	.+2      	; 0x20fa <_ZN7TwoWire11requestFromEhhmhh+0x34>
    20f8:	c3 e0       	ldi	r28, 0x03	; 3
    20fa:	c1 50       	subi	r28, 0x01	; 1
    20fc:	c0 f0       	brcs	.+48     	; 0x212e <_ZN7TwoWire11requestFromEhhmhh+0x68>
    20fe:	28 e0       	ldi	r18, 0x08	; 8
    2100:	c2 9f       	mul	r28, r18
    2102:	c0 01       	movw	r24, r0
    2104:	11 24       	eor	r1, r1
    2106:	a3 01       	movw	r20, r6
    2108:	92 01       	movw	r18, r4
    210a:	04 c0       	rjmp	.+8      	; 0x2114 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    210c:	56 95       	lsr	r21
    210e:	47 95       	ror	r20
    2110:	37 95       	ror	r19
    2112:	27 95       	ror	r18
    2114:	8a 95       	dec	r24
    2116:	d2 f7       	brpl	.-12     	; 0x210c <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2118:	ca 01       	movw	r24, r20
    211a:	b9 01       	movw	r22, r18
    211c:	d5 01       	movw	r26, r10
    211e:	ed 91       	ld	r30, X+
    2120:	fc 91       	ld	r31, X
    2122:	01 90       	ld	r0, Z+
    2124:	f0 81       	ld	r31, Z
    2126:	e0 2d       	mov	r30, r0
    2128:	c5 01       	movw	r24, r10
    212a:	09 95       	icall
    212c:	e6 cf       	rjmp	.-52     	; 0x20fa <_ZN7TwoWire11requestFromEhhmhh+0x34>
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	c5 01       	movw	r24, r10
    2132:	0e 94 50 10 	call	0x20a0	; 0x20a0 <_ZN7TwoWire15endTransmissionEh>
    2136:	4d 2f       	mov	r20, r29
    2138:	d1 32       	cpi	r29, 0x21	; 33
    213a:	08 f0       	brcs	.+2      	; 0x213e <_ZN7TwoWire11requestFromEhhmhh+0x78>
    213c:	40 e2       	ldi	r20, 0x20	; 32
    213e:	2c 2d       	mov	r18, r12
    2140:	67 e3       	ldi	r22, 0x37	; 55
    2142:	75 e0       	ldi	r23, 0x05	; 5
    2144:	8f 2d       	mov	r24, r15
    2146:	0e 94 ef 10 	call	0x21de	; 0x21de <twi_readFrom>
    214a:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <_ZN7TwoWire13rxBufferIndexE>
    214e:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <_ZN7TwoWire14rxBufferLengthE>
    2152:	df 91       	pop	r29
    2154:	cf 91       	pop	r28
    2156:	1f 91       	pop	r17
    2158:	0f 91       	pop	r16
    215a:	ff 90       	pop	r15
    215c:	ef 90       	pop	r14
    215e:	cf 90       	pop	r12
    2160:	bf 90       	pop	r11
    2162:	af 90       	pop	r10
    2164:	7f 90       	pop	r7
    2166:	6f 90       	pop	r6
    2168:	5f 90       	pop	r5
    216a:	4f 90       	pop	r4
    216c:	08 95       	ret

0000216e <_ZN7TwoWire11requestFromEhhh>:
    216e:	cf 92       	push	r12
    2170:	ef 92       	push	r14
    2172:	0f 93       	push	r16
    2174:	1f 93       	push	r17
    2176:	c2 2e       	mov	r12, r18
    2178:	e1 2c       	mov	r14, r1
    217a:	00 e0       	ldi	r16, 0x00	; 0
    217c:	10 e0       	ldi	r17, 0x00	; 0
    217e:	98 01       	movw	r18, r16
    2180:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_ZN7TwoWire11requestFromEhhmhh>
    2184:	1f 91       	pop	r17
    2186:	0f 91       	pop	r16
    2188:	ef 90       	pop	r14
    218a:	cf 90       	pop	r12
    218c:	08 95       	ret

0000218e <_ZN7TwoWire11requestFromEii>:
    218e:	21 e0       	ldi	r18, 0x01	; 1
    2190:	0c 94 b7 10 	jmp	0x216e	; 0x216e <_ZN7TwoWire11requestFromEhhh>

00002194 <_ZN7TwoWire15endTransmissionEv>:
    2194:	61 e0       	ldi	r22, 0x01	; 1
    2196:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <_ZN7TwoWire15endTransmissionEh>

0000219a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    219a:	85 e0       	ldi	r24, 0x05	; 5
    219c:	95 e0       	ldi	r25, 0x05	; 5
    219e:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <_ZN7TwoWireC1Ev>

000021a2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    21a2:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <twi_state>
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <twi_sendStop>
    21ac:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <twi_inRepStart>
    21b0:	61 e0       	ldi	r22, 0x01	; 1
    21b2:	82 e1       	ldi	r24, 0x12	; 18
    21b4:	0e 94 9d 03 	call	0x73a	; 0x73a <digitalWrite>
    21b8:	61 e0       	ldi	r22, 0x01	; 1
    21ba:	83 e1       	ldi	r24, 0x13	; 19
    21bc:	0e 94 9d 03 	call	0x73a	; 0x73a <digitalWrite>
    21c0:	e9 eb       	ldi	r30, 0xB9	; 185
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	8e 7f       	andi	r24, 0xFE	; 254
    21c8:	80 83       	st	Z, r24
    21ca:	80 81       	ld	r24, Z
    21cc:	8d 7f       	andi	r24, 0xFD	; 253
    21ce:	80 83       	st	Z, r24
    21d0:	88 e4       	ldi	r24, 0x48	; 72
    21d2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    21d6:	85 e4       	ldi	r24, 0x45	; 69
    21d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    21dc:	08 95       	ret

000021de <twi_readFrom>:
    21de:	41 32       	cpi	r20, 0x21	; 33
    21e0:	08 f0       	brcs	.+2      	; 0x21e4 <twi_readFrom+0x6>
    21e2:	43 c0       	rjmp	.+134    	; 0x226a <twi_readFrom+0x8c>
    21e4:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <twi_state>
    21e8:	91 11       	cpse	r25, r1
    21ea:	fc cf       	rjmp	.-8      	; 0x21e4 <twi_readFrom+0x6>
    21ec:	91 e0       	ldi	r25, 0x01	; 1
    21ee:	90 93 c4 05 	sts	0x05C4, r25	; 0x8005c4 <twi_state>
    21f2:	20 93 c2 05 	sts	0x05C2, r18	; 0x8005c2 <twi_sendStop>
    21f6:	2f ef       	ldi	r18, 0xFF	; 255
    21f8:	20 93 57 05 	sts	0x0557, r18	; 0x800557 <twi_error>
    21fc:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <twi_masterBufferIndex>
    2200:	24 0f       	add	r18, r20
    2202:	20 93 9b 05 	sts	0x059B, r18	; 0x80059b <twi_masterBufferLength>
    2206:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <twi_slarw>
    220a:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <twi_slarw>
    220e:	88 0f       	add	r24, r24
    2210:	89 2b       	or	r24, r25
    2212:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <twi_slarw>
    2216:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <twi_inRepStart>
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	61 f4       	brne	.+24     	; 0x2236 <twi_readFrom+0x58>
    221e:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <twi_inRepStart>
    2222:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <twi_slarw>
    2226:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    222a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    222e:	83 fd       	sbrc	r24, 3
    2230:	f8 cf       	rjmp	.-16     	; 0x2222 <twi_readFrom+0x44>
    2232:	85 ec       	ldi	r24, 0xC5	; 197
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <twi_readFrom+0x5a>
    2236:	85 ee       	ldi	r24, 0xE5	; 229
    2238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    223c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <twi_state>
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	e1 f3       	breq	.-8      	; 0x223c <twi_readFrom+0x5e>
    2244:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <twi_masterBufferIndex>
    2248:	84 17       	cp	r24, r20
    224a:	10 f4       	brcc	.+4      	; 0x2250 <twi_readFrom+0x72>
    224c:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <twi_masterBufferIndex>
    2250:	ad e9       	ldi	r26, 0x9D	; 157
    2252:	b5 e0       	ldi	r27, 0x05	; 5
    2254:	96 2f       	mov	r25, r22
    2256:	fb 01       	movw	r30, r22
    2258:	8e 2f       	mov	r24, r30
    225a:	89 1b       	sub	r24, r25
    225c:	84 17       	cp	r24, r20
    225e:	18 f4       	brcc	.+6      	; 0x2266 <twi_readFrom+0x88>
    2260:	8d 91       	ld	r24, X+
    2262:	81 93       	st	Z+, r24
    2264:	f9 cf       	rjmp	.-14     	; 0x2258 <twi_readFrom+0x7a>
    2266:	84 2f       	mov	r24, r20
    2268:	08 95       	ret
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	08 95       	ret

0000226e <twi_writeTo>:
    226e:	0f 93       	push	r16
    2270:	41 32       	cpi	r20, 0x21	; 33
    2272:	08 f0       	brcs	.+2      	; 0x2276 <twi_writeTo+0x8>
    2274:	4a c0       	rjmp	.+148    	; 0x230a <twi_writeTo+0x9c>
    2276:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <twi_state>
    227a:	91 11       	cpse	r25, r1
    227c:	fc cf       	rjmp	.-8      	; 0x2276 <twi_writeTo+0x8>
    227e:	32 e0       	ldi	r19, 0x02	; 2
    2280:	30 93 c4 05 	sts	0x05C4, r19	; 0x8005c4 <twi_state>
    2284:	00 93 c2 05 	sts	0x05C2, r16	; 0x8005c2 <twi_sendStop>
    2288:	3f ef       	ldi	r19, 0xFF	; 255
    228a:	30 93 57 05 	sts	0x0557, r19	; 0x800557 <twi_error>
    228e:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <twi_masterBufferIndex>
    2292:	40 93 9b 05 	sts	0x059B, r20	; 0x80059b <twi_masterBufferLength>
    2296:	56 2f       	mov	r21, r22
    2298:	ad e9       	ldi	r26, 0x9D	; 157
    229a:	b5 e0       	ldi	r27, 0x05	; 5
    229c:	fb 01       	movw	r30, r22
    229e:	3e 2f       	mov	r19, r30
    22a0:	35 1b       	sub	r19, r21
    22a2:	34 17       	cp	r19, r20
    22a4:	18 f4       	brcc	.+6      	; 0x22ac <twi_writeTo+0x3e>
    22a6:	31 91       	ld	r19, Z+
    22a8:	3d 93       	st	X+, r19
    22aa:	f9 cf       	rjmp	.-14     	; 0x229e <twi_writeTo+0x30>
    22ac:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <twi_slarw>
    22b0:	30 91 c3 05 	lds	r19, 0x05C3	; 0x8005c3 <twi_slarw>
    22b4:	88 0f       	add	r24, r24
    22b6:	83 2b       	or	r24, r19
    22b8:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <twi_slarw>
    22bc:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <twi_inRepStart>
    22c0:	81 30       	cpi	r24, 0x01	; 1
    22c2:	61 f4       	brne	.+24     	; 0x22dc <twi_writeTo+0x6e>
    22c4:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <twi_inRepStart>
    22c8:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <twi_slarw>
    22cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    22d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    22d4:	83 fd       	sbrc	r24, 3
    22d6:	f8 cf       	rjmp	.-16     	; 0x22c8 <twi_writeTo+0x5a>
    22d8:	85 ec       	ldi	r24, 0xC5	; 197
    22da:	01 c0       	rjmp	.+2      	; 0x22de <twi_writeTo+0x70>
    22dc:	85 ee       	ldi	r24, 0xE5	; 229
    22de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    22e2:	22 23       	and	r18, r18
    22e4:	21 f0       	breq	.+8      	; 0x22ee <twi_writeTo+0x80>
    22e6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <twi_state>
    22ea:	82 30       	cpi	r24, 0x02	; 2
    22ec:	d1 f3       	breq	.-12     	; 0x22e2 <twi_writeTo+0x74>
    22ee:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <twi_error>
    22f2:	8f 3f       	cpi	r24, 0xFF	; 255
    22f4:	79 f0       	breq	.+30     	; 0x2314 <twi_writeTo+0xa6>
    22f6:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <twi_error>
    22fa:	80 32       	cpi	r24, 0x20	; 32
    22fc:	41 f0       	breq	.+16     	; 0x230e <twi_writeTo+0xa0>
    22fe:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <twi_error>
    2302:	80 33       	cpi	r24, 0x30	; 48
    2304:	31 f0       	breq	.+12     	; 0x2312 <twi_writeTo+0xa4>
    2306:	94 e0       	ldi	r25, 0x04	; 4
    2308:	05 c0       	rjmp	.+10     	; 0x2314 <twi_writeTo+0xa6>
    230a:	91 e0       	ldi	r25, 0x01	; 1
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <twi_writeTo+0xa6>
    230e:	92 e0       	ldi	r25, 0x02	; 2
    2310:	01 c0       	rjmp	.+2      	; 0x2314 <twi_writeTo+0xa6>
    2312:	93 e0       	ldi	r25, 0x03	; 3
    2314:	89 2f       	mov	r24, r25
    2316:	0f 91       	pop	r16
    2318:	08 95       	ret

0000231a <twi_transmit>:
    231a:	40 91 79 05 	lds	r20, 0x0579	; 0x800579 <twi_txBufferLength>
    231e:	26 2f       	mov	r18, r22
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	24 0f       	add	r18, r20
    2324:	31 1d       	adc	r19, r1
    2326:	21 32       	cpi	r18, 0x21	; 33
    2328:	31 05       	cpc	r19, r1
    232a:	dc f4       	brge	.+54     	; 0x2362 <twi_transmit+0x48>
    232c:	20 91 c4 05 	lds	r18, 0x05C4	; 0x8005c4 <twi_state>
    2330:	24 30       	cpi	r18, 0x04	; 4
    2332:	c9 f4       	brne	.+50     	; 0x2366 <twi_transmit+0x4c>
    2334:	fc 01       	movw	r30, r24
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	86 17       	cp	r24, r22
    233c:	58 f4       	brcc	.+22     	; 0x2354 <twi_transmit+0x3a>
    233e:	30 91 79 05 	lds	r19, 0x0579	; 0x800579 <twi_txBufferLength>
    2342:	21 91       	ld	r18, Z+
    2344:	dc 01       	movw	r26, r24
    2346:	a5 58       	subi	r26, 0x85	; 133
    2348:	ba 4f       	sbci	r27, 0xFA	; 250
    234a:	a3 0f       	add	r26, r19
    234c:	b1 1d       	adc	r27, r1
    234e:	2c 93       	st	X, r18
    2350:	01 96       	adiw	r24, 0x01	; 1
    2352:	f3 cf       	rjmp	.-26     	; 0x233a <twi_transmit+0x20>
    2354:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <twi_txBufferLength>
    2358:	68 0f       	add	r22, r24
    235a:	60 93 79 05 	sts	0x0579, r22	; 0x800579 <twi_txBufferLength>
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	08 95       	ret
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	08 95       	ret
    2366:	82 e0       	ldi	r24, 0x02	; 2
    2368:	08 95       	ret

0000236a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    236a:	85 ed       	ldi	r24, 0xD5	; 213
    236c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2370:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2374:	84 fd       	sbrc	r24, 4
    2376:	fc cf       	rjmp	.-8      	; 0x2370 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2378:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <twi_state>
    237c:	08 95       	ret

0000237e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    237e:	85 ec       	ldi	r24, 0xC5	; 197
    2380:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2384:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <twi_state>
    2388:	08 95       	ret

0000238a <__vector_24>:
}

ISR(TWI_vect)
{
    238a:	1f 92       	push	r1
    238c:	0f 92       	push	r0
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	0f 92       	push	r0
    2392:	11 24       	eor	r1, r1
    2394:	2f 93       	push	r18
    2396:	3f 93       	push	r19
    2398:	4f 93       	push	r20
    239a:	5f 93       	push	r21
    239c:	6f 93       	push	r22
    239e:	7f 93       	push	r23
    23a0:	8f 93       	push	r24
    23a2:	9f 93       	push	r25
    23a4:	af 93       	push	r26
    23a6:	bf 93       	push	r27
    23a8:	ef 93       	push	r30
    23aa:	ff 93       	push	r31
  switch(TW_STATUS){
    23ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    23b0:	88 7f       	andi	r24, 0xF8	; 248
    23b2:	80 36       	cpi	r24, 0x60	; 96
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <__vector_24+0x2e>
    23b6:	9e c0       	rjmp	.+316    	; 0x24f4 <__vector_24+0x16a>
    23b8:	78 f5       	brcc	.+94     	; 0x2418 <__vector_24+0x8e>
    23ba:	88 32       	cpi	r24, 0x28	; 40
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <__vector_24+0x36>
    23be:	5d c0       	rjmp	.+186    	; 0x247a <__vector_24+0xf0>
    23c0:	90 f4       	brcc	.+36     	; 0x23e6 <__vector_24+0x5c>
    23c2:	80 31       	cpi	r24, 0x10	; 16
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <__vector_24+0x3e>
    23c6:	56 c0       	rjmp	.+172    	; 0x2474 <__vector_24+0xea>
    23c8:	38 f4       	brcc	.+14     	; 0x23d8 <__vector_24+0x4e>
    23ca:	88 23       	and	r24, r24
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <__vector_24+0x46>
    23ce:	f5 c0       	rjmp	.+490    	; 0x25ba <__vector_24+0x230>
    23d0:	88 30       	cpi	r24, 0x08	; 8
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <__vector_24+0x4c>
    23d4:	4f c0       	rjmp	.+158    	; 0x2474 <__vector_24+0xea>
    23d6:	f5 c0       	rjmp	.+490    	; 0x25c2 <__vector_24+0x238>
    23d8:	88 31       	cpi	r24, 0x18	; 24
    23da:	09 f4       	brne	.+2      	; 0x23de <__vector_24+0x54>
    23dc:	4e c0       	rjmp	.+156    	; 0x247a <__vector_24+0xf0>
    23de:	80 32       	cpi	r24, 0x20	; 32
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <__vector_24+0x5a>
    23e2:	5f c0       	rjmp	.+190    	; 0x24a2 <__vector_24+0x118>
    23e4:	ee c0       	rjmp	.+476    	; 0x25c2 <__vector_24+0x238>
    23e6:	80 34       	cpi	r24, 0x40	; 64
    23e8:	09 f4       	brne	.+2      	; 0x23ec <__vector_24+0x62>
    23ea:	6a c0       	rjmp	.+212    	; 0x24c0 <__vector_24+0x136>
    23ec:	58 f4       	brcc	.+22     	; 0x2404 <__vector_24+0x7a>
    23ee:	80 33       	cpi	r24, 0x30	; 48
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <__vector_24+0x6a>
    23f2:	57 c0       	rjmp	.+174    	; 0x24a2 <__vector_24+0x118>
    23f4:	88 33       	cpi	r24, 0x38	; 56
    23f6:	09 f0       	breq	.+2      	; 0x23fa <__vector_24+0x70>
    23f8:	e4 c0       	rjmp	.+456    	; 0x25c2 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    23fa:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <twi_error>
      twi_releaseBus();
    23fe:	0e 94 bf 11 	call	0x237e	; 0x237e <twi_releaseBus>
      break;
    2402:	df c0       	rjmp	.+446    	; 0x25c2 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2404:	80 35       	cpi	r24, 0x50	; 80
    2406:	09 f4       	brne	.+2      	; 0x240a <__vector_24+0x80>
    2408:	4f c0       	rjmp	.+158    	; 0x24a8 <__vector_24+0x11e>
    240a:	88 35       	cpi	r24, 0x58	; 88
    240c:	09 f4       	brne	.+2      	; 0x2410 <__vector_24+0x86>
    240e:	5d c0       	rjmp	.+186    	; 0x24ca <__vector_24+0x140>
    2410:	88 34       	cpi	r24, 0x48	; 72
    2412:	09 f0       	breq	.+2      	; 0x2416 <__vector_24+0x8c>
    2414:	d6 c0       	rjmp	.+428    	; 0x25c2 <__vector_24+0x238>
    2416:	d3 c0       	rjmp	.+422    	; 0x25be <__vector_24+0x234>
    2418:	88 39       	cpi	r24, 0x98	; 152
    241a:	09 f4       	brne	.+2      	; 0x241e <__vector_24+0x94>
    241c:	c4 c0       	rjmp	.+392    	; 0x25a6 <__vector_24+0x21c>
    241e:	a8 f4       	brcc	.+42     	; 0x244a <__vector_24+0xc0>
    2420:	88 37       	cpi	r24, 0x78	; 120
    2422:	09 f4       	brne	.+2      	; 0x2426 <__vector_24+0x9c>
    2424:	67 c0       	rjmp	.+206    	; 0x24f4 <__vector_24+0x16a>
    2426:	38 f4       	brcc	.+14     	; 0x2436 <__vector_24+0xac>
    2428:	88 36       	cpi	r24, 0x68	; 104
    242a:	09 f4       	brne	.+2      	; 0x242e <__vector_24+0xa4>
    242c:	63 c0       	rjmp	.+198    	; 0x24f4 <__vector_24+0x16a>
    242e:	80 37       	cpi	r24, 0x70	; 112
    2430:	09 f4       	brne	.+2      	; 0x2434 <__vector_24+0xaa>
    2432:	60 c0       	rjmp	.+192    	; 0x24f4 <__vector_24+0x16a>
    2434:	c6 c0       	rjmp	.+396    	; 0x25c2 <__vector_24+0x238>
    2436:	88 38       	cpi	r24, 0x88	; 136
    2438:	09 f4       	brne	.+2      	; 0x243c <__vector_24+0xb2>
    243a:	b5 c0       	rjmp	.+362    	; 0x25a6 <__vector_24+0x21c>
    243c:	80 39       	cpi	r24, 0x90	; 144
    243e:	09 f4       	brne	.+2      	; 0x2442 <__vector_24+0xb8>
    2440:	5f c0       	rjmp	.+190    	; 0x2500 <__vector_24+0x176>
    2442:	80 38       	cpi	r24, 0x80	; 128
    2444:	09 f0       	breq	.+2      	; 0x2448 <__vector_24+0xbe>
    2446:	bd c0       	rjmp	.+378    	; 0x25c2 <__vector_24+0x238>
    2448:	5b c0       	rjmp	.+182    	; 0x2500 <__vector_24+0x176>
    244a:	80 3b       	cpi	r24, 0xB0	; 176
    244c:	09 f4       	brne	.+2      	; 0x2450 <__vector_24+0xc6>
    244e:	83 c0       	rjmp	.+262    	; 0x2556 <__vector_24+0x1cc>
    2450:	38 f4       	brcc	.+14     	; 0x2460 <__vector_24+0xd6>
    2452:	80 3a       	cpi	r24, 0xA0	; 160
    2454:	09 f4       	brne	.+2      	; 0x2458 <__vector_24+0xce>
    2456:	66 c0       	rjmp	.+204    	; 0x2524 <__vector_24+0x19a>
    2458:	88 3a       	cpi	r24, 0xA8	; 168
    245a:	09 f4       	brne	.+2      	; 0x245e <__vector_24+0xd4>
    245c:	7c c0       	rjmp	.+248    	; 0x2556 <__vector_24+0x1cc>
    245e:	b1 c0       	rjmp	.+354    	; 0x25c2 <__vector_24+0x238>
    2460:	80 3c       	cpi	r24, 0xC0	; 192
    2462:	09 f4       	brne	.+2      	; 0x2466 <__vector_24+0xdc>
    2464:	a4 c0       	rjmp	.+328    	; 0x25ae <__vector_24+0x224>
    2466:	88 3c       	cpi	r24, 0xC8	; 200
    2468:	09 f4       	brne	.+2      	; 0x246c <__vector_24+0xe2>
    246a:	a1 c0       	rjmp	.+322    	; 0x25ae <__vector_24+0x224>
    246c:	88 3b       	cpi	r24, 0xB8	; 184
    246e:	09 f4       	brne	.+2      	; 0x2472 <__vector_24+0xe8>
    2470:	87 c0       	rjmp	.+270    	; 0x2580 <__vector_24+0x1f6>
    2472:	a7 c0       	rjmp	.+334    	; 0x25c2 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2474:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <twi_slarw>
    2478:	10 c0       	rjmp	.+32     	; 0x249a <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    247a:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <twi_masterBufferIndex>
    247e:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <twi_masterBufferLength>
    2482:	98 17       	cp	r25, r24
    2484:	70 f5       	brcc	.+92     	; 0x24e2 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2486:	e0 91 9c 05 	lds	r30, 0x059C	; 0x80059c <twi_masterBufferIndex>
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	8e 0f       	add	r24, r30
    248e:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <twi_masterBufferIndex>
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	e3 56       	subi	r30, 0x63	; 99
    2496:	fa 4f       	sbci	r31, 0xFA	; 250
    2498:	80 81       	ld	r24, Z
    249a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    249e:	85 ec       	ldi	r24, 0xC5	; 197
    24a0:	83 c0       	rjmp	.+262    	; 0x25a8 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    24a2:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <twi_error>
    24a6:	8b c0       	rjmp	.+278    	; 0x25be <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    24a8:	e0 91 9c 05 	lds	r30, 0x059C	; 0x80059c <twi_masterBufferIndex>
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	8e 0f       	add	r24, r30
    24b0:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <twi_masterBufferIndex>
    24b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	e3 56       	subi	r30, 0x63	; 99
    24bc:	fa 4f       	sbci	r31, 0xFA	; 250
    24be:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    24c0:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <twi_masterBufferIndex>
    24c4:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <twi_masterBufferLength>
    24c8:	6b c0       	rjmp	.+214    	; 0x25a0 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    24ca:	e0 91 9c 05 	lds	r30, 0x059C	; 0x80059c <twi_masterBufferIndex>
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	8e 0f       	add	r24, r30
    24d2:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <twi_masterBufferIndex>
    24d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	e3 56       	subi	r30, 0x63	; 99
    24de:	fa 4f       	sbci	r31, 0xFA	; 250
    24e0:	80 83       	st	Z, r24
	if (twi_sendStop)
    24e2:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <twi_sendStop>
    24e6:	81 11       	cpse	r24, r1
    24e8:	6a c0       	rjmp	.+212    	; 0x25be <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    24f0:	84 ea       	ldi	r24, 0xA4	; 164
    24f2:	5e c0       	rjmp	.+188    	; 0x25b0 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    24f4:	83 e0       	ldi	r24, 0x03	; 3
    24f6:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    24fa:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <twi_rxBufferIndex>
    24fe:	cf cf       	rjmp	.-98     	; 0x249e <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2500:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <twi_rxBufferIndex>
    2504:	80 32       	cpi	r24, 0x20	; 32
    2506:	08 f0       	brcs	.+2      	; 0x250a <__vector_24+0x180>
    2508:	4e c0       	rjmp	.+156    	; 0x25a6 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    250a:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <twi_rxBufferIndex>
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	8e 0f       	add	r24, r30
    2512:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <twi_rxBufferIndex>
    2516:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	e7 5a       	subi	r30, 0xA7	; 167
    251e:	fa 4f       	sbci	r31, 0xFA	; 250
    2520:	80 83       	st	Z, r24
    2522:	bd cf       	rjmp	.-134    	; 0x249e <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2524:	0e 94 bf 11 	call	0x237e	; 0x237e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2528:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <twi_rxBufferIndex>
    252c:	80 32       	cpi	r24, 0x20	; 32
    252e:	30 f4       	brcc	.+12     	; 0x253c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2530:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <twi_rxBufferIndex>
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	e7 5a       	subi	r30, 0xA7	; 167
    2538:	fa 4f       	sbci	r31, 0xFA	; 250
    253a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    253c:	60 91 58 05 	lds	r22, 0x0558	; 0x800558 <twi_rxBufferIndex>
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	e0 91 bd 05 	lds	r30, 0x05BD	; 0x8005bd <twi_onSlaveReceive>
    2546:	f0 91 be 05 	lds	r31, 0x05BE	; 0x8005be <twi_onSlaveReceive+0x1>
    254a:	89 e5       	ldi	r24, 0x59	; 89
    254c:	95 e0       	ldi	r25, 0x05	; 5
    254e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2550:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <twi_rxBufferIndex>
      break;
    2554:	36 c0       	rjmp	.+108    	; 0x25c2 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2556:	84 e0       	ldi	r24, 0x04	; 4
    2558:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    255c:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2560:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2564:	e0 91 bf 05 	lds	r30, 0x05BF	; 0x8005bf <twi_onSlaveTransmit>
    2568:	f0 91 c0 05 	lds	r31, 0x05C0	; 0x8005c0 <twi_onSlaveTransmit+0x1>
    256c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    256e:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <twi_txBufferLength>
    2572:	81 11       	cpse	r24, r1
    2574:	05 c0       	rjmp	.+10     	; 0x2580 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    257c:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2580:	e0 91 7a 05 	lds	r30, 0x057A	; 0x80057a <twi_txBufferIndex>
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	8e 0f       	add	r24, r30
    2588:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <twi_txBufferIndex>
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	e5 58       	subi	r30, 0x85	; 133
    2590:	fa 4f       	sbci	r31, 0xFA	; 250
    2592:	80 81       	ld	r24, Z
    2594:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2598:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <twi_txBufferIndex>
    259c:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <twi_txBufferLength>
    25a0:	98 17       	cp	r25, r24
    25a2:	08 f4       	brcc	.+2      	; 0x25a6 <__vector_24+0x21c>
    25a4:	7c cf       	rjmp	.-264    	; 0x249e <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    25a6:	85 e8       	ldi	r24, 0x85	; 133
    25a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    25ac:	0a c0       	rjmp	.+20     	; 0x25c2 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    25ae:	85 ec       	ldi	r24, 0xC5	; 197
    25b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    25b4:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <twi_state>
      break;
    25b8:	04 c0       	rjmp	.+8      	; 0x25c2 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    25ba:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <twi_error>
      twi_stop();
    25be:	0e 94 b5 11 	call	0x236a	; 0x236a <twi_stop>
      break;
  }
}
    25c2:	ff 91       	pop	r31
    25c4:	ef 91       	pop	r30
    25c6:	bf 91       	pop	r27
    25c8:	af 91       	pop	r26
    25ca:	9f 91       	pop	r25
    25cc:	8f 91       	pop	r24
    25ce:	7f 91       	pop	r23
    25d0:	6f 91       	pop	r22
    25d2:	5f 91       	pop	r21
    25d4:	4f 91       	pop	r20
    25d6:	3f 91       	pop	r19
    25d8:	2f 91       	pop	r18
    25da:	0f 90       	pop	r0
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	0f 90       	pop	r0
    25e0:	1f 90       	pop	r1
    25e2:	18 95       	reti

000025e4 <__floatunsisf>:
    25e4:	e8 94       	clt
    25e6:	09 c0       	rjmp	.+18     	; 0x25fa <__floatsisf+0x12>

000025e8 <__floatsisf>:
    25e8:	97 fb       	bst	r25, 7
    25ea:	3e f4       	brtc	.+14     	; 0x25fa <__floatsisf+0x12>
    25ec:	90 95       	com	r25
    25ee:	80 95       	com	r24
    25f0:	70 95       	com	r23
    25f2:	61 95       	neg	r22
    25f4:	7f 4f       	sbci	r23, 0xFF	; 255
    25f6:	8f 4f       	sbci	r24, 0xFF	; 255
    25f8:	9f 4f       	sbci	r25, 0xFF	; 255
    25fa:	99 23       	and	r25, r25
    25fc:	a9 f0       	breq	.+42     	; 0x2628 <__floatsisf+0x40>
    25fe:	f9 2f       	mov	r31, r25
    2600:	96 e9       	ldi	r25, 0x96	; 150
    2602:	bb 27       	eor	r27, r27
    2604:	93 95       	inc	r25
    2606:	f6 95       	lsr	r31
    2608:	87 95       	ror	r24
    260a:	77 95       	ror	r23
    260c:	67 95       	ror	r22
    260e:	b7 95       	ror	r27
    2610:	f1 11       	cpse	r31, r1
    2612:	f8 cf       	rjmp	.-16     	; 0x2604 <__floatsisf+0x1c>
    2614:	fa f4       	brpl	.+62     	; 0x2654 <__floatsisf+0x6c>
    2616:	bb 0f       	add	r27, r27
    2618:	11 f4       	brne	.+4      	; 0x261e <__floatsisf+0x36>
    261a:	60 ff       	sbrs	r22, 0
    261c:	1b c0       	rjmp	.+54     	; 0x2654 <__floatsisf+0x6c>
    261e:	6f 5f       	subi	r22, 0xFF	; 255
    2620:	7f 4f       	sbci	r23, 0xFF	; 255
    2622:	8f 4f       	sbci	r24, 0xFF	; 255
    2624:	9f 4f       	sbci	r25, 0xFF	; 255
    2626:	16 c0       	rjmp	.+44     	; 0x2654 <__floatsisf+0x6c>
    2628:	88 23       	and	r24, r24
    262a:	11 f0       	breq	.+4      	; 0x2630 <__floatsisf+0x48>
    262c:	96 e9       	ldi	r25, 0x96	; 150
    262e:	11 c0       	rjmp	.+34     	; 0x2652 <__floatsisf+0x6a>
    2630:	77 23       	and	r23, r23
    2632:	21 f0       	breq	.+8      	; 0x263c <__floatsisf+0x54>
    2634:	9e e8       	ldi	r25, 0x8E	; 142
    2636:	87 2f       	mov	r24, r23
    2638:	76 2f       	mov	r23, r22
    263a:	05 c0       	rjmp	.+10     	; 0x2646 <__floatsisf+0x5e>
    263c:	66 23       	and	r22, r22
    263e:	71 f0       	breq	.+28     	; 0x265c <__floatsisf+0x74>
    2640:	96 e8       	ldi	r25, 0x86	; 134
    2642:	86 2f       	mov	r24, r22
    2644:	70 e0       	ldi	r23, 0x00	; 0
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	2a f0       	brmi	.+10     	; 0x2654 <__floatsisf+0x6c>
    264a:	9a 95       	dec	r25
    264c:	66 0f       	add	r22, r22
    264e:	77 1f       	adc	r23, r23
    2650:	88 1f       	adc	r24, r24
    2652:	da f7       	brpl	.-10     	; 0x264a <__floatsisf+0x62>
    2654:	88 0f       	add	r24, r24
    2656:	96 95       	lsr	r25
    2658:	87 95       	ror	r24
    265a:	97 f9       	bld	r25, 7
    265c:	08 95       	ret

0000265e <__fp_inf>:
    265e:	97 f9       	bld	r25, 7
    2660:	9f 67       	ori	r25, 0x7F	; 127
    2662:	80 e8       	ldi	r24, 0x80	; 128
    2664:	70 e0       	ldi	r23, 0x00	; 0
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	08 95       	ret

0000266a <__fp_nan>:
    266a:	9f ef       	ldi	r25, 0xFF	; 255
    266c:	80 ec       	ldi	r24, 0xC0	; 192
    266e:	08 95       	ret

00002670 <__fp_pscA>:
    2670:	00 24       	eor	r0, r0
    2672:	0a 94       	dec	r0
    2674:	16 16       	cp	r1, r22
    2676:	17 06       	cpc	r1, r23
    2678:	18 06       	cpc	r1, r24
    267a:	09 06       	cpc	r0, r25
    267c:	08 95       	ret

0000267e <__fp_pscB>:
    267e:	00 24       	eor	r0, r0
    2680:	0a 94       	dec	r0
    2682:	12 16       	cp	r1, r18
    2684:	13 06       	cpc	r1, r19
    2686:	14 06       	cpc	r1, r20
    2688:	05 06       	cpc	r0, r21
    268a:	08 95       	ret

0000268c <__fp_round>:
    268c:	09 2e       	mov	r0, r25
    268e:	03 94       	inc	r0
    2690:	00 0c       	add	r0, r0
    2692:	11 f4       	brne	.+4      	; 0x2698 <__fp_round+0xc>
    2694:	88 23       	and	r24, r24
    2696:	52 f0       	brmi	.+20     	; 0x26ac <__fp_round+0x20>
    2698:	bb 0f       	add	r27, r27
    269a:	40 f4       	brcc	.+16     	; 0x26ac <__fp_round+0x20>
    269c:	bf 2b       	or	r27, r31
    269e:	11 f4       	brne	.+4      	; 0x26a4 <__fp_round+0x18>
    26a0:	60 ff       	sbrs	r22, 0
    26a2:	04 c0       	rjmp	.+8      	; 0x26ac <__fp_round+0x20>
    26a4:	6f 5f       	subi	r22, 0xFF	; 255
    26a6:	7f 4f       	sbci	r23, 0xFF	; 255
    26a8:	8f 4f       	sbci	r24, 0xFF	; 255
    26aa:	9f 4f       	sbci	r25, 0xFF	; 255
    26ac:	08 95       	ret

000026ae <__fp_split3>:
    26ae:	57 fd       	sbrc	r21, 7
    26b0:	90 58       	subi	r25, 0x80	; 128
    26b2:	44 0f       	add	r20, r20
    26b4:	55 1f       	adc	r21, r21
    26b6:	59 f0       	breq	.+22     	; 0x26ce <__fp_splitA+0x10>
    26b8:	5f 3f       	cpi	r21, 0xFF	; 255
    26ba:	71 f0       	breq	.+28     	; 0x26d8 <__fp_splitA+0x1a>
    26bc:	47 95       	ror	r20

000026be <__fp_splitA>:
    26be:	88 0f       	add	r24, r24
    26c0:	97 fb       	bst	r25, 7
    26c2:	99 1f       	adc	r25, r25
    26c4:	61 f0       	breq	.+24     	; 0x26de <__fp_splitA+0x20>
    26c6:	9f 3f       	cpi	r25, 0xFF	; 255
    26c8:	79 f0       	breq	.+30     	; 0x26e8 <__fp_splitA+0x2a>
    26ca:	87 95       	ror	r24
    26cc:	08 95       	ret
    26ce:	12 16       	cp	r1, r18
    26d0:	13 06       	cpc	r1, r19
    26d2:	14 06       	cpc	r1, r20
    26d4:	55 1f       	adc	r21, r21
    26d6:	f2 cf       	rjmp	.-28     	; 0x26bc <__fp_split3+0xe>
    26d8:	46 95       	lsr	r20
    26da:	f1 df       	rcall	.-30     	; 0x26be <__fp_splitA>
    26dc:	08 c0       	rjmp	.+16     	; 0x26ee <__fp_splitA+0x30>
    26de:	16 16       	cp	r1, r22
    26e0:	17 06       	cpc	r1, r23
    26e2:	18 06       	cpc	r1, r24
    26e4:	99 1f       	adc	r25, r25
    26e6:	f1 cf       	rjmp	.-30     	; 0x26ca <__fp_splitA+0xc>
    26e8:	86 95       	lsr	r24
    26ea:	71 05       	cpc	r23, r1
    26ec:	61 05       	cpc	r22, r1
    26ee:	08 94       	sec
    26f0:	08 95       	ret

000026f2 <__fp_zero>:
    26f2:	e8 94       	clt

000026f4 <__fp_szero>:
    26f4:	bb 27       	eor	r27, r27
    26f6:	66 27       	eor	r22, r22
    26f8:	77 27       	eor	r23, r23
    26fa:	cb 01       	movw	r24, r22
    26fc:	97 f9       	bld	r25, 7
    26fe:	08 95       	ret

00002700 <__mulsf3>:
    2700:	0e 94 93 13 	call	0x2726	; 0x2726 <__mulsf3x>
    2704:	0c 94 46 13 	jmp	0x268c	; 0x268c <__fp_round>
    2708:	0e 94 38 13 	call	0x2670	; 0x2670 <__fp_pscA>
    270c:	38 f0       	brcs	.+14     	; 0x271c <__mulsf3+0x1c>
    270e:	0e 94 3f 13 	call	0x267e	; 0x267e <__fp_pscB>
    2712:	20 f0       	brcs	.+8      	; 0x271c <__mulsf3+0x1c>
    2714:	95 23       	and	r25, r21
    2716:	11 f0       	breq	.+4      	; 0x271c <__mulsf3+0x1c>
    2718:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__fp_inf>
    271c:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_nan>
    2720:	11 24       	eor	r1, r1
    2722:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__fp_szero>

00002726 <__mulsf3x>:
    2726:	0e 94 57 13 	call	0x26ae	; 0x26ae <__fp_split3>
    272a:	70 f3       	brcs	.-36     	; 0x2708 <__mulsf3+0x8>

0000272c <__mulsf3_pse>:
    272c:	95 9f       	mul	r25, r21
    272e:	c1 f3       	breq	.-16     	; 0x2720 <__mulsf3+0x20>
    2730:	95 0f       	add	r25, r21
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	55 1f       	adc	r21, r21
    2736:	62 9f       	mul	r22, r18
    2738:	f0 01       	movw	r30, r0
    273a:	72 9f       	mul	r23, r18
    273c:	bb 27       	eor	r27, r27
    273e:	f0 0d       	add	r31, r0
    2740:	b1 1d       	adc	r27, r1
    2742:	63 9f       	mul	r22, r19
    2744:	aa 27       	eor	r26, r26
    2746:	f0 0d       	add	r31, r0
    2748:	b1 1d       	adc	r27, r1
    274a:	aa 1f       	adc	r26, r26
    274c:	64 9f       	mul	r22, r20
    274e:	66 27       	eor	r22, r22
    2750:	b0 0d       	add	r27, r0
    2752:	a1 1d       	adc	r26, r1
    2754:	66 1f       	adc	r22, r22
    2756:	82 9f       	mul	r24, r18
    2758:	22 27       	eor	r18, r18
    275a:	b0 0d       	add	r27, r0
    275c:	a1 1d       	adc	r26, r1
    275e:	62 1f       	adc	r22, r18
    2760:	73 9f       	mul	r23, r19
    2762:	b0 0d       	add	r27, r0
    2764:	a1 1d       	adc	r26, r1
    2766:	62 1f       	adc	r22, r18
    2768:	83 9f       	mul	r24, r19
    276a:	a0 0d       	add	r26, r0
    276c:	61 1d       	adc	r22, r1
    276e:	22 1f       	adc	r18, r18
    2770:	74 9f       	mul	r23, r20
    2772:	33 27       	eor	r19, r19
    2774:	a0 0d       	add	r26, r0
    2776:	61 1d       	adc	r22, r1
    2778:	23 1f       	adc	r18, r19
    277a:	84 9f       	mul	r24, r20
    277c:	60 0d       	add	r22, r0
    277e:	21 1d       	adc	r18, r1
    2780:	82 2f       	mov	r24, r18
    2782:	76 2f       	mov	r23, r22
    2784:	6a 2f       	mov	r22, r26
    2786:	11 24       	eor	r1, r1
    2788:	9f 57       	subi	r25, 0x7F	; 127
    278a:	50 40       	sbci	r21, 0x00	; 0
    278c:	9a f0       	brmi	.+38     	; 0x27b4 <__mulsf3_pse+0x88>
    278e:	f1 f0       	breq	.+60     	; 0x27cc <__mulsf3_pse+0xa0>
    2790:	88 23       	and	r24, r24
    2792:	4a f0       	brmi	.+18     	; 0x27a6 <__mulsf3_pse+0x7a>
    2794:	ee 0f       	add	r30, r30
    2796:	ff 1f       	adc	r31, r31
    2798:	bb 1f       	adc	r27, r27
    279a:	66 1f       	adc	r22, r22
    279c:	77 1f       	adc	r23, r23
    279e:	88 1f       	adc	r24, r24
    27a0:	91 50       	subi	r25, 0x01	; 1
    27a2:	50 40       	sbci	r21, 0x00	; 0
    27a4:	a9 f7       	brne	.-22     	; 0x2790 <__mulsf3_pse+0x64>
    27a6:	9e 3f       	cpi	r25, 0xFE	; 254
    27a8:	51 05       	cpc	r21, r1
    27aa:	80 f0       	brcs	.+32     	; 0x27cc <__mulsf3_pse+0xa0>
    27ac:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__fp_inf>
    27b0:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__fp_szero>
    27b4:	5f 3f       	cpi	r21, 0xFF	; 255
    27b6:	e4 f3       	brlt	.-8      	; 0x27b0 <__mulsf3_pse+0x84>
    27b8:	98 3e       	cpi	r25, 0xE8	; 232
    27ba:	d4 f3       	brlt	.-12     	; 0x27b0 <__mulsf3_pse+0x84>
    27bc:	86 95       	lsr	r24
    27be:	77 95       	ror	r23
    27c0:	67 95       	ror	r22
    27c2:	b7 95       	ror	r27
    27c4:	f7 95       	ror	r31
    27c6:	e7 95       	ror	r30
    27c8:	9f 5f       	subi	r25, 0xFF	; 255
    27ca:	c1 f7       	brne	.-16     	; 0x27bc <__mulsf3_pse+0x90>
    27cc:	fe 2b       	or	r31, r30
    27ce:	88 0f       	add	r24, r24
    27d0:	91 1d       	adc	r25, r1
    27d2:	96 95       	lsr	r25
    27d4:	87 95       	ror	r24
    27d6:	97 f9       	bld	r25, 7
    27d8:	08 95       	ret

000027da <__divmodhi4>:
    27da:	97 fb       	bst	r25, 7
    27dc:	07 2e       	mov	r0, r23
    27de:	16 f4       	brtc	.+4      	; 0x27e4 <__divmodhi4+0xa>
    27e0:	00 94       	com	r0
    27e2:	07 d0       	rcall	.+14     	; 0x27f2 <__divmodhi4_neg1>
    27e4:	77 fd       	sbrc	r23, 7
    27e6:	09 d0       	rcall	.+18     	; 0x27fa <__divmodhi4_neg2>
    27e8:	0e 94 2e 14 	call	0x285c	; 0x285c <__udivmodhi4>
    27ec:	07 fc       	sbrc	r0, 7
    27ee:	05 d0       	rcall	.+10     	; 0x27fa <__divmodhi4_neg2>
    27f0:	3e f4       	brtc	.+14     	; 0x2800 <__divmodhi4_exit>

000027f2 <__divmodhi4_neg1>:
    27f2:	90 95       	com	r25
    27f4:	81 95       	neg	r24
    27f6:	9f 4f       	sbci	r25, 0xFF	; 255
    27f8:	08 95       	ret

000027fa <__divmodhi4_neg2>:
    27fa:	70 95       	com	r23
    27fc:	61 95       	neg	r22
    27fe:	7f 4f       	sbci	r23, 0xFF	; 255

00002800 <__divmodhi4_exit>:
    2800:	08 95       	ret

00002802 <__udivmodsi4>:
    2802:	a1 e2       	ldi	r26, 0x21	; 33
    2804:	1a 2e       	mov	r1, r26
    2806:	aa 1b       	sub	r26, r26
    2808:	bb 1b       	sub	r27, r27
    280a:	fd 01       	movw	r30, r26
    280c:	0d c0       	rjmp	.+26     	; 0x2828 <__udivmodsi4_ep>

0000280e <__udivmodsi4_loop>:
    280e:	aa 1f       	adc	r26, r26
    2810:	bb 1f       	adc	r27, r27
    2812:	ee 1f       	adc	r30, r30
    2814:	ff 1f       	adc	r31, r31
    2816:	a2 17       	cp	r26, r18
    2818:	b3 07       	cpc	r27, r19
    281a:	e4 07       	cpc	r30, r20
    281c:	f5 07       	cpc	r31, r21
    281e:	20 f0       	brcs	.+8      	; 0x2828 <__udivmodsi4_ep>
    2820:	a2 1b       	sub	r26, r18
    2822:	b3 0b       	sbc	r27, r19
    2824:	e4 0b       	sbc	r30, r20
    2826:	f5 0b       	sbc	r31, r21

00002828 <__udivmodsi4_ep>:
    2828:	66 1f       	adc	r22, r22
    282a:	77 1f       	adc	r23, r23
    282c:	88 1f       	adc	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	1a 94       	dec	r1
    2832:	69 f7       	brne	.-38     	; 0x280e <__udivmodsi4_loop>
    2834:	60 95       	com	r22
    2836:	70 95       	com	r23
    2838:	80 95       	com	r24
    283a:	90 95       	com	r25
    283c:	9b 01       	movw	r18, r22
    283e:	ac 01       	movw	r20, r24
    2840:	bd 01       	movw	r22, r26
    2842:	cf 01       	movw	r24, r30
    2844:	08 95       	ret

00002846 <__muluhisi3>:
    2846:	0e 94 48 14 	call	0x2890	; 0x2890 <__umulhisi3>
    284a:	a5 9f       	mul	r26, r21
    284c:	90 0d       	add	r25, r0
    284e:	b4 9f       	mul	r27, r20
    2850:	90 0d       	add	r25, r0
    2852:	a4 9f       	mul	r26, r20
    2854:	80 0d       	add	r24, r0
    2856:	91 1d       	adc	r25, r1
    2858:	11 24       	eor	r1, r1
    285a:	08 95       	ret

0000285c <__udivmodhi4>:
    285c:	aa 1b       	sub	r26, r26
    285e:	bb 1b       	sub	r27, r27
    2860:	51 e1       	ldi	r21, 0x11	; 17
    2862:	07 c0       	rjmp	.+14     	; 0x2872 <__udivmodhi4_ep>

00002864 <__udivmodhi4_loop>:
    2864:	aa 1f       	adc	r26, r26
    2866:	bb 1f       	adc	r27, r27
    2868:	a6 17       	cp	r26, r22
    286a:	b7 07       	cpc	r27, r23
    286c:	10 f0       	brcs	.+4      	; 0x2872 <__udivmodhi4_ep>
    286e:	a6 1b       	sub	r26, r22
    2870:	b7 0b       	sbc	r27, r23

00002872 <__udivmodhi4_ep>:
    2872:	88 1f       	adc	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	5a 95       	dec	r21
    2878:	a9 f7       	brne	.-22     	; 0x2864 <__udivmodhi4_loop>
    287a:	80 95       	com	r24
    287c:	90 95       	com	r25
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	08 95       	ret

00002884 <__tablejump2__>:
    2884:	ee 0f       	add	r30, r30
    2886:	ff 1f       	adc	r31, r31
    2888:	05 90       	lpm	r0, Z+
    288a:	f4 91       	lpm	r31, Z
    288c:	e0 2d       	mov	r30, r0
    288e:	09 94       	ijmp

00002890 <__umulhisi3>:
    2890:	a2 9f       	mul	r26, r18
    2892:	b0 01       	movw	r22, r0
    2894:	b3 9f       	mul	r27, r19
    2896:	c0 01       	movw	r24, r0
    2898:	a3 9f       	mul	r26, r19
    289a:	70 0d       	add	r23, r0
    289c:	81 1d       	adc	r24, r1
    289e:	11 24       	eor	r1, r1
    28a0:	91 1d       	adc	r25, r1
    28a2:	b2 9f       	mul	r27, r18
    28a4:	70 0d       	add	r23, r0
    28a6:	81 1d       	adc	r24, r1
    28a8:	11 24       	eor	r1, r1
    28aa:	91 1d       	adc	r25, r1
    28ac:	08 95       	ret

000028ae <strtoul>:
    28ae:	a0 e0       	ldi	r26, 0x00	; 0
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	ed e5       	ldi	r30, 0x5D	; 93
    28b4:	f4 e1       	ldi	r31, 0x14	; 20
    28b6:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x2>
    28ba:	5c 01       	movw	r10, r24
    28bc:	6b 01       	movw	r12, r22
    28be:	7a 01       	movw	r14, r20
    28c0:	61 15       	cp	r22, r1
    28c2:	71 05       	cpc	r23, r1
    28c4:	19 f0       	breq	.+6      	; 0x28cc <strtoul+0x1e>
    28c6:	fb 01       	movw	r30, r22
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	80 83       	st	Z, r24
    28cc:	e1 14       	cp	r14, r1
    28ce:	f1 04       	cpc	r15, r1
    28d0:	29 f0       	breq	.+10     	; 0x28dc <strtoul+0x2e>
    28d2:	c7 01       	movw	r24, r14
    28d4:	02 97       	sbiw	r24, 0x02	; 2
    28d6:	83 97       	sbiw	r24, 0x23	; 35
    28d8:	08 f0       	brcs	.+2      	; 0x28dc <strtoul+0x2e>
    28da:	c9 c0       	rjmp	.+402    	; 0x2a6e <strtoul+0x1c0>
    28dc:	e5 01       	movw	r28, r10
    28de:	21 96       	adiw	r28, 0x01	; 1
    28e0:	f5 01       	movw	r30, r10
    28e2:	10 81       	ld	r17, Z
    28e4:	81 2f       	mov	r24, r17
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <isspace>
    28ec:	89 2b       	or	r24, r25
    28ee:	11 f0       	breq	.+4      	; 0x28f4 <strtoul+0x46>
    28f0:	5e 01       	movw	r10, r28
    28f2:	f4 cf       	rjmp	.-24     	; 0x28dc <strtoul+0x2e>
    28f4:	1d 32       	cpi	r17, 0x2D	; 45
    28f6:	29 f4       	brne	.+10     	; 0x2902 <strtoul+0x54>
    28f8:	21 96       	adiw	r28, 0x01	; 1
    28fa:	f5 01       	movw	r30, r10
    28fc:	11 81       	ldd	r17, Z+1	; 0x01
    28fe:	01 e0       	ldi	r16, 0x01	; 1
    2900:	07 c0       	rjmp	.+14     	; 0x2910 <strtoul+0x62>
    2902:	1b 32       	cpi	r17, 0x2B	; 43
    2904:	21 f4       	brne	.+8      	; 0x290e <strtoul+0x60>
    2906:	e5 01       	movw	r28, r10
    2908:	22 96       	adiw	r28, 0x02	; 2
    290a:	f5 01       	movw	r30, r10
    290c:	11 81       	ldd	r17, Z+1	; 0x01
    290e:	00 e0       	ldi	r16, 0x00	; 0
    2910:	e1 14       	cp	r14, r1
    2912:	f1 04       	cpc	r15, r1
    2914:	b1 f0       	breq	.+44     	; 0x2942 <strtoul+0x94>
    2916:	f0 e1       	ldi	r31, 0x10	; 16
    2918:	ef 16       	cp	r14, r31
    291a:	f1 04       	cpc	r15, r1
    291c:	29 f4       	brne	.+10     	; 0x2928 <strtoul+0x7a>
    291e:	b0 c0       	rjmp	.+352    	; 0x2a80 <strtoul+0x1d2>
    2920:	10 e3       	ldi	r17, 0x30	; 48
    2922:	e1 14       	cp	r14, r1
    2924:	f1 04       	cpc	r15, r1
    2926:	01 f1       	breq	.+64     	; 0x2968 <strtoul+0xba>
    2928:	2a e0       	ldi	r18, 0x0A	; 10
    292a:	e2 16       	cp	r14, r18
    292c:	f1 04       	cpc	r15, r1
    292e:	b1 f1       	breq	.+108    	; 0x299c <strtoul+0xee>
    2930:	80 e1       	ldi	r24, 0x10	; 16
    2932:	e8 16       	cp	r14, r24
    2934:	f1 04       	cpc	r15, r1
    2936:	71 f0       	breq	.+28     	; 0x2954 <strtoul+0xa6>
    2938:	e8 e0       	ldi	r30, 0x08	; 8
    293a:	ee 16       	cp	r14, r30
    293c:	f1 04       	cpc	r15, r1
    293e:	f1 f4       	brne	.+60     	; 0x297c <strtoul+0xce>
    2940:	13 c0       	rjmp	.+38     	; 0x2968 <strtoul+0xba>
    2942:	10 33       	cpi	r17, 0x30	; 48
    2944:	41 f5       	brne	.+80     	; 0x2996 <strtoul+0xe8>
    2946:	88 81       	ld	r24, Y
    2948:	8f 7d       	andi	r24, 0xDF	; 223
    294a:	88 35       	cpi	r24, 0x58	; 88
    294c:	49 f7       	brne	.-46     	; 0x2920 <strtoul+0x72>
    294e:	19 81       	ldd	r17, Y+1	; 0x01
    2950:	22 96       	adiw	r28, 0x02	; 2
    2952:	02 60       	ori	r16, 0x02	; 2
    2954:	f0 e1       	ldi	r31, 0x10	; 16
    2956:	ef 2e       	mov	r14, r31
    2958:	f1 2c       	mov	r15, r1
    295a:	88 24       	eor	r8, r8
    295c:	8a 94       	dec	r8
    295e:	98 2c       	mov	r9, r8
    2960:	a8 2c       	mov	r10, r8
    2962:	af e0       	ldi	r26, 0x0F	; 15
    2964:	ba 2e       	mov	r11, r26
    2966:	20 c0       	rjmp	.+64     	; 0x29a8 <strtoul+0xfa>
    2968:	78 e0       	ldi	r23, 0x08	; 8
    296a:	e7 2e       	mov	r14, r23
    296c:	f1 2c       	mov	r15, r1
    296e:	88 24       	eor	r8, r8
    2970:	8a 94       	dec	r8
    2972:	98 2c       	mov	r9, r8
    2974:	a8 2c       	mov	r10, r8
    2976:	ef e1       	ldi	r30, 0x1F	; 31
    2978:	be 2e       	mov	r11, r30
    297a:	16 c0       	rjmp	.+44     	; 0x29a8 <strtoul+0xfa>
    297c:	6f ef       	ldi	r22, 0xFF	; 255
    297e:	7f ef       	ldi	r23, 0xFF	; 255
    2980:	cb 01       	movw	r24, r22
    2982:	97 01       	movw	r18, r14
    2984:	0f 2c       	mov	r0, r15
    2986:	00 0c       	add	r0, r0
    2988:	44 0b       	sbc	r20, r20
    298a:	55 0b       	sbc	r21, r21
    298c:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodsi4>
    2990:	49 01       	movw	r8, r18
    2992:	5a 01       	movw	r10, r20
    2994:	09 c0       	rjmp	.+18     	; 0x29a8 <strtoul+0xfa>
    2996:	8a e0       	ldi	r24, 0x0A	; 10
    2998:	e8 2e       	mov	r14, r24
    299a:	f1 2c       	mov	r15, r1
    299c:	69 e9       	ldi	r22, 0x99	; 153
    299e:	86 2e       	mov	r8, r22
    29a0:	98 2c       	mov	r9, r8
    29a2:	a8 2c       	mov	r10, r8
    29a4:	69 e1       	ldi	r22, 0x19	; 25
    29a6:	b6 2e       	mov	r11, r22
    29a8:	40 e0       	ldi	r20, 0x00	; 0
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	cb 01       	movw	r24, r22
    29b0:	27 01       	movw	r4, r14
    29b2:	0f 2c       	mov	r0, r15
    29b4:	00 0c       	add	r0, r0
    29b6:	66 08       	sbc	r6, r6
    29b8:	77 08       	sbc	r7, r7
    29ba:	fe 01       	movw	r30, r28
    29bc:	50 ed       	ldi	r21, 0xD0	; 208
    29be:	35 2e       	mov	r3, r21
    29c0:	31 0e       	add	r3, r17
    29c2:	29 e0       	ldi	r18, 0x09	; 9
    29c4:	23 15       	cp	r18, r3
    29c6:	70 f4       	brcc	.+28     	; 0x29e4 <strtoul+0x136>
    29c8:	2f eb       	ldi	r18, 0xBF	; 191
    29ca:	21 0f       	add	r18, r17
    29cc:	2a 31       	cpi	r18, 0x1A	; 26
    29ce:	18 f4       	brcc	.+6      	; 0x29d6 <strtoul+0x128>
    29d0:	39 ec       	ldi	r19, 0xC9	; 201
    29d2:	33 2e       	mov	r3, r19
    29d4:	06 c0       	rjmp	.+12     	; 0x29e2 <strtoul+0x134>
    29d6:	2f e9       	ldi	r18, 0x9F	; 159
    29d8:	21 0f       	add	r18, r17
    29da:	2a 31       	cpi	r18, 0x1A	; 26
    29dc:	30 f5       	brcc	.+76     	; 0x2a2a <strtoul+0x17c>
    29de:	29 ea       	ldi	r18, 0xA9	; 169
    29e0:	32 2e       	mov	r3, r18
    29e2:	31 0e       	add	r3, r17
    29e4:	23 2d       	mov	r18, r3
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	2e 15       	cp	r18, r14
    29ea:	3f 05       	cpc	r19, r15
    29ec:	f4 f4       	brge	.+60     	; 0x2a2a <strtoul+0x17c>
    29ee:	4f 3f       	cpi	r20, 0xFF	; 255
    29f0:	c9 f0       	breq	.+50     	; 0x2a24 <strtoul+0x176>
    29f2:	86 16       	cp	r8, r22
    29f4:	97 06       	cpc	r9, r23
    29f6:	a8 06       	cpc	r10, r24
    29f8:	b9 06       	cpc	r11, r25
    29fa:	88 f0       	brcs	.+34     	; 0x2a1e <strtoul+0x170>
    29fc:	a3 01       	movw	r20, r6
    29fe:	92 01       	movw	r18, r4
    2a00:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__mulsi3>
    2a04:	23 2d       	mov	r18, r3
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	50 e0       	ldi	r21, 0x00	; 0
    2a0c:	62 0f       	add	r22, r18
    2a0e:	73 1f       	adc	r23, r19
    2a10:	84 1f       	adc	r24, r20
    2a12:	95 1f       	adc	r25, r21
    2a14:	62 17       	cp	r22, r18
    2a16:	73 07       	cpc	r23, r19
    2a18:	84 07       	cpc	r24, r20
    2a1a:	95 07       	cpc	r25, r21
    2a1c:	10 f4       	brcc	.+4      	; 0x2a22 <strtoul+0x174>
    2a1e:	4f ef       	ldi	r20, 0xFF	; 255
    2a20:	01 c0       	rjmp	.+2      	; 0x2a24 <strtoul+0x176>
    2a22:	41 e0       	ldi	r20, 0x01	; 1
    2a24:	21 96       	adiw	r28, 0x01	; 1
    2a26:	10 81       	ld	r17, Z
    2a28:	c8 cf       	rjmp	.-112    	; 0x29ba <strtoul+0x10c>
    2a2a:	c1 14       	cp	r12, r1
    2a2c:	d1 04       	cpc	r13, r1
    2a2e:	51 f0       	breq	.+20     	; 0x2a44 <strtoul+0x196>
    2a30:	44 23       	and	r20, r20
    2a32:	11 f0       	breq	.+4      	; 0x2a38 <strtoul+0x18a>
    2a34:	21 97       	sbiw	r28, 0x01	; 1
    2a36:	03 c0       	rjmp	.+6      	; 0x2a3e <strtoul+0x190>
    2a38:	01 ff       	sbrs	r16, 1
    2a3a:	04 c0       	rjmp	.+8      	; 0x2a44 <strtoul+0x196>
    2a3c:	22 97       	sbiw	r28, 0x02	; 2
    2a3e:	f6 01       	movw	r30, r12
    2a40:	d1 83       	std	Z+1, r29	; 0x01
    2a42:	c0 83       	st	Z, r28
    2a44:	00 ff       	sbrs	r16, 0
    2a46:	07 c0       	rjmp	.+14     	; 0x2a56 <strtoul+0x1a8>
    2a48:	90 95       	com	r25
    2a4a:	80 95       	com	r24
    2a4c:	70 95       	com	r23
    2a4e:	61 95       	neg	r22
    2a50:	7f 4f       	sbci	r23, 0xFF	; 255
    2a52:	8f 4f       	sbci	r24, 0xFF	; 255
    2a54:	9f 4f       	sbci	r25, 0xFF	; 255
    2a56:	4f 3f       	cpi	r20, 0xFF	; 255
    2a58:	79 f4       	brne	.+30     	; 0x2a78 <strtoul+0x1ca>
    2a5a:	82 e2       	ldi	r24, 0x22	; 34
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	90 93 c6 05 	sts	0x05C6, r25	; 0x8005c6 <errno+0x1>
    2a62:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <errno>
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	2f ef       	ldi	r18, 0xFF	; 255
    2a6a:	9f ef       	ldi	r25, 0xFF	; 255
    2a6c:	0d c0       	rjmp	.+26     	; 0x2a88 <strtoul+0x1da>
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	08 c0       	rjmp	.+16     	; 0x2a88 <strtoul+0x1da>
    2a78:	46 2f       	mov	r20, r22
    2a7a:	37 2f       	mov	r19, r23
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	04 c0       	rjmp	.+8      	; 0x2a88 <strtoul+0x1da>
    2a80:	10 33       	cpi	r17, 0x30	; 48
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <strtoul+0x1d8>
    2a84:	67 cf       	rjmp	.-306    	; 0x2954 <strtoul+0xa6>
    2a86:	5f cf       	rjmp	.-322    	; 0x2946 <strtoul+0x98>
    2a88:	64 2f       	mov	r22, r20
    2a8a:	73 2f       	mov	r23, r19
    2a8c:	82 2f       	mov	r24, r18
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	e1 e1       	ldi	r30, 0x11	; 17
    2a94:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x2>

00002a98 <isspace>:
    2a98:	91 11       	cpse	r25, r1
    2a9a:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__ctype_isfalse>
    2a9e:	80 32       	cpi	r24, 0x20	; 32
    2aa0:	19 f0       	breq	.+6      	; 0x2aa8 <isspace+0x10>
    2aa2:	89 50       	subi	r24, 0x09	; 9
    2aa4:	85 50       	subi	r24, 0x05	; 5
    2aa6:	c8 f7       	brcc	.-14     	; 0x2a9a <isspace+0x2>
    2aa8:	08 95       	ret

00002aaa <strtok>:
    2aaa:	4c eb       	ldi	r20, 0xBC	; 188
    2aac:	52 e0       	ldi	r21, 0x02	; 2
    2aae:	0e 94 82 15 	call	0x2b04	; 0x2b04 <strtok_r>
    2ab2:	08 95       	ret

00002ab4 <memcmp>:
    2ab4:	fb 01       	movw	r30, r22
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	04 c0       	rjmp	.+8      	; 0x2ac2 <memcmp+0xe>
    2aba:	8d 91       	ld	r24, X+
    2abc:	01 90       	ld	r0, Z+
    2abe:	80 19       	sub	r24, r0
    2ac0:	21 f4       	brne	.+8      	; 0x2aca <memcmp+0x16>
    2ac2:	41 50       	subi	r20, 0x01	; 1
    2ac4:	50 40       	sbci	r21, 0x00	; 0
    2ac6:	c8 f7       	brcc	.-14     	; 0x2aba <memcmp+0x6>
    2ac8:	88 1b       	sub	r24, r24
    2aca:	99 0b       	sbc	r25, r25
    2acc:	08 95       	ret

00002ace <strcat>:
    2ace:	fb 01       	movw	r30, r22
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	0d 90       	ld	r0, X+
    2ad4:	00 20       	and	r0, r0
    2ad6:	e9 f7       	brne	.-6      	; 0x2ad2 <strcat+0x4>
    2ad8:	11 97       	sbiw	r26, 0x01	; 1
    2ada:	01 90       	ld	r0, Z+
    2adc:	0d 92       	st	X+, r0
    2ade:	00 20       	and	r0, r0
    2ae0:	e1 f7       	brne	.-8      	; 0x2ada <strcat+0xc>
    2ae2:	08 95       	ret

00002ae4 <strncat>:
    2ae4:	fb 01       	movw	r30, r22
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	0d 90       	ld	r0, X+
    2aea:	00 20       	and	r0, r0
    2aec:	e9 f7       	brne	.-6      	; 0x2ae8 <strncat+0x4>
    2aee:	11 97       	sbiw	r26, 0x01	; 1
    2af0:	41 50       	subi	r20, 0x01	; 1
    2af2:	50 40       	sbci	r21, 0x00	; 0
    2af4:	28 f0       	brcs	.+10     	; 0x2b00 <strncat+0x1c>
    2af6:	01 90       	ld	r0, Z+
    2af8:	00 20       	and	r0, r0
    2afa:	0d 92       	st	X+, r0
    2afc:	c9 f7       	brne	.-14     	; 0x2af0 <strncat+0xc>
    2afe:	08 95       	ret
    2b00:	1c 92       	st	X, r1
    2b02:	08 95       	ret

00002b04 <strtok_r>:
    2b04:	fa 01       	movw	r30, r20
    2b06:	a1 91       	ld	r26, Z+
    2b08:	b0 81       	ld	r27, Z
    2b0a:	00 97       	sbiw	r24, 0x00	; 0
    2b0c:	19 f4       	brne	.+6      	; 0x2b14 <strtok_r+0x10>
    2b0e:	10 97       	sbiw	r26, 0x00	; 0
    2b10:	e1 f0       	breq	.+56     	; 0x2b4a <strtok_r+0x46>
    2b12:	cd 01       	movw	r24, r26
    2b14:	dc 01       	movw	r26, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	0d 90       	ld	r0, X+
    2b1a:	00 20       	and	r0, r0
    2b1c:	11 f4       	brne	.+4      	; 0x2b22 <strtok_r+0x1e>
    2b1e:	c0 01       	movw	r24, r0
    2b20:	13 c0       	rjmp	.+38     	; 0x2b48 <strtok_r+0x44>
    2b22:	fb 01       	movw	r30, r22
    2b24:	21 91       	ld	r18, Z+
    2b26:	22 23       	and	r18, r18
    2b28:	19 f0       	breq	.+6      	; 0x2b30 <strtok_r+0x2c>
    2b2a:	20 15       	cp	r18, r0
    2b2c:	d9 f7       	brne	.-10     	; 0x2b24 <strtok_r+0x20>
    2b2e:	f3 cf       	rjmp	.-26     	; 0x2b16 <strtok_r+0x12>
    2b30:	fb 01       	movw	r30, r22
    2b32:	21 91       	ld	r18, Z+
    2b34:	20 15       	cp	r18, r0
    2b36:	19 f4       	brne	.+6      	; 0x2b3e <strtok_r+0x3a>
    2b38:	1e 92       	st	-X, r1
    2b3a:	11 96       	adiw	r26, 0x01	; 1
    2b3c:	06 c0       	rjmp	.+12     	; 0x2b4a <strtok_r+0x46>
    2b3e:	22 23       	and	r18, r18
    2b40:	c1 f7       	brne	.-16     	; 0x2b32 <strtok_r+0x2e>
    2b42:	0d 90       	ld	r0, X+
    2b44:	00 20       	and	r0, r0
    2b46:	a1 f7       	brne	.-24     	; 0x2b30 <strtok_r+0x2c>
    2b48:	d0 01       	movw	r26, r0
    2b4a:	fa 01       	movw	r30, r20
    2b4c:	a1 93       	st	Z+, r26
    2b4e:	b0 83       	st	Z, r27
    2b50:	08 95       	ret

00002b52 <__ctype_isfalse>:
    2b52:	99 27       	eor	r25, r25
    2b54:	88 27       	eor	r24, r24

00002b56 <__ctype_istrue>:
    2b56:	08 95       	ret

00002b58 <__mulsi3>:
    2b58:	db 01       	movw	r26, r22
    2b5a:	8f 93       	push	r24
    2b5c:	9f 93       	push	r25
    2b5e:	0e 94 23 14 	call	0x2846	; 0x2846 <__muluhisi3>
    2b62:	bf 91       	pop	r27
    2b64:	af 91       	pop	r26
    2b66:	a2 9f       	mul	r26, r18
    2b68:	80 0d       	add	r24, r0
    2b6a:	91 1d       	adc	r25, r1
    2b6c:	a3 9f       	mul	r26, r19
    2b6e:	90 0d       	add	r25, r0
    2b70:	b2 9f       	mul	r27, r18
    2b72:	90 0d       	add	r25, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	08 95       	ret

00002b78 <__prologue_saves__>:
    2b78:	2f 92       	push	r2
    2b7a:	3f 92       	push	r3
    2b7c:	4f 92       	push	r4
    2b7e:	5f 92       	push	r5
    2b80:	6f 92       	push	r6
    2b82:	7f 92       	push	r7
    2b84:	8f 92       	push	r8
    2b86:	9f 92       	push	r9
    2b88:	af 92       	push	r10
    2b8a:	bf 92       	push	r11
    2b8c:	cf 92       	push	r12
    2b8e:	df 92       	push	r13
    2b90:	ef 92       	push	r14
    2b92:	ff 92       	push	r15
    2b94:	0f 93       	push	r16
    2b96:	1f 93       	push	r17
    2b98:	cf 93       	push	r28
    2b9a:	df 93       	push	r29
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	ca 1b       	sub	r28, r26
    2ba2:	db 0b       	sbc	r29, r27
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	09 94       	ijmp

00002bb0 <__epilogue_restores__>:
    2bb0:	2a 88       	ldd	r2, Y+18	; 0x12
    2bb2:	39 88       	ldd	r3, Y+17	; 0x11
    2bb4:	48 88       	ldd	r4, Y+16	; 0x10
    2bb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bba:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bc2:	b9 84       	ldd	r11, Y+9	; 0x09
    2bc4:	c8 84       	ldd	r12, Y+8	; 0x08
    2bc6:	df 80       	ldd	r13, Y+7	; 0x07
    2bc8:	ee 80       	ldd	r14, Y+6	; 0x06
    2bca:	fd 80       	ldd	r15, Y+5	; 0x05
    2bcc:	0c 81       	ldd	r16, Y+4	; 0x04
    2bce:	1b 81       	ldd	r17, Y+3	; 0x03
    2bd0:	aa 81       	ldd	r26, Y+2	; 0x02
    2bd2:	b9 81       	ldd	r27, Y+1	; 0x01
    2bd4:	ce 0f       	add	r28, r30
    2bd6:	d1 1d       	adc	r29, r1
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	ed 01       	movw	r28, r26
    2be4:	08 95       	ret

00002be6 <_exit>:
    2be6:	f8 94       	cli

00002be8 <__stop_program>:
    2be8:	ff cf       	rjmp	.-2      	; 0x2be8 <__stop_program>
